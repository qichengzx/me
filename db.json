{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_draft/jquery-custom-post1.md","shasum":"8a22f87f3e39acdd080cad101b42f1b6ca9a8dd0","modified":1450272388000},{"_id":"source/_draft/js-.md","shasum":"d2586d8c056a73c63c9556fe1f29d32778857172","modified":1447768969000},{"_id":"source/_draft/mac-senseidb-zookeeper.md","shasum":"a1906947aeda2a389e61bb35d2b965858223fda2","modified":1447753228000},{"_id":"source/_posts/React-Native-Fetch.md","shasum":"7f714c0d9c3daf6d3758684f27e48d72a283b0d4","modified":1446951113000},{"_id":"source/_posts/Set Up a Private Git Server on a VPS.md","shasum":"80238c5b0e79e45b187c6fdc66db2beac009e04c","modified":1446950536000},{"_id":"source/_posts/backup-database-with-crontab.md","shasum":"2bb97acb4139cb7a6ee35d225d55d226fdff2735","modified":1452424973000},{"_id":"source/_posts/dropbox-sync-hexo-and-autobuild-itself.md","shasum":"13a24e0999b201c94ad4f8529913a5df4c1630a2","modified":1450511401000},{"_id":"source/_posts/dropbox-sync-hexo-article.md","shasum":"8ec60babcd17040c1aa3b0eb9b4dabbcf7849915","modified":1451658302000},{"_id":"source/_posts/export-results-of-mysql-to-excel.md","shasum":"a8e91cfdb497d15133dfcf36d16306ca6d7ec893","modified":1448113800000},{"_id":"source/_posts/hello-world.md","shasum":"a2f85773fb1f96703fc1946fd2df37a5f382f758","modified":1446950108000},{"_id":"source/_posts/js-names.md","shasum":"3f00d9d839f57a3a91e819ed7214c34469b731d3","modified":1447856500000},{"_id":"source/_posts/nodejs-mysql.md","shasum":"ad297f9134c68757f200c7e5aad7974251ed1d74","modified":1449152647000},{"_id":"source/_posts/php-use-pdo-cache-query-result-with-redis.md","shasum":"4b5e5e3425e42d47ee2b1b69639ee43e6918b5fb","modified":1449365461000},{"_id":"source/_posts/secure-your-website-with-lets-encrypt.md","shasum":"243000fdc130254c8b9fb22634d3ce2dd2e49654","modified":1450531905000},{"_id":"source/_posts/time-widget-for-hexo.md","shasum":"9bb8f0f98b1314b186e72b324b24074764a4a362","modified":1447234085000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1446904948000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1446904948000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1446904948000},{"_id":"themes/landscape/_config.yml","shasum":"08cc9a62547f027499e2db05836fed697894235c","modified":1447221556000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"2a1b82f3a80604e988ee6b2a4f68edc28c2e3059","modified":1450531688000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1446946820000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"6d517e2cfed15e15ff0b0e6ebf499690a9df9cb2","modified":1446949714000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"0e52f29563c9acdf8a07f708db0d06612a47a5d2","modified":1451966537000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"04442b1d5ecb15bd37616534a0e936405f87e693","modified":1450510178000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1446904948000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1446904948000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1446904948000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1446904948000},{"_id":"themes/landscape/layout/_widget/clock.ejs","shasum":"5a7d6b2840d87c955f8be89a0148c37e3e7c4d2e","modified":1447220699000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1446904948000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1446904948000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1446904948000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1446904948000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1446904948000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1446904948000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1446904948000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1446904948000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1446904948000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1446904948000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1446904948000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1446904948000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1446904948000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"f092c620089a6832c2f95253811a70c12da60940","modified":1447221410000},{"_id":"themes/landscape/source/css/_partial/time.styl","shasum":"5ec17131aad42e62f2ba1ad3290f0b34bd4e4152","modified":1447221355000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1446904948000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1446904948000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1446904948000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1446904948000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1446904948000},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1446904948000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1446904948000},{"_id":"themes/landscape/source/js/script.js","shasum":"763d10ac32044b3ca142fe5ffd5fdcb96376708a","modified":1447221581000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1446904948000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1446904948000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1446904948000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1446904948000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1446904948000}],"Category":[{"name":"php","_id":"cij8gcopa000doc0rlbpqcfcc"},{"name":"javascript","_id":"cij8gcope000ooc0r5inamxs7"},{"name":"mysql","_id":"cij8gcopk0011oc0rud2fsa42"},{"name":"linux","_id":"cij8gcopr001eoc0r7yr59wto"}],"Data":[],"Page":[],"Post":[{"title":"为hexo加一个时钟小挂件","date":"2015-11-11T06:16:29.000Z","_content":"\n\n之前在 [HTML+CSS3再加一点点JS做的一个小时钟](http://segmentfault.com/a/1190000003055672) 看到的这个问题，觉得很好把代码存下来了，今天突发奇想把它放到hexo的新博客上。\n\n### STEP 0\n\n把HTML内容放到新建的模板里，我命名为time.ejs。\n\n\t\t<div class=\"widget-wrap\">\n\t\t<h3 class=\"widget-title\">Time</h3>\n\t\t<div class=\"widget time\">\n\t\t\t<style id=\"clock-animations\"></style>\n\t\t\t<div class=\"clock-wrapper\">\n\t\t\t\t<div class=\"clock-base\">\n\t\t\t\t\t\t<div class=\"clock-indicator\">\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"clock-hour\"></div>\n\t\t\t\t\t\t<div class=\"clock-minute\"></div>\n\t\t\t\t\t\t<div class=\"clock-second\"></div>\n\t\t\t\t\t\t<div class=\"clock-center\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n原文中`<style id=\"clock-animations\"></style>`是放在head区域的，为了减小对全局的影响，我拿到这个挂件中了，实际上并没有影响。\n\n这里要注意挂件的代码结构要尽量与主题自带的结构一致。（仅仅是为了好看，和好整理）\n\n当然了，这个文件要放在`layout/_widget`下。\n\n### STEP 1\njs脚本\n\n由于脚本内容较少，我就直接放在了script.js中，文件位置再source/js。\n\n\tvar now = new Date();\n  \tvar second = now.getSeconds();\n  \tvar minute = now.getMinutes();\n  \tvar hour = now.getHours();\n  \tif (hour > 12) {\n      \thour = hour - 12;\n  \t}\n  \thourDeg   = hour * 30 + now.getMinutes() / 60 * 30;\n  \tminuteDeg = now.getMinutes() * 6;\n  \tsecondDeg = now.getSeconds() * 6;\n  \tstylesDeg = [\n      \t\"@keyframes rotate-hour{ from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-hour{ from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-hour{from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\"\n  \t].join(\"\");\n  \t$('#clock-animations').html(stylesDeg);\n  \n \n### STEP 2\nCSS样式\n\n新建文件time.styl，路径为`/source/css/_partial/time.styl`\n\n内容略多，主要是给多浏览器写前缀。\n\n\t.clock-wrapper {\n\t\tposition: relative;\n\t\theight: 250px;\n\t\twidth: 250px;\n\t\tbackground-image: linear-gradient(#f7f7f7,#e0e0e0);\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 10px 15px rgba(0,0,0,.15),0 2px 2px rgba(0,0,0,.2);\n\t}\n\t.clock-base {\n\t\twidth: 250px;\n\t\theight: 250px;\n\t\tbackground-color: #eee;\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 0 5px #eee;\n\t}\n\t.clock-indicator {\n\t\tz-index: 1;\n\t\tposition: absolute;\n\t\ttop: 15px;\n\t\tleft: 15px;\n\t\twidth: 230px;\n\t\theight: 230px;\n\t}\n\t.clock-indicator div {\n\t\tposition: absolute;\n\t\twidth: 2px;\n\t\theight: 4px;\n\t\tmargin: 113px 114px;\n\t\tbackground-color: #a4a4a4;\n\t}\n\t.clock-indicator div:nth-child(1) {\n\t\ttransform:rotate(30deg) translateY(-113px);\n\t\t-ms-transform:rotate(30deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(30deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(30deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(30deg) translateY(-113px);  /* Opera */        }\n\t\t.clock-indicator div:nth-child(2) {\n\t\ttransform:rotate(60deg) translateY(-113px);\n\t\t-ms-transform:rotate(60deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(60deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(60deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(60deg) translateY(-113px);  /* Opera */\n\t}\n\t.clock-indicator div:nth-child(3) {\n\t\ttransform:rotate(90deg) translateY(-113px);\n\t\t-ms-transform:rotate(90deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(90deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(90deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(90deg) translateY(-113px);  /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(4) {\n\t\ttransform:rotate(120deg) translateY(-113px);\n\t\t-ms-transform:rotate(120deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(120deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(120deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(120deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(5) {\n\t\ttransform:rotate(150deg) translateY(-113px);\n\t\t-ms-transform:rotate(150deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(150deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(150deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(150deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(6) {\n\t\ttransform:rotate(180deg) translateY(-113px);\n\t\t-ms-transform:rotate(180deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(180deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(180deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(180deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(7) {\n\t\ttransform:rotate(210deg) translateY(-113px);\n\t\t-ms-transform:rotate(210deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(210deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(210deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(210deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(8) {\n\t\ttransform:rotate(240deg) translateY(-113px);\n\t\t-ms-transform:rotate(240deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(240deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(240deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(240deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(9) {\n\t\ttransform:rotate(270deg) translateY(-113px);\n\t\t-ms-transform:rotate(270deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(270deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(270deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(270deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(10) {\n\t\ttransform:rotate(300deg) translateY(-113px);\n\t\t-ms-transform:rotate(300deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(300deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(300deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(300deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(11) {\n\t\ttransform:rotate(330deg) translateY(-113px);\n\t\t-ms-transform:rotate(330deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(330deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(330deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(330deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(12) {\n\t\ttransform:rotate(360deg) translateY(-113px);\n\t\t-ms-transform:rotate(360deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(360deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(360deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(360deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-hour {\n\t\tz-index: 2;\n\t\tposition: absolute;\n\t\tleft: 128px;\n\t\ttop: 80px;\n\t\twidth: 4px;\n\t\theight: 65px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #555;\n\t\tbox-shadow: 0 0 2px rgba(0,0,0,0.2); \n\t\ttransform-origin: 2px 50px;\n\t\t-moz-transform-origin: 2px 50px;\n\t\t-ms-transform-origin: 2px 50px;\n\t\t-o-transform-origin: 2px 50px;\n\t\t-webkit-transform-origin: 2px 50px;\n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\tanimation:rotate-hour 43200s linear infinite;\n\t\t-webkit-animation: rotate-hour 43200s linear infinite; /* Safari 和 Chrome */\n\t}\n\t.clock-minute {\n\t\tz-index: 3;\n\t\tposition: absolute;\n\t\tleft: 128px;\n\t\ttop: 60px;\n\t\twidth: 4px;\n\t\theight: 85px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #555;\n\t\tbox-shadow: 0 0 2px rgba(0,0,0,0.2); \n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\ttransform-origin: 2px 70px;\n\t\t-moz-transform-origin: 2px 70px;\n\t\t-ms-transform-origin: 2px 70px;\n\t\t-o-transform-origin: 2px 70px;\n\t\t-webkit-transform-origin: 2px 70px;\n\t\tanimation:rotate-minute 3600s linear infinite;\n\t\t-webkit-animation: rotate-minute 3600s linear infinite; /* Safari 和 Chrome */\n\t}\n\t.clock-second {\n\t\tz-index: 4;\n\t\tposition: absolute;\n\t\tleft: 129px;\n\t\ttop: 15px;\n\t\twidth: 2px;\n\t\theight: 140px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #a00;\n\t\tbox-shadow: 0 0 1px rgba(0,0,0,0.2); \n\t\ttransform-origin: 1px 115px;\n\t\t-moz-transform-origin: 1px 115px;\n\t\t-ms-transform-origin: 1px 115px;\n\t\t-o-transform-origin: 1px 115px;\n\t\t-webkit-transform-origin: 1px 115px;\n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\tanimation:rotate-hour 60s linear infinite;\n\t\t -webkit-animation: rotate-second 60s linear infinite;  /* Safari 和 Chrome */\n\t}\n\t.clock-second:after {\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tborder-radius: 50%;\n\t\tleft: -3px;\n\t\ttop:110px;\n\t\tbackground-color: #a00;\n\t\tbox-shadow: 0 0 3px rgba(0,0,0,0.2);\n\t}\n\t.clock-center {\n\t\tz-index: 1;\n\t\tposition: absolute;\n\t\tleft: 55px;\n\t\ttop: 55px;\n\t\tbackground-image: linear-gradient(#e3e3e3,#f7f7f7); \n\t\tborder-radius: 50%;\n\t\twidth: 150px;\n\t\theight: 150px;\n\t\tbox-shadow: inset 0 -1px 0 #fafafa, inset 0 1px 0 #e3e3e3;\n\t}\n\t.clock-center:after{\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tmargin: 65px;\n\t\tbackground-color: #ddd;\n\t\tborder-radius: 50%;\n\t}\n \n 之后，在sidebar.styl 末尾加入 `@import \"time\"`,这是styl的语法，表示引入一个文件，因为两个文件是同级，所以可以直接这么写，加`./`也可以。\n \n### STEP 3\n最后，在themes的config文件中注册这个挂件。\n\n在_config.yml中，找到`widgets`，在你想要加的位置中加入 `- time`，即模板文件名。\n比如我的widgets变成了这样：\n\n\twidgets:\n\t- clock\n\t- category\n\t- tag\n\t- tagcloud\n\t- archive\n\t- recent_posts\n\t\n### LAST \n至此，就全部完事，可以去`hexo generate`或`hexo server`了。","source":"_posts/time-widget-for-hexo.md","raw":"title: 为hexo加一个时钟小挂件\ndate: 2015-11-11 14:16:29\ntags:  [hexo,time,widget]\n---\n\n\n之前在 [HTML+CSS3再加一点点JS做的一个小时钟](http://segmentfault.com/a/1190000003055672) 看到的这个问题，觉得很好把代码存下来了，今天突发奇想把它放到hexo的新博客上。\n\n### STEP 0\n\n把HTML内容放到新建的模板里，我命名为time.ejs。\n\n\t\t<div class=\"widget-wrap\">\n\t\t<h3 class=\"widget-title\">Time</h3>\n\t\t<div class=\"widget time\">\n\t\t\t<style id=\"clock-animations\"></style>\n\t\t\t<div class=\"clock-wrapper\">\n\t\t\t\t<div class=\"clock-base\">\n\t\t\t\t\t\t<div class=\"clock-indicator\">\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"clock-hour\"></div>\n\t\t\t\t\t\t<div class=\"clock-minute\"></div>\n\t\t\t\t\t\t<div class=\"clock-second\"></div>\n\t\t\t\t\t\t<div class=\"clock-center\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n原文中`<style id=\"clock-animations\"></style>`是放在head区域的，为了减小对全局的影响，我拿到这个挂件中了，实际上并没有影响。\n\n这里要注意挂件的代码结构要尽量与主题自带的结构一致。（仅仅是为了好看，和好整理）\n\n当然了，这个文件要放在`layout/_widget`下。\n\n### STEP 1\njs脚本\n\n由于脚本内容较少，我就直接放在了script.js中，文件位置再source/js。\n\n\tvar now = new Date();\n  \tvar second = now.getSeconds();\n  \tvar minute = now.getMinutes();\n  \tvar hour = now.getHours();\n  \tif (hour > 12) {\n      \thour = hour - 12;\n  \t}\n  \thourDeg   = hour * 30 + now.getMinutes() / 60 * 30;\n  \tminuteDeg = now.getMinutes() * 6;\n  \tsecondDeg = now.getSeconds() * 6;\n  \tstylesDeg = [\n      \t\"@keyframes rotate-hour{ from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-hour{ from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@-moz-keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-hour{from{transform:rotate(\" + hourDeg + \"deg);}to{transform:rotate(\" + (hourDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-minute{from{transform:rotate(\" + minuteDeg + \"deg);}to{transform:rotate(\" + (minuteDeg + 360) + \"deg);}}\",\n      \t\"@-webkit-keyframes rotate-second{from{transform:rotate(\" + secondDeg + \"deg);}to{transform:rotate(\" + (secondDeg + 360) + \"deg);}}\"\n  \t].join(\"\");\n  \t$('#clock-animations').html(stylesDeg);\n  \n \n### STEP 2\nCSS样式\n\n新建文件time.styl，路径为`/source/css/_partial/time.styl`\n\n内容略多，主要是给多浏览器写前缀。\n\n\t.clock-wrapper {\n\t\tposition: relative;\n\t\theight: 250px;\n\t\twidth: 250px;\n\t\tbackground-image: linear-gradient(#f7f7f7,#e0e0e0);\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 10px 15px rgba(0,0,0,.15),0 2px 2px rgba(0,0,0,.2);\n\t}\n\t.clock-base {\n\t\twidth: 250px;\n\t\theight: 250px;\n\t\tbackground-color: #eee;\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 0 5px #eee;\n\t}\n\t.clock-indicator {\n\t\tz-index: 1;\n\t\tposition: absolute;\n\t\ttop: 15px;\n\t\tleft: 15px;\n\t\twidth: 230px;\n\t\theight: 230px;\n\t}\n\t.clock-indicator div {\n\t\tposition: absolute;\n\t\twidth: 2px;\n\t\theight: 4px;\n\t\tmargin: 113px 114px;\n\t\tbackground-color: #a4a4a4;\n\t}\n\t.clock-indicator div:nth-child(1) {\n\t\ttransform:rotate(30deg) translateY(-113px);\n\t\t-ms-transform:rotate(30deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(30deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(30deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(30deg) translateY(-113px);  /* Opera */        }\n\t\t.clock-indicator div:nth-child(2) {\n\t\ttransform:rotate(60deg) translateY(-113px);\n\t\t-ms-transform:rotate(60deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(60deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(60deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(60deg) translateY(-113px);  /* Opera */\n\t}\n\t.clock-indicator div:nth-child(3) {\n\t\ttransform:rotate(90deg) translateY(-113px);\n\t\t-ms-transform:rotate(90deg) translateY(-113px);     /* IE 9 */\n\t\t-moz-transform:rotate(90deg) translateY(-113px);    /* Firefox */\n\t\t-webkit-transform:rotate(90deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(90deg) translateY(-113px);  /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(4) {\n\t\ttransform:rotate(120deg) translateY(-113px);\n\t\t-ms-transform:rotate(120deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(120deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(120deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(120deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(5) {\n\t\ttransform:rotate(150deg) translateY(-113px);\n\t\t-ms-transform:rotate(150deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(150deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(150deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(150deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(6) {\n\t\ttransform:rotate(180deg) translateY(-113px);\n\t\t-ms-transform:rotate(180deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(180deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(180deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(180deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(7) {\n\t\ttransform:rotate(210deg) translateY(-113px);\n\t\t-ms-transform:rotate(210deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(210deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(210deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(210deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(8) {\n\t\ttransform:rotate(240deg) translateY(-113px);\n\t\t-ms-transform:rotate(240deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(240deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(240deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(240deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(9) {\n\t\ttransform:rotate(270deg) translateY(-113px);\n\t\t-ms-transform:rotate(270deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(270deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(270deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(270deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-indicator div:nth-child(10) {\n\t\ttransform:rotate(300deg) translateY(-113px);\n\t\t-ms-transform:rotate(300deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(300deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(300deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(300deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(11) {\n\t\ttransform:rotate(330deg) translateY(-113px);\n\t\t-ms-transform:rotate(330deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(330deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(330deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(330deg) translateY(-113px);     /* Opera */\n\t}\n\t.clock-indicator div:nth-child(12) {\n\t\ttransform:rotate(360deg) translateY(-113px);\n\t\t-ms-transform:rotate(360deg) translateY(-113px);    /* IE 9 */\n\t\t-moz-transform:rotate(360deg) translateY(-113px);   /* Firefox */\n\t\t-webkit-transform:rotate(360deg) translateY(-113px); /* Safari 和 Chrome */\n\t\t-o-transform:rotate(360deg) translateY(-113px);     /* Opera */\n\t\tbackground-color: #5a5a5a;\n\t}\n\t.clock-hour {\n\t\tz-index: 2;\n\t\tposition: absolute;\n\t\tleft: 128px;\n\t\ttop: 80px;\n\t\twidth: 4px;\n\t\theight: 65px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #555;\n\t\tbox-shadow: 0 0 2px rgba(0,0,0,0.2); \n\t\ttransform-origin: 2px 50px;\n\t\t-moz-transform-origin: 2px 50px;\n\t\t-ms-transform-origin: 2px 50px;\n\t\t-o-transform-origin: 2px 50px;\n\t\t-webkit-transform-origin: 2px 50px;\n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\tanimation:rotate-hour 43200s linear infinite;\n\t\t-webkit-animation: rotate-hour 43200s linear infinite; /* Safari 和 Chrome */\n\t}\n\t.clock-minute {\n\t\tz-index: 3;\n\t\tposition: absolute;\n\t\tleft: 128px;\n\t\ttop: 60px;\n\t\twidth: 4px;\n\t\theight: 85px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #555;\n\t\tbox-shadow: 0 0 2px rgba(0,0,0,0.2); \n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\ttransform-origin: 2px 70px;\n\t\t-moz-transform-origin: 2px 70px;\n\t\t-ms-transform-origin: 2px 70px;\n\t\t-o-transform-origin: 2px 70px;\n\t\t-webkit-transform-origin: 2px 70px;\n\t\tanimation:rotate-minute 3600s linear infinite;\n\t\t-webkit-animation: rotate-minute 3600s linear infinite; /* Safari 和 Chrome */\n\t}\n\t.clock-second {\n\t\tz-index: 4;\n\t\tposition: absolute;\n\t\tleft: 129px;\n\t\ttop: 15px;\n\t\twidth: 2px;\n\t\theight: 140px;\n\t\tborder-radius: 2px;\n\t\tbackground-color: #a00;\n\t\tbox-shadow: 0 0 1px rgba(0,0,0,0.2); \n\t\ttransform-origin: 1px 115px;\n\t\t-moz-transform-origin: 1px 115px;\n\t\t-ms-transform-origin: 1px 115px;\n\t\t-o-transform-origin: 1px 115px;\n\t\t-webkit-transform-origin: 1px 115px;\n\t\ttransition: 1s;\n\t\t-moz-transition: 1s; /* Firefox 4 */\n\t\t-webkit-transition: 1s; /* Safari 和 Chrome */\n\t\t-o-transition: 1s; /* Opera */\n\t\tanimation:rotate-hour 60s linear infinite;\n\t\t -webkit-animation: rotate-second 60s linear infinite;  /* Safari 和 Chrome */\n\t}\n\t.clock-second:after {\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tborder-radius: 50%;\n\t\tleft: -3px;\n\t\ttop:110px;\n\t\tbackground-color: #a00;\n\t\tbox-shadow: 0 0 3px rgba(0,0,0,0.2);\n\t}\n\t.clock-center {\n\t\tz-index: 1;\n\t\tposition: absolute;\n\t\tleft: 55px;\n\t\ttop: 55px;\n\t\tbackground-image: linear-gradient(#e3e3e3,#f7f7f7); \n\t\tborder-radius: 50%;\n\t\twidth: 150px;\n\t\theight: 150px;\n\t\tbox-shadow: inset 0 -1px 0 #fafafa, inset 0 1px 0 #e3e3e3;\n\t}\n\t.clock-center:after{\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tmargin: 65px;\n\t\tbackground-color: #ddd;\n\t\tborder-radius: 50%;\n\t}\n \n 之后，在sidebar.styl 末尾加入 `@import \"time\"`,这是styl的语法，表示引入一个文件，因为两个文件是同级，所以可以直接这么写，加`./`也可以。\n \n### STEP 3\n最后，在themes的config文件中注册这个挂件。\n\n在_config.yml中，找到`widgets`，在你想要加的位置中加入 `- time`，即模板文件名。\n比如我的widgets变成了这样：\n\n\twidgets:\n\t- clock\n\t- category\n\t- tag\n\t- tagcloud\n\t- archive\n\t- recent_posts\n\t\n### LAST \n至此，就全部完事，可以去`hexo generate`或`hexo server`了。","slug":"time-widget-for-hexo","published":1,"updated":"2015-11-11T09:28:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcoom0000oc0rk8tllbeo"},{"title":"使用Let's Encrypt制作数字证书","date":"2015-12-19T08:38:37.000Z","_content":"![](https://s.qichengzx.com/img/201512/https.png)\n\nLet's Encrypt是一个新的CA机构，提供非常简单并且免费的TLS／SSL证书服务。\n\n可谓万众期待。\n\n说下我的环境：\n\t\n\tUbuntu 14.04.3\n\tNginx 1.4.6\n\t\n\n首先你要有个域名，其次要有个服务器。\n\n### STEP 0 － 安装Let's Encrypt 客户端\n \n##### 安装git\n\n先更新下系统\n\n```\nsudo apt-get update\nsudo apt-get -y install git\n```\n\n##### Clone Let's Encrypt\n\n```\nsudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\n```\n\n这里把下载的文件放到了/opt/letsencrypt文件夹\n\n### STEP 1－生成证书\n\n首先需要关闭80端口\n\n```\nsudo nginx -s stop\n```\n\n接下来运行Let's Encrypt\n\n```\ncd /opt/letsencrypt\n./letsencrypt-auto certonly --standalone\n```\n\n注意：需要超级用户权限，所以需要输入密码\n\n之后会出现提示框，需要输入邮箱，用于接收提醒和，如果不幸丢失了Key，找回的时候也需要邮箱。\n\n根据提示进行操作即可，接下来啥同意用户协议。\n\n下一步则是输入你需要生成证书的域名了，如果需要一个证书给多个域名使用，这些域名则要全部输入，（example.com和www.example.com是不同的域名），域名之间用空格，逗号，左斜杠 分隔。\n\n成功后会有如下提示：\n\n```\nIMPORTANT NOTES:\n\n - If you lose your account credentials, you can recover through\n   e-mails sent to sammy@digitalocean.com\n - Congratulations! Your certificate and chain have been saved at\n    /etc/letsencrypt/live/example.com/fullchain.pem. Your\n   cert will expire on 2016-03-15. To obtain a new version of the\n   certificate in the future, simply run Let's Encrypt again.\n - Your account credentials have been saved in your Let's Encrypt\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Let's\n   Encrypt so making regular backups of this folder is ideal.\n - If like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n```\n\n证书位置：/etc/letsencrypt/live/example.com/fullchain.pem\n\n过期时间：2016-03-15\n\n至于过期时间为什么这么短则是出于安全考虑。不宜使用同一个证书太长时间。\n\n##### 证书文件：\n\n上一步成功后，会有如下4个文件生成。\n\n    \n```\nsudo ls /etc/letsencrypt/live/your_domain_name\n```\n\n\n    cert.pem: 证书\n    chain.pem: The Let's Encrypt chain certificate（不知道什么鬼）\n    fullchain.pem: cert.pem and chain.pem combined\n    privkey.pem: 证书私钥\n\n\n### STEP 2－配置Web服务器(Nginx)\n\n证书生成完毕，现在可以配置Web服务器了。\n\n编辑配置文件：\n\n```\nsudo vi /etc/nginx/sites-available/default\n```\n\n在server区块中，增加如下代码：\n\n```\nlisten 443 ssl;\nserver_name example.com;\nssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n```\n\n如果之前是绑定的80端口，直接改为443即可，后边增加 ssl 。\n\n如果想使用最安全的SSL协议，增加如下代码：\n\n```\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;\n```\n\n最后，在server区块后再增加一段，用于从HTTP跳转到HTTPS。\n\n```\nserver {\n    listen 80;\n    server_name example.com;\n    rewrite ^/(.*) https://example.com/$1 permanent;\n}\n\n```\n\n保存，退出。\n\n重启Nginx服务器。\n\n```\nsudo nginx -s reopen\n```\n\n现在已经可以通过HTTPS访问网站了。\n\n原文中还有设置自动生成证书的部分，出于懒的原因此处不再写。\n\n参考资料：\n[How To Secure Nginx with Let's Encrypt on Ubuntu 14.04](https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04)","source":"_posts/secure-your-website-with-lets-encrypt.md","raw":"title: 使用Let's Encrypt制作数字证书\ndate: 2015-12-19 16:38:37\ntags:  [https,ssl]\n---\n![](https://s.qichengzx.com/img/201512/https.png)\n\nLet's Encrypt是一个新的CA机构，提供非常简单并且免费的TLS／SSL证书服务。\n\n可谓万众期待。\n\n说下我的环境：\n\t\n\tUbuntu 14.04.3\n\tNginx 1.4.6\n\t\n\n首先你要有个域名，其次要有个服务器。\n\n### STEP 0 － 安装Let's Encrypt 客户端\n \n##### 安装git\n\n先更新下系统\n\n```\nsudo apt-get update\nsudo apt-get -y install git\n```\n\n##### Clone Let's Encrypt\n\n```\nsudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\n```\n\n这里把下载的文件放到了/opt/letsencrypt文件夹\n\n### STEP 1－生成证书\n\n首先需要关闭80端口\n\n```\nsudo nginx -s stop\n```\n\n接下来运行Let's Encrypt\n\n```\ncd /opt/letsencrypt\n./letsencrypt-auto certonly --standalone\n```\n\n注意：需要超级用户权限，所以需要输入密码\n\n之后会出现提示框，需要输入邮箱，用于接收提醒和，如果不幸丢失了Key，找回的时候也需要邮箱。\n\n根据提示进行操作即可，接下来啥同意用户协议。\n\n下一步则是输入你需要生成证书的域名了，如果需要一个证书给多个域名使用，这些域名则要全部输入，（example.com和www.example.com是不同的域名），域名之间用空格，逗号，左斜杠 分隔。\n\n成功后会有如下提示：\n\n```\nIMPORTANT NOTES:\n\n - If you lose your account credentials, you can recover through\n   e-mails sent to sammy@digitalocean.com\n - Congratulations! Your certificate and chain have been saved at\n    /etc/letsencrypt/live/example.com/fullchain.pem. Your\n   cert will expire on 2016-03-15. To obtain a new version of the\n   certificate in the future, simply run Let's Encrypt again.\n - Your account credentials have been saved in your Let's Encrypt\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Let's\n   Encrypt so making regular backups of this folder is ideal.\n - If like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n```\n\n证书位置：/etc/letsencrypt/live/example.com/fullchain.pem\n\n过期时间：2016-03-15\n\n至于过期时间为什么这么短则是出于安全考虑。不宜使用同一个证书太长时间。\n\n##### 证书文件：\n\n上一步成功后，会有如下4个文件生成。\n\n    \n```\nsudo ls /etc/letsencrypt/live/your_domain_name\n```\n\n\n    cert.pem: 证书\n    chain.pem: The Let's Encrypt chain certificate（不知道什么鬼）\n    fullchain.pem: cert.pem and chain.pem combined\n    privkey.pem: 证书私钥\n\n\n### STEP 2－配置Web服务器(Nginx)\n\n证书生成完毕，现在可以配置Web服务器了。\n\n编辑配置文件：\n\n```\nsudo vi /etc/nginx/sites-available/default\n```\n\n在server区块中，增加如下代码：\n\n```\nlisten 443 ssl;\nserver_name example.com;\nssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n```\n\n如果之前是绑定的80端口，直接改为443即可，后边增加 ssl 。\n\n如果想使用最安全的SSL协议，增加如下代码：\n\n```\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;\n```\n\n最后，在server区块后再增加一段，用于从HTTP跳转到HTTPS。\n\n```\nserver {\n    listen 80;\n    server_name example.com;\n    rewrite ^/(.*) https://example.com/$1 permanent;\n}\n\n```\n\n保存，退出。\n\n重启Nginx服务器。\n\n```\nsudo nginx -s reopen\n```\n\n现在已经可以通过HTTPS访问网站了。\n\n原文中还有设置自动生成证书的部分，出于懒的原因此处不再写。\n\n参考资料：\n[How To Secure Nginx with Let's Encrypt on Ubuntu 14.04](https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04)","slug":"secure-your-website-with-lets-encrypt","published":1,"updated":"2015-12-19T13:31:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcop60007oc0r4ndfg5mi"},{"title":"PHP使用Redis作为缓存使用PDO读取MySQL数据","date":"2015-12-05T14:37:09.000Z","_content":"\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo1414772222.jpg)\n\n图片转自：[Using PDO::fetchAll – Examples with codes and output results](http://blog.encodez.com/blog/using-pdofetchall-examples-with-codes-and-output-results)\n\n一个简单的例子。\n\n**实现功能：**\n\t\n\t1.使用PDO读取数据\n\t\n\t2.使用Redis缓存结果\n\t\n\t3.再次查询时会从Redis查询，减少MySQL查询\n\t\n没有注意代码的逻辑，仅实现思路。\n\n```\n<?php\n\n//一上来肯定是配置pdo的连接信息。其实这步在这个示例中可以放到第一个else中。\n$dsn = 'mysql:dbname=node;host=127.0.0.1';\n$user = 'root';\n$password = '';\n\n//连接Redis\n$redis= new Redis();\n$redis->connect('127.0.0.1',6379);\n\n//接收查询参数\n$id = intval($_GET['id']);\n\n//设置在Redis中存储的KEY\n$MY_NODE_KEY_ = 'TEST_PDO_REDIS_ID_';\n\n//拼接KEY和查询ID，读取Redis，\n$cache = $redis->get($MY_NODE_KEY_.$id);\n\n//用来插入log的时间参数\n$date = date(\"Y-m-d H:i:s\");\nif($cache){\n\t//Redis缓存存在则直接输出\n\tprint_r(json_decode($cache,true));\n\t//并记录log\n\terror_log($date.\"---read from redis \\r\\n\", 3, './debug.txt');\n}else{\n\t//缓存不存在，则连接PDO\n\ttry {\n    \t$pdo = new PDO($dsn, $user, $password);\n    \terror_log($date.\"---Connection Succcess \\r\\n\", 3, './debug.txt');\n\t\t\n\t\t//查询\n\t    $query = $pdo -> query(\"select * from news where id = '$id'\");\n\t\t//设置结果集为数组\n\t    // [PDOStatement::fetch](http://php.net/manual/zh/pdostatement.fetch.php)\n\t    $query->setFetchMode(PDO::FETCH_ASSOC);\n\t    \n\t    $rs = $query->fetch();\n\t\n\t    if (is_array($rs)) {\n\t    \t//查询完成，以json格式写入Redis中。\n\t\t\t$redis->set($MY_NODE_KEY_.$rs['id'],json_encode($rs));\n\t\t\tprint_r($rs);\n\t\t\terror_log($date.\"read from mysql \\r\\n\", 3, './debug.txt');\n\t    }\n\t    \n\t//PDO连接出错\n\t} catch (PDOException $e) {\n\t\t//输出错误信息，并记录log中\n    \techo 'Connection failed: ' . $e->getMessage();\n    \terror_log($date.\"---Connection failed \\r\\n\", 3, './debug.txt');\n\t}\n}\n\n```\n\n写的很糙，逻辑已经简单到没有逻辑了。\n\n一句话说一下思路就是：\n\t先看有没有缓存\n\t木有就查数据库，写入缓存\n\t\n\n参考资料：\n\t[PHP 数据对象](http://php.net/manual/zh/book.pdo.php)\n\t[PHP PDO的简单使用(query(),exec(),prepare(),Transaction,行锁)](http://www.cnblogs.com/zemliu/archive/2012/05/08/2490953.html)","source":"_posts/php-use-pdo-cache-query-result-with-redis.md","raw":"title: PHP使用Redis作为缓存使用PDO读取MySQL数据\ndate: 2015-12-05 22:37:09\ntags:  [php,pdo,redis,mysql]\ncategories: php\n---\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo1414772222.jpg)\n\n图片转自：[Using PDO::fetchAll – Examples with codes and output results](http://blog.encodez.com/blog/using-pdofetchall-examples-with-codes-and-output-results)\n\n一个简单的例子。\n\n**实现功能：**\n\t\n\t1.使用PDO读取数据\n\t\n\t2.使用Redis缓存结果\n\t\n\t3.再次查询时会从Redis查询，减少MySQL查询\n\t\n没有注意代码的逻辑，仅实现思路。\n\n```\n<?php\n\n//一上来肯定是配置pdo的连接信息。其实这步在这个示例中可以放到第一个else中。\n$dsn = 'mysql:dbname=node;host=127.0.0.1';\n$user = 'root';\n$password = '';\n\n//连接Redis\n$redis= new Redis();\n$redis->connect('127.0.0.1',6379);\n\n//接收查询参数\n$id = intval($_GET['id']);\n\n//设置在Redis中存储的KEY\n$MY_NODE_KEY_ = 'TEST_PDO_REDIS_ID_';\n\n//拼接KEY和查询ID，读取Redis，\n$cache = $redis->get($MY_NODE_KEY_.$id);\n\n//用来插入log的时间参数\n$date = date(\"Y-m-d H:i:s\");\nif($cache){\n\t//Redis缓存存在则直接输出\n\tprint_r(json_decode($cache,true));\n\t//并记录log\n\terror_log($date.\"---read from redis \\r\\n\", 3, './debug.txt');\n}else{\n\t//缓存不存在，则连接PDO\n\ttry {\n    \t$pdo = new PDO($dsn, $user, $password);\n    \terror_log($date.\"---Connection Succcess \\r\\n\", 3, './debug.txt');\n\t\t\n\t\t//查询\n\t    $query = $pdo -> query(\"select * from news where id = '$id'\");\n\t\t//设置结果集为数组\n\t    // [PDOStatement::fetch](http://php.net/manual/zh/pdostatement.fetch.php)\n\t    $query->setFetchMode(PDO::FETCH_ASSOC);\n\t    \n\t    $rs = $query->fetch();\n\t\n\t    if (is_array($rs)) {\n\t    \t//查询完成，以json格式写入Redis中。\n\t\t\t$redis->set($MY_NODE_KEY_.$rs['id'],json_encode($rs));\n\t\t\tprint_r($rs);\n\t\t\terror_log($date.\"read from mysql \\r\\n\", 3, './debug.txt');\n\t    }\n\t    \n\t//PDO连接出错\n\t} catch (PDOException $e) {\n\t\t//输出错误信息，并记录log中\n    \techo 'Connection failed: ' . $e->getMessage();\n    \terror_log($date.\"---Connection failed \\r\\n\", 3, './debug.txt');\n\t}\n}\n\n```\n\n写的很糙，逻辑已经简单到没有逻辑了。\n\n一句话说一下思路就是：\n\t先看有没有缓存\n\t木有就查数据库，写入缓存\n\t\n\n参考资料：\n\t[PHP 数据对象](http://php.net/manual/zh/book.pdo.php)\n\t[PHP PDO的简单使用(query(),exec(),prepare(),Transaction,行锁)](http://www.cnblogs.com/zemliu/archive/2012/05/08/2490953.html)","slug":"php-use-pdo-cache-query-result-with-redis","published":1,"updated":"2015-12-06T01:31:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcop9000coc0rhcfw8xex"},{"title":"Node.js连接MySQL并读取数据","date":"2015-12-03T13:38:37.000Z","_content":"\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo201312030901.jpg)\n\n文章部分代码与[之前整理的一篇文章](http://segmentfault.com/a/1190000002995355)一样。\n\n本文主要实现node连接MySQL并读取指定表的数据输出到ejs模板中。\n\nMySQL是一款非常常用的开源数据库，[npm中也有MySQL的包](https://www.npmjs.com/package/mysql)。\n\n\n###MySQL测试库的表结构：\n\n```\nDROP TABLE IF EXISTS `news`;\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL DEFAULT '0',\n  `title` varchar(45) NOT NULL DEFAULT '',\n  `createtime` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nLOCK TABLES `news` WRITE;\nINSERT INTO `news` VALUES (1,'news one',1449064787),(2,'news two',1449064790),(3,'news three',1449064900);\nUNLOCK TABLES;\n```\n\n### 安装Node.js MySQL包\n\n```\nnpm install mysql\n```\n\n### server.js\n\n```\n//server.js\nvar express = require('express');\nvar mysql = require('mysql');\nvar moment = require('moment');//用来格式化UNIX时间戳\nvar app = express();\n```\n配置MySQL数据库\n\n```\nvar connection = mysql.createConnection({\n\thost:'localhost',\n\tuser:'root',\n\tpassword:'root',\n\tdatabase:'node'\n});\n```\n连接数据库，并在成功或失败时输出log\n\n```\nconnection.connect(function(err){\n\tif(!err){\n\t\tconsole.log('Database is connected...\\n\\n');\n\t}else{\n\t\tconsole.log('Error Connecting Database...\\n\\n');\n\t}\n});\n```\n定义表\n\n```\nvar TABLE = 'news';\n```\n设定模板引擎\n\n```\napp.set('view engine','ejs');\n```\n这就是很普通的路由，表示接收访问首页的请求\n\n```\napp.get('/',function(req,res){\n\t//定义一组数据\n\tvar data = [\n\t\t\t\t\t{ name : 'Bloody Mary' , drunkness : 3 },\n\t\t\t\t\t{ name : 'Martini' , drunkness : 5 },\n\t\t\t\t\t{ name : 'Scotch' , drunkness : 10 }\n\t\t\t\t];\n\n\t//MySQL查询\n\tconnection.query(\n\t\t//普通的SQL\n\t\t'select * from ' + TABLE,\n\t\t//查询回调\n\t\tfunction(err,results,fields){\n\t\t\tif(err){\n\t\t\t\t//输出错误\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\t\n\t\t\tif(results){\n\t\t\t\tconsole.log(results);\n\t\t\t\t//express render一个页面\n\t\t\t\tres.render('pages/index',{\n\t\t\t\t\ttitle:'test',\n\t\t\t\t\tresults:results,\n\t\t\t\t\tdata:data,\n\t\t\t\t\tmoment:moment\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t)\n\n});\n\napp.listen(8888);\nconsole.log('8888 is the magic port');\n```\n\n### index.ejs\n\n```\n<% include ../partials/head %>\n\n<body class=\"container\">\n\t<main>\n\t\t<div class=\"jumbotron\">\n\t\t\t<h2>data from static</h2>\n\t\t\t<ul>\n\t\t\t\t<% data.forEach(function(d) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<%= d.name %>\n\t\t\t\t\t<span><%= d.drunkness %></span>\n\t\t\t\t</li>\n\t\t\t    <% }); %>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"jumbotron\">\n\t\t\t<h2>data from mysql</h2>\n\t\t\t<ul>\n\t\t\t\t<% results.forEach(function(result) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<%= result.id %>\n\t\t\t\t\t<span><%= result.title %></span>\n\t\t\t\t\t<span><%= moment(result.createtime*1000).format('YYYY-MM-DD, hh:mm:ss') %></span>\n\t\t\t\t</li>\n\t\t\t    <% }); %>\n\t\t\t</ul>\n\t\t</div>\n\t\t\n\t</main>\n\n\t<footer>\n\t\t<% include ../partials/footer %>\n\t</footer>\n\t\n</body>\n</html>\n```\n至此，就可以正常输出从数据库里读取出来的数据了。\n\n**小插曲**\n\n之前在练习的时候，require MySQL 之后npm install 只安装了require的几个包，昨天再写的时候装了一大堆。\n另外之前在使用moment的时候并没有在render页面的时候传入moment，直接就可以用了，昨天也报错了。\n","source":"_posts/nodejs-mysql.md","raw":"title: Node.js连接MySQL并读取数据\ndate: 2015-12-03 21:38:37\ntags:  [node,mysql]\ncategories: javascript\n---\n\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo201312030901.jpg)\n\n文章部分代码与[之前整理的一篇文章](http://segmentfault.com/a/1190000002995355)一样。\n\n本文主要实现node连接MySQL并读取指定表的数据输出到ejs模板中。\n\nMySQL是一款非常常用的开源数据库，[npm中也有MySQL的包](https://www.npmjs.com/package/mysql)。\n\n\n###MySQL测试库的表结构：\n\n```\nDROP TABLE IF EXISTS `news`;\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL DEFAULT '0',\n  `title` varchar(45) NOT NULL DEFAULT '',\n  `createtime` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nLOCK TABLES `news` WRITE;\nINSERT INTO `news` VALUES (1,'news one',1449064787),(2,'news two',1449064790),(3,'news three',1449064900);\nUNLOCK TABLES;\n```\n\n### 安装Node.js MySQL包\n\n```\nnpm install mysql\n```\n\n### server.js\n\n```\n//server.js\nvar express = require('express');\nvar mysql = require('mysql');\nvar moment = require('moment');//用来格式化UNIX时间戳\nvar app = express();\n```\n配置MySQL数据库\n\n```\nvar connection = mysql.createConnection({\n\thost:'localhost',\n\tuser:'root',\n\tpassword:'root',\n\tdatabase:'node'\n});\n```\n连接数据库，并在成功或失败时输出log\n\n```\nconnection.connect(function(err){\n\tif(!err){\n\t\tconsole.log('Database is connected...\\n\\n');\n\t}else{\n\t\tconsole.log('Error Connecting Database...\\n\\n');\n\t}\n});\n```\n定义表\n\n```\nvar TABLE = 'news';\n```\n设定模板引擎\n\n```\napp.set('view engine','ejs');\n```\n这就是很普通的路由，表示接收访问首页的请求\n\n```\napp.get('/',function(req,res){\n\t//定义一组数据\n\tvar data = [\n\t\t\t\t\t{ name : 'Bloody Mary' , drunkness : 3 },\n\t\t\t\t\t{ name : 'Martini' , drunkness : 5 },\n\t\t\t\t\t{ name : 'Scotch' , drunkness : 10 }\n\t\t\t\t];\n\n\t//MySQL查询\n\tconnection.query(\n\t\t//普通的SQL\n\t\t'select * from ' + TABLE,\n\t\t//查询回调\n\t\tfunction(err,results,fields){\n\t\t\tif(err){\n\t\t\t\t//输出错误\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\t\n\t\t\tif(results){\n\t\t\t\tconsole.log(results);\n\t\t\t\t//express render一个页面\n\t\t\t\tres.render('pages/index',{\n\t\t\t\t\ttitle:'test',\n\t\t\t\t\tresults:results,\n\t\t\t\t\tdata:data,\n\t\t\t\t\tmoment:moment\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t)\n\n});\n\napp.listen(8888);\nconsole.log('8888 is the magic port');\n```\n\n### index.ejs\n\n```\n<% include ../partials/head %>\n\n<body class=\"container\">\n\t<main>\n\t\t<div class=\"jumbotron\">\n\t\t\t<h2>data from static</h2>\n\t\t\t<ul>\n\t\t\t\t<% data.forEach(function(d) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<%= d.name %>\n\t\t\t\t\t<span><%= d.drunkness %></span>\n\t\t\t\t</li>\n\t\t\t    <% }); %>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"jumbotron\">\n\t\t\t<h2>data from mysql</h2>\n\t\t\t<ul>\n\t\t\t\t<% results.forEach(function(result) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<%= result.id %>\n\t\t\t\t\t<span><%= result.title %></span>\n\t\t\t\t\t<span><%= moment(result.createtime*1000).format('YYYY-MM-DD, hh:mm:ss') %></span>\n\t\t\t\t</li>\n\t\t\t    <% }); %>\n\t\t\t</ul>\n\t\t</div>\n\t\t\n\t</main>\n\n\t<footer>\n\t\t<% include ../partials/footer %>\n\t</footer>\n\t\n</body>\n</html>\n```\n至此，就可以正常输出从数据库里读取出来的数据了。\n\n**小插曲**\n\n之前在练习的时候，require MySQL 之后npm install 只安装了require的几个包，昨天再写的时候装了一大堆。\n另外之前在使用moment的时候并没有在render页面的时候传入moment，直接就可以用了，昨天也报错了。\n","slug":"nodejs-mysql","published":1,"updated":"2015-12-03T14:24:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopd000noc0r8l6bcqbd"},{"title":"JS标识符","date":"2015-11-17T14:07:21.000Z","_content":"\n\n标识符由一个字母开头，其后可以选择性的加上一个或多个字母、数字或下划线。但是，不能使用下面这些保留字：\n\n```\nabstract\nboolean break byte\ncase catch char class const continue\ndebugger default delete do double\nelse enum export extends\nfalse final finally float for function\ngoto\nif implements import in instanceof int interface \nlong\nnative new null\npackage private protected public\nreturn\nshort static super switch synchronized\nthis throw throws transient true try typeof\nvar volatile void\nwhile with\n```\n\n这个列表里的大部分并未用在JS语言里，有一些已经逐渐在新标准中出现，但是这个列表也不包括一些本应该保留的字，如undefined,NaN,Infinity。\n\nJS不允许使用保留字来命名变量或参数，也不允许在对象字面量中，或者用 点运算符(.)提取对象属性时，使用保留字作为对象的属性名。\n\n\n标识符被用于语句，变量，参数，属性名，运算符和标记。\n\n注:实际中，JS也允许 (_),($)开头。","source":"_posts/js-names.md","raw":"title: JS标识符\ncategories: javascript\ndate: 2015-11-17 22:07:21\ntags:  [javascript,标识符]\n\n---\n\n\n标识符由一个字母开头，其后可以选择性的加上一个或多个字母、数字或下划线。但是，不能使用下面这些保留字：\n\n```\nabstract\nboolean break byte\ncase catch char class const continue\ndebugger default delete do double\nelse enum export extends\nfalse final finally float for function\ngoto\nif implements import in instanceof int interface \nlong\nnative new null\npackage private protected public\nreturn\nshort static super switch synchronized\nthis throw throws transient true try typeof\nvar volatile void\nwhile with\n```\n\n这个列表里的大部分并未用在JS语言里，有一些已经逐渐在新标准中出现，但是这个列表也不包括一些本应该保留的字，如undefined,NaN,Infinity。\n\nJS不允许使用保留字来命名变量或参数，也不允许在对象字面量中，或者用 点运算符(.)提取对象属性时，使用保留字作为对象的属性名。\n\n\n标识符被用于语句，变量，参数，属性名，运算符和标记。\n\n注:实际中，JS也允许 (_),($)开头。","slug":"js-names","published":1,"updated":"2015-11-18T14:21:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopg000toc0rhwizpfw6"},{"title":"Hello World","date":"2015-11-06T13:54:22.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2015-11-06 21:54:22\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2015-11-08T02:35:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopi000zoc0rpxjbmq9n"},{"title":"MySQL命令行导出结果集到Excel","date":"2015-11-21T13:24:35.000Z","_content":"\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo1631785_mysql.gif)\n\n某个需求，为了简单单独建表存储，而且没有相关的后台管理方法，无法查看，或导出，但是又突然出现需要导出这个需求。\n\n所以突然想到MySQL是否带了这种直接导出到文件中的方法，查资料后发现果然有。\n\n只需要在命令行中执行如下查询即可。\n\n```\nSELECT * FROM my_table INTO OUTFILE 'file.csv' FIELDS TERMINATED BY ',';\n```\n\n有几点需要注意：\n\n\t0.文件将在服务器上生成，所以需要需要MySQL进程有生成文件的权限。\n\t1.必须为一个不存在的文件名。\n\t\n其实还有一些功能，或者说是说明，这里并没有写。\n\n\n官方文档：\n\n[13.2.9.1 SELECT ... INTO Syntax](http://dev.mysql.com/doc/refman/5.5/en/select-into.html)","source":"_posts/export-results-of-mysql-to-excel.md","raw":"title: MySQL命令行导出结果集到Excel\ncategories: mysql\ndate: 2015-11-21 21:24:35\ntags:  [mysql,excel]\n\n---\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo1631785_mysql.gif)\n\n某个需求，为了简单单独建表存储，而且没有相关的后台管理方法，无法查看，或导出，但是又突然出现需要导出这个需求。\n\n所以突然想到MySQL是否带了这种直接导出到文件中的方法，查资料后发现果然有。\n\n只需要在命令行中执行如下查询即可。\n\n```\nSELECT * FROM my_table INTO OUTFILE 'file.csv' FIELDS TERMINATED BY ',';\n```\n\n有几点需要注意：\n\n\t0.文件将在服务器上生成，所以需要需要MySQL进程有生成文件的权限。\n\t1.必须为一个不存在的文件名。\n\t\n其实还有一些功能，或者说是说明，这里并没有写。\n\n\n官方文档：\n\n[13.2.9.1 SELECT ... INTO Syntax](http://dev.mysql.com/doc/refman/5.5/en/select-into.html)","slug":"export-results-of-mysql-to-excel","published":1,"updated":"2015-11-21T13:50:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopj0010oc0ry2v03cqs"},{"title":"使用Dropbox同步hexo文章","date":"2015-12-27T13:47:09.000Z","_content":"![](https://s.qichengzx.com/img/201512/20130702165945-558672261.jpg)\n\n继之前[那次失败的尝试](https://www.qichengzx.com/2015/11/13/dropbox-sync-hexo-and-autobuild-itself.html)之后（只在当时写的时候实验过几次，每次都以服务器卡死结束），后来在又多了几篇日志之后连generate也不能愉快的完成了。索性就在本地生成然后git push到服务器。\n\n现在想更激进一些，git只管理日志以外的东西，比如hexo的升级，或模板的调整和日志源文件。而生成的静态文件直接通过Dropbox客户端同步到服务器。\n\n话不多说。\n\n以下为前提：\n\n\t本地已安装hexo，和Dropbox客户端，并且客户端的同步目录已经选择到hexo的目录。\n\t服务器已安装dropbox服务，及相应的用户。\n\n\nDropbox的同步目录选hexo根目录或public都行，只是在服务器的处理脚本那同步修改下就行了。\n\n以下内容假设已在服务器添加dbox用户用于dropbox服务的同步处理。并且也已经设置了与dropbox账户的关联。\n\n#### 启动dropboxd\n\n用dbox用户登录服务器。\n\n然后，启动dropboxd进程。\n\n```\n~/dropbox-dist/dropboxd &\n```\n\n#### 设置文件夹监测\n\n##### 先安装incron服务。\n\n```\napt-get install incron\nyum install incron\n```\n\n##### 开机启动\n\n安装sysv-rc-conf，用于管理服务的启动\n\n```\napt-get install sysv-rc-conf\nsysv-rc-conf incron on\nsysv-rc-conf --list //用于查看所有服务的状态\n\n```\n\n##### 创建监测服务\n\n先修改下incron的编辑器\n\n```\nsudo vi /etc/incron.conf\n\n```\n\n在文件的最后一行，去掉editor = vi前的#，保存退出。\n\n输入：\n\n```\nincrontab -e\n```\n\n如果当前登录的不是dbox用户，可以使用\n```\nincrontab -udbox -e\n```\n\n然后输入：\n\n```\n/home/dbox/Dropbox/yourfolder/ IN_ATTRIB,IN_MOVE /home/dbox/dbox.sh\n\n```\n第一个参数：用来接收Dropbox同步的文件夹\n\n第二个参数：指监测的动作\n\n第三个参数：处理脚本\n\n监测的动作可以用：\n\n```\nIN_ACCESS，即文件被访问\nIN_MODIFY，文件被 write\nIN_ATTRIB，文件属性被修改，如 chmod、chown、touch 等\nIN_CLOSE_WRITE，可写文件被 close\nIN_CLOSE_NOWRITE，不可写文件被 close\nIN_OPEN，文件被 open\nIN_MOVED_FROM，文件被移走,如 mv\nIN_MOVED_TO，文件被移来，如 mv、cp\nIN_CREATE，创建新文件\nIN_DELETE，文件被删除，如 rm\nIN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己\nIN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己\nIN_UNMOUNT，宿主文件系统被 umount\nIN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)\nIN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)\n#上面所说的文件也包括目录。\n```\n\n##### 处理同步后的文件的脚本\n\n```\ncd /home/dbox/\nvi dbox.sh\n\ncd /home/dbox/Dropbox/yoursite/\ncp -R public/ /var/www/yoursite/\n\n```\n最后一句要注意看你本地同步了哪些内容，还要注意与网站的目录对应。\n\n还要注意dbox.sh要有执行权限，和yoursite的写入权限。\n\n至此，完成。\n\n\n","source":"_posts/dropbox-sync-hexo-article.md","raw":"title: 使用Dropbox同步hexo文章\ndate: 2015-12-27 21:47:09\ntags:  [dropbox,hexo]\n---\n![](https://s.qichengzx.com/img/201512/20130702165945-558672261.jpg)\n\n继之前[那次失败的尝试](https://www.qichengzx.com/2015/11/13/dropbox-sync-hexo-and-autobuild-itself.html)之后（只在当时写的时候实验过几次，每次都以服务器卡死结束），后来在又多了几篇日志之后连generate也不能愉快的完成了。索性就在本地生成然后git push到服务器。\n\n现在想更激进一些，git只管理日志以外的东西，比如hexo的升级，或模板的调整和日志源文件。而生成的静态文件直接通过Dropbox客户端同步到服务器。\n\n话不多说。\n\n以下为前提：\n\n\t本地已安装hexo，和Dropbox客户端，并且客户端的同步目录已经选择到hexo的目录。\n\t服务器已安装dropbox服务，及相应的用户。\n\n\nDropbox的同步目录选hexo根目录或public都行，只是在服务器的处理脚本那同步修改下就行了。\n\n以下内容假设已在服务器添加dbox用户用于dropbox服务的同步处理。并且也已经设置了与dropbox账户的关联。\n\n#### 启动dropboxd\n\n用dbox用户登录服务器。\n\n然后，启动dropboxd进程。\n\n```\n~/dropbox-dist/dropboxd &\n```\n\n#### 设置文件夹监测\n\n##### 先安装incron服务。\n\n```\napt-get install incron\nyum install incron\n```\n\n##### 开机启动\n\n安装sysv-rc-conf，用于管理服务的启动\n\n```\napt-get install sysv-rc-conf\nsysv-rc-conf incron on\nsysv-rc-conf --list //用于查看所有服务的状态\n\n```\n\n##### 创建监测服务\n\n先修改下incron的编辑器\n\n```\nsudo vi /etc/incron.conf\n\n```\n\n在文件的最后一行，去掉editor = vi前的#，保存退出。\n\n输入：\n\n```\nincrontab -e\n```\n\n如果当前登录的不是dbox用户，可以使用\n```\nincrontab -udbox -e\n```\n\n然后输入：\n\n```\n/home/dbox/Dropbox/yourfolder/ IN_ATTRIB,IN_MOVE /home/dbox/dbox.sh\n\n```\n第一个参数：用来接收Dropbox同步的文件夹\n\n第二个参数：指监测的动作\n\n第三个参数：处理脚本\n\n监测的动作可以用：\n\n```\nIN_ACCESS，即文件被访问\nIN_MODIFY，文件被 write\nIN_ATTRIB，文件属性被修改，如 chmod、chown、touch 等\nIN_CLOSE_WRITE，可写文件被 close\nIN_CLOSE_NOWRITE，不可写文件被 close\nIN_OPEN，文件被 open\nIN_MOVED_FROM，文件被移走,如 mv\nIN_MOVED_TO，文件被移来，如 mv、cp\nIN_CREATE，创建新文件\nIN_DELETE，文件被删除，如 rm\nIN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己\nIN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己\nIN_UNMOUNT，宿主文件系统被 umount\nIN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)\nIN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)\n#上面所说的文件也包括目录。\n```\n\n##### 处理同步后的文件的脚本\n\n```\ncd /home/dbox/\nvi dbox.sh\n\ncd /home/dbox/Dropbox/yoursite/\ncp -R public/ /var/www/yoursite/\n\n```\n最后一句要注意看你本地同步了哪些内容，还要注意与网站的目录对应。\n\n还要注意dbox.sh要有执行权限，和yoursite的写入权限。\n\n至此，完成。\n\n\n","slug":"dropbox-sync-hexo-article","published":1,"updated":"2016-01-01T14:25:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopl0016oc0rjd6we55h"},{"title":"利用Dropbox同步hexo的文章源文件并自动生成文章发布","layout":"photo","date":"2015-11-13T06:12:35.000Z","_content":"\n** 阅读之前默认为已在服务器安装hexo，也默认服务器可以访问Dropbox **\n\n** 不建议服务器内存小于512M ，谁卡谁知道 **\n\n\n### 最初的最初\n\n先说下我最终完成的结构：\n\n\t1.本地有一个日志文件夹，用于存放md文件，或HTML文件，作为本地的Dropbox客户端同步的目录\n\t2.服务器home文件夹中init一套hexo程序，用于接收本地的md文件，和generate，minify\n\t\n流程：\n\n\t1.本地撰写，本地客户端自动同步\n\t2.服务器Dropbox设置的同步目录接收本地的内容并cp到专门用于生成的hexo目录里\n\t3.服务器用于生成的hexo生成新日志，cp到web目录中\n\t\n这么做的原因是，如果一共（是整个博客一共）只有一篇文章或几篇文章，那几乎没影响，如果，有几十篇了，据我观察，生成很耗时，可能会导致搜索引擎访问出现404，用户打开一个生成到一半的文件，用户打开一个木有样式的文章。\n\n\n### STEP 0 安装Dropbox\n\n[注册Dropbox](https://db.tt/mMNtRA6x)。\n\n\n```\nif( ! has_dropbox_account() ){\n\treturn \"请先注册个账户啊亲\";\n}\n```\n\n由于Dropbox默认安装在~，所以建议新建一个专用于同步的账户，如dbox。\n\n```\nadduser dbox\npasswd dbox \n```\n\n** 请记住密码。请记住密码。请记住密码。 **\n\n然后，用新建的账户登录进去。\n\n终于可以安装Dropbox了。\n\n这里要区分一下你的系统，\n\n** 32位: **\n\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86\" | tar xzf -\n```\n\n** 64位: **\n\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n```\n\n然后就可以运行Dropbox的守护程序了\n\n```\n~/.dropbox-dist/dropboxd &\n```\n\n第一次在新的电脑上启动，会提示：\n\n\t此电脑尚未与任何 Dropbox 帐户关联...\n\n\t请访问 https://www.dropbox.com/cli_link_nonce?nonce=95cd317d2***** 来关联此设备。\n\n\t此电脑现在已与 Dropbox 关联。欢迎 yourname username\n\n\n** 注意在出现“此电脑现在已与 Dropbox 关联。欢迎 your username”前不要ctrl+c 退出这个程序。 **\n\n打开授权链接后会出现如下的提示，选择连接即可。\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo33B2BAAF-6996-41AA-BFA3-FC177106F62A.png)\n\n一定要注意，不然你都会奇怪为啥再次启动这个进程的时候还会出现“尚未关联的提示”\n\n验证成功后，会在当前用户的home目录中创建Dropbox目录，即Dropbox同步的目录。\n\n此时，如果你打开了 top，那应该发现此时服务器的内存有点捉急了，原因是Dropbox这个进程占的很多，所以一般情况下killall dropbox 退出就好了，壕请随意。\n\n\n### STEP 1 设置文件夹监测\n\n\n**安装incron服务**\n\t\nincron是Linux下一个监测文件变化的服务\n\t\n\n```\napt-get install incron\nyum install incron\n\n```\n\n** 设置开机启动 **\n\n安装sysv-rc-conf，用于管理服务的启动\n\n```\napt-get install sysv-rc-conf\nsysv-rc-conf incron on\n\n```\n\n** 创建监测任务 **\n\n先修改下incron的编辑器\n\n```\nvi /etc/incron.conf\n\n```\n\n（此时可能需要sudo权限，因为是dbox用户）在文件的最后一行，去掉editor = vi前的#，保存退出。\n\n输入：incrontab -e\n\n\n```\n/home/dbox/Dropbox/yourfolder/ IN_ATTRIB,IN_MOVE /home/dbox/hexo.bash\n\n```\n\n第一个参数：用来接收Dropbox同步的文件夹\n\n第二个参数：指监测的动作\n\n第三个参数：处理脚本\n\n监测的动作可以用：\n\n\tIN_ACCESS，即文件被访问\n\tIN_MODIFY，文件被 write\n\tIN_ATTRIB，文件属性被修改，如 chmod、chown、touch 等\n\tIN_CLOSE_WRITE，可写文件被 close\n\tIN_CLOSE_NOWRITE，不可写文件被 close\n\tIN_OPEN，文件被 open\n\tIN_MOVED_FROM，文件被移走,如 mv\n\tIN_MOVED_TO，文件被移来，如 mv、cp\n\tIN_CREATE，创建新文件\n\tIN_DELETE，文件被删除，如 rm\n\tIN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己\n\tIN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己\n\tIN_UNMOUNT，宿主文件系统被 umount\n\tIN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)\n\tIN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)\n\t#上面所说的文件也包括目录。\n\n\n可以选自己需要的动作\n\n接下来写处理脚本\n```\nvi hexo.bash\n```\n\n\n```\ncp -R /home/dbox/Dropbox/yourfolder/* /home/dbox/dropasync/source/_posts/;\ncd /home/dbox/dropasync/ && hexo gm\ncd ~ && ./.dropbox-dist/dropboxd\n\n```\n\n理论上到这里已经可以了。\n\n~~但是实际上我本人在测试的时候，512内存的服务器会只剩下4M内存，然后再执行任何命令都提示\n```-bash: fork: Cannot allocate memory```，持续很长时间，一开始以为是同时跑的进程太多导致内存不够，把没用的mongodb，redis都kill之后还是这样，后来干脆在执行这个脚本的时候把Dropbox的后台禁掉，也不行，之后想到了在这段脚本里echo一段数字到log中，执行的时候发现会写入多次，但是还是不清楚为什么会出现这种情况，进程里也是出现了两个或多个hexo，于是干脆就在这段脚本开始时先kill dropbox和hexo，在末尾再kill hexo。实际运行起来，内存还是会降到最低，但是持续时间明显减少到可以接受的程度。~~\n\n---\n2015-11-21 14:06:07 附截图\n---\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexoF2A913D3-14C5-4FC9-B177-500AC0434036.png)\n\n---\n2015-11-14 22:38:06 测试发现，上述带删除线的方法依然不行。内存依然会榨干很长时间。\n\n---\n\n\n至于为何出现这个情况，咱不可知。。。总不能完全是因为内存太小吧……\n\n后续应该还会继续改进这个脚本。\n\n**另外，在安装这个用于生成日志的hexo程序的时候也出现了npm killed的问题，查了资料发现也是因为内存不足，npm install -d 可以查看安装过程，如果出错可以用来定位到底是什么原因引起错误**\n\n\n一些参考资料：\n\n[Hexo 服务器端布署及 Dropbox 同步](http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps/)\n\n[用Hexo+Vps搭建博客并用Dropbox同步自动发布](http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/)\n\n[incrontab(5) - Linux man page](http://linux.die.net/man/5/incrontab)\n\n[incron：linux下基于文件的事件触发](http://wlx.westgis.ac.cn/tag/incrontab/)\n\n[Why is chkconfig no longer available in Ubuntu?](http://askubuntu.com/questions/221293/why-is-chkconfig-no-longer-available-in-ubuntu)\n\n[Use incron to Trigger Action when File Changes 如果设置incrontab出现问题可以参考这篇](https://www.garron.me/en/linux/use-incron-rsync-dropbox-backup.html)\n","source":"_posts/dropbox-sync-hexo-and-autobuild-itself.md","raw":"title: 利用Dropbox同步hexo的文章源文件并自动生成文章发布\nlayout: photo\ndate: 2015-11-13 14:12:35\ntags:  [hexo,dropbox]\n---\n\n** 阅读之前默认为已在服务器安装hexo，也默认服务器可以访问Dropbox **\n\n** 不建议服务器内存小于512M ，谁卡谁知道 **\n\n\n### 最初的最初\n\n先说下我最终完成的结构：\n\n\t1.本地有一个日志文件夹，用于存放md文件，或HTML文件，作为本地的Dropbox客户端同步的目录\n\t2.服务器home文件夹中init一套hexo程序，用于接收本地的md文件，和generate，minify\n\t\n流程：\n\n\t1.本地撰写，本地客户端自动同步\n\t2.服务器Dropbox设置的同步目录接收本地的内容并cp到专门用于生成的hexo目录里\n\t3.服务器用于生成的hexo生成新日志，cp到web目录中\n\t\n这么做的原因是，如果一共（是整个博客一共）只有一篇文章或几篇文章，那几乎没影响，如果，有几十篇了，据我观察，生成很耗时，可能会导致搜索引擎访问出现404，用户打开一个生成到一半的文件，用户打开一个木有样式的文章。\n\n\n### STEP 0 安装Dropbox\n\n[注册Dropbox](https://db.tt/mMNtRA6x)。\n\n\n```\nif( ! has_dropbox_account() ){\n\treturn \"请先注册个账户啊亲\";\n}\n```\n\n由于Dropbox默认安装在~，所以建议新建一个专用于同步的账户，如dbox。\n\n```\nadduser dbox\npasswd dbox \n```\n\n** 请记住密码。请记住密码。请记住密码。 **\n\n然后，用新建的账户登录进去。\n\n终于可以安装Dropbox了。\n\n这里要区分一下你的系统，\n\n** 32位: **\n\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86\" | tar xzf -\n```\n\n** 64位: **\n\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n```\n\n然后就可以运行Dropbox的守护程序了\n\n```\n~/.dropbox-dist/dropboxd &\n```\n\n第一次在新的电脑上启动，会提示：\n\n\t此电脑尚未与任何 Dropbox 帐户关联...\n\n\t请访问 https://www.dropbox.com/cli_link_nonce?nonce=95cd317d2***** 来关联此设备。\n\n\t此电脑现在已与 Dropbox 关联。欢迎 yourname username\n\n\n** 注意在出现“此电脑现在已与 Dropbox 关联。欢迎 your username”前不要ctrl+c 退出这个程序。 **\n\n打开授权链接后会出现如下的提示，选择连接即可。\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexo33B2BAAF-6996-41AA-BFA3-FC177106F62A.png)\n\n一定要注意，不然你都会奇怪为啥再次启动这个进程的时候还会出现“尚未关联的提示”\n\n验证成功后，会在当前用户的home目录中创建Dropbox目录，即Dropbox同步的目录。\n\n此时，如果你打开了 top，那应该发现此时服务器的内存有点捉急了，原因是Dropbox这个进程占的很多，所以一般情况下killall dropbox 退出就好了，壕请随意。\n\n\n### STEP 1 设置文件夹监测\n\n\n**安装incron服务**\n\t\nincron是Linux下一个监测文件变化的服务\n\t\n\n```\napt-get install incron\nyum install incron\n\n```\n\n** 设置开机启动 **\n\n安装sysv-rc-conf，用于管理服务的启动\n\n```\napt-get install sysv-rc-conf\nsysv-rc-conf incron on\n\n```\n\n** 创建监测任务 **\n\n先修改下incron的编辑器\n\n```\nvi /etc/incron.conf\n\n```\n\n（此时可能需要sudo权限，因为是dbox用户）在文件的最后一行，去掉editor = vi前的#，保存退出。\n\n输入：incrontab -e\n\n\n```\n/home/dbox/Dropbox/yourfolder/ IN_ATTRIB,IN_MOVE /home/dbox/hexo.bash\n\n```\n\n第一个参数：用来接收Dropbox同步的文件夹\n\n第二个参数：指监测的动作\n\n第三个参数：处理脚本\n\n监测的动作可以用：\n\n\tIN_ACCESS，即文件被访问\n\tIN_MODIFY，文件被 write\n\tIN_ATTRIB，文件属性被修改，如 chmod、chown、touch 等\n\tIN_CLOSE_WRITE，可写文件被 close\n\tIN_CLOSE_NOWRITE，不可写文件被 close\n\tIN_OPEN，文件被 open\n\tIN_MOVED_FROM，文件被移走,如 mv\n\tIN_MOVED_TO，文件被移来，如 mv、cp\n\tIN_CREATE，创建新文件\n\tIN_DELETE，文件被删除，如 rm\n\tIN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己\n\tIN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己\n\tIN_UNMOUNT，宿主文件系统被 umount\n\tIN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)\n\tIN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)\n\t#上面所说的文件也包括目录。\n\n\n可以选自己需要的动作\n\n接下来写处理脚本\n```\nvi hexo.bash\n```\n\n\n```\ncp -R /home/dbox/Dropbox/yourfolder/* /home/dbox/dropasync/source/_posts/;\ncd /home/dbox/dropasync/ && hexo gm\ncd ~ && ./.dropbox-dist/dropboxd\n\n```\n\n理论上到这里已经可以了。\n\n~~但是实际上我本人在测试的时候，512内存的服务器会只剩下4M内存，然后再执行任何命令都提示\n```-bash: fork: Cannot allocate memory```，持续很长时间，一开始以为是同时跑的进程太多导致内存不够，把没用的mongodb，redis都kill之后还是这样，后来干脆在执行这个脚本的时候把Dropbox的后台禁掉，也不行，之后想到了在这段脚本里echo一段数字到log中，执行的时候发现会写入多次，但是还是不清楚为什么会出现这种情况，进程里也是出现了两个或多个hexo，于是干脆就在这段脚本开始时先kill dropbox和hexo，在末尾再kill hexo。实际运行起来，内存还是会降到最低，但是持续时间明显减少到可以接受的程度。~~\n\n---\n2015-11-21 14:06:07 附截图\n---\n\n![](http://7b1hhm.com1.z0.glb.clouddn.com/hexoF2A913D3-14C5-4FC9-B177-500AC0434036.png)\n\n---\n2015-11-14 22:38:06 测试发现，上述带删除线的方法依然不行。内存依然会榨干很长时间。\n\n---\n\n\n至于为何出现这个情况，咱不可知。。。总不能完全是因为内存太小吧……\n\n后续应该还会继续改进这个脚本。\n\n**另外，在安装这个用于生成日志的hexo程序的时候也出现了npm killed的问题，查了资料发现也是因为内存不足，npm install -d 可以查看安装过程，如果出错可以用来定位到底是什么原因引起错误**\n\n\n一些参考资料：\n\n[Hexo 服务器端布署及 Dropbox 同步](http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps/)\n\n[用Hexo+Vps搭建博客并用Dropbox同步自动发布](http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/)\n\n[incrontab(5) - Linux man page](http://linux.die.net/man/5/incrontab)\n\n[incron：linux下基于文件的事件触发](http://wlx.westgis.ac.cn/tag/incrontab/)\n\n[Why is chkconfig no longer available in Ubuntu?](http://askubuntu.com/questions/221293/why-is-chkconfig-no-longer-available-in-ubuntu)\n\n[Use incron to Trigger Action when File Changes 如果设置incrontab出现问题可以参考这篇](https://www.garron.me/en/linux/use-incron-rsync-dropbox-backup.html)\n","slug":"dropbox-sync-hexo-and-autobuild-itself","published":1,"updated":"2015-12-19T07:50:01.000Z","comments":1,"photos":[],"link":"","_id":"cij8gcopo001aoc0rj535nime"},{"title":"crontab实现定时备份数据库","date":"2016-01-10T10:52:55.000Z","_content":"\n![](https://s.qichengzx.com/img/201601/crontab.jpg)\n\ncrontab命令之前写过了，在[Linux crontab 访问PHP URL完成定时任务](http://segmentfault.com/a/1190000003953826)，今天写了一个用来备份数据库的脚本。\n\n主要会用到以下几个命令：\n\n#### mysqldump\n\n参考文章：[mysqldump导入导出数据库总结 ](http://blog.csdn.net/shellching/article/details/8129687)\n\n\n#### 创建.sh文件：\n\n```\ncd ~\nvi backup.sh\n```\nbackup.sh内主要内容如下：\n\n```\nmysqldump -hlocalhost -uroot -p'root' --databases database1 | gzip > /var/backups/databases-database1`date +'%Y%m%d_%H%M%S'`.sql.gz\n```\n\n首先用mysqldump命令\n\n```\n\t1.连接数据库\n\t2.选择要备份数据库\n\t3.选择存储备份文件的方式，这里使用了gzip了生成一个压缩包\n```\n\n根据文档，如果想备份所有数据库，可以使用\n\n```\nmysqldump -hlocalhost -uroot -p'root' --all-databases | gzip > /var/backups/databases-all-database`date +'%Y%m%d_%H%M%S'`.sql.gz\n```\n保存。\n\n有备份，就会有备份后的处理，显而易见的问题是备份多了会比较占空间，并且也用不到那么多备份。所以备份完成删除掉一段时间以前的就可以了。这步也可以在备份前做，无所谓。\n\n这里又用到了find命令\n\n参考文章：[Linux中find常见用法示例](http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html)\n\n#### 删除之前的备份文件\n\n在刚才的backup.sh中继续输入：\n\n```\ncd /var/backups/\nrm -rf `find . -name '*.sql.gz' -mtime +10`\n\n```\n\n这句命令有两部分，\n\n第一部分是删除命令：'rm -rf'。就是那句一定要慎用的命令了.\n\n第二部分是找到：当前目录，名字以'.sql.gz'结尾的，更改时间在10天以前的文件。\n\n'.'表示当前目录，由于上一句是'cd /var/backups/'，所以这里使用当前目录即可。\n\n'-name '和'-mtime'参数是find命令的条件。\n\n具体的说明，和其他条件可以参考前边说到的文章。\n\n到这里基本上备份脚本就完成了。\n\n但是为了什么时候突然想看一下日志，或者备份出错的时候查问题，还可以在脚本里加上记录日志的命令：\n\n#### 日志\n\n```\necho 'Begin Backup Database At :' `date +'%Y-%m-%d %H:%M:%S'`\n```\n\n这里又用到了date。\n\n参考文章：[Linux下date命令，格式化输出，时间设置 ](http://blog.csdn.net/jk110333/article/details/8590746/)\n\n脚本保存之后，记得添加执行权限；\n\n```\nsudo chmod +x backup.sh\n```\n\n接下来就是在系统里添加crontab任务了。\n\n```\ncd /etc/\nvi crontab\n\n```\n\n在文件末尾，加上\n\n```\nm  h dom mon dow user\tcommand\n00 5 * * * root /home/yourname/backup.sh >> /var/log/backup.log\n```\n\n这样，backup.sh里的echo就会输出到/var/log/backup.log中了。\n\nOver。\n\n\n","source":"_posts/backup-database-with-crontab.md","raw":"title: crontab实现定时备份数据库\ncategories: linux\ndate: 2016-01-10 18:52:55\ntags:  [crontab,mysql,linux]\n\n---\n\n![](https://s.qichengzx.com/img/201601/crontab.jpg)\n\ncrontab命令之前写过了，在[Linux crontab 访问PHP URL完成定时任务](http://segmentfault.com/a/1190000003953826)，今天写了一个用来备份数据库的脚本。\n\n主要会用到以下几个命令：\n\n#### mysqldump\n\n参考文章：[mysqldump导入导出数据库总结 ](http://blog.csdn.net/shellching/article/details/8129687)\n\n\n#### 创建.sh文件：\n\n```\ncd ~\nvi backup.sh\n```\nbackup.sh内主要内容如下：\n\n```\nmysqldump -hlocalhost -uroot -p'root' --databases database1 | gzip > /var/backups/databases-database1`date +'%Y%m%d_%H%M%S'`.sql.gz\n```\n\n首先用mysqldump命令\n\n```\n\t1.连接数据库\n\t2.选择要备份数据库\n\t3.选择存储备份文件的方式，这里使用了gzip了生成一个压缩包\n```\n\n根据文档，如果想备份所有数据库，可以使用\n\n```\nmysqldump -hlocalhost -uroot -p'root' --all-databases | gzip > /var/backups/databases-all-database`date +'%Y%m%d_%H%M%S'`.sql.gz\n```\n保存。\n\n有备份，就会有备份后的处理，显而易见的问题是备份多了会比较占空间，并且也用不到那么多备份。所以备份完成删除掉一段时间以前的就可以了。这步也可以在备份前做，无所谓。\n\n这里又用到了find命令\n\n参考文章：[Linux中find常见用法示例](http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html)\n\n#### 删除之前的备份文件\n\n在刚才的backup.sh中继续输入：\n\n```\ncd /var/backups/\nrm -rf `find . -name '*.sql.gz' -mtime +10`\n\n```\n\n这句命令有两部分，\n\n第一部分是删除命令：'rm -rf'。就是那句一定要慎用的命令了.\n\n第二部分是找到：当前目录，名字以'.sql.gz'结尾的，更改时间在10天以前的文件。\n\n'.'表示当前目录，由于上一句是'cd /var/backups/'，所以这里使用当前目录即可。\n\n'-name '和'-mtime'参数是find命令的条件。\n\n具体的说明，和其他条件可以参考前边说到的文章。\n\n到这里基本上备份脚本就完成了。\n\n但是为了什么时候突然想看一下日志，或者备份出错的时候查问题，还可以在脚本里加上记录日志的命令：\n\n#### 日志\n\n```\necho 'Begin Backup Database At :' `date +'%Y-%m-%d %H:%M:%S'`\n```\n\n这里又用到了date。\n\n参考文章：[Linux下date命令，格式化输出，时间设置 ](http://blog.csdn.net/jk110333/article/details/8590746/)\n\n脚本保存之后，记得添加执行权限；\n\n```\nsudo chmod +x backup.sh\n```\n\n接下来就是在系统里添加crontab任务了。\n\n```\ncd /etc/\nvi crontab\n\n```\n\n在文件末尾，加上\n\n```\nm  h dom mon dow user\tcommand\n00 5 * * * root /home/yourname/backup.sh >> /var/log/backup.log\n```\n\n这样，backup.sh里的echo就会输出到/var/log/backup.log中了。\n\nOver。\n\n\n","slug":"backup-database-with-crontab","published":1,"updated":"2016-01-10T11:22:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopq001doc0r3xs3c9vd"},{"title":"vps 搭建个人git服务器","date":"2015-11-07T15:34:10.000Z","_content":"\n\n以下内容主要来自\n\t[How To Set Up a Private Git Server on a VPS](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps)\n\n之前在DigitalOcean买了个5刀的vps，本来是想搞VPN的，但是没成功，后来把个人博客放这了，后来又觉得有点浪费，索性重新启用这个域名来写技术文章。\n\n本来是用的WP的但是也一直没写，后来又想折腾别的程序试一下，就选了现在的[hexo](https://hexo.io)，昨天在自己电脑上安装了，也可以写文章页可以默认 `hexo server` 运行，然后，我愉快的把命令行关掉之后，就傻了。\n\n后来也在官方文档和Google里看有什么办法能让它在后台运行，官方说可以 `hexo s &`，然并卵，官方和Google都说可以用 `forever` `pm2` ，一样然并卵，今天早晨起来继续弄的时候，觉得还是放弃吧，既然有public文件夹，还是用nginx去解析吧。这个都是后话了。\n\n下边说怎么在vps上安装git服务器，昨天和今天上午也看了一些资料一直也不成功。晚上从DigitalOcean社区里看到这篇文章，然后就成功了。\n\n\n#### 0 在本地生成ssh key\n\n\tssh-keygen -C \"youremail@mailprovider.com\"\n\n\tGenerating public/private rsa key pair.\n\t\n\tEnter file in which to save the key (/home/flynn/.ssh/id_rsa):\n\t\n\tEnter passphrase (empty for no passphrase):\n\t\n\tEnter same passphrase again: \n\t\n\tYour identification has been saved in foo_rsa.\n\t\n\tYour public key has been saved in foo_rsa.pub.\n\n\n注意替换成自己的邮箱，可以一路回车，也可以在 Enter passphrase 的时候输入一个密码保护一下。如果已经生成过了可以 **略过这步**。\n#### 1 在服务器添加git用户\n首先切换到root用户，`su -` 。\n然后添加git用户。（用户名不一定是git，但是习惯上用这个名）\n\n`useradd git`\n\n设置密码\n\n`passwd git`\n\n输入两次密码即可，用户创建完毕。我在操作的时候并没有在/home/下创建git用户的目录。\n\n所以可能需要自己手动创建\n\n`cd /home/`\n\n`mkdir git `\n\n`sudo chown -R -v git:git git/`\n\n现在可以安装git服务了。\n\n\n    CentOS/Fedora: yum install git\n    Ubuntu/Debian: apt-get install git\n\nDO文档说可以这样，但是部分资料里写要 install git-core，但是因为之前安装过git-core，所以不确定是不是DO文档上是正确的，**所以此处DO的文档可能不准确。**（不确定）\n\n#### 2 把本地的ssh key添加到服务器的允许访问列表里\n\n登录进服务器，切换到git用户。\n\n`su git`\n\n然后创建git用户的.ssh文件夹及authorized_keys文件，\n\n`mkdir ~/.ssh && touch ~/.ssh/authorized_keys`\n\n\n&&的意思是执行完第一个命令后紧接着执行第二个命令，分开写一样可以，连着写逼格更高。\n\n然后回到本地的命令行里，\n\n`cat .ssh/id_rsa.pub | ssh git@123.45.56.78 \"cat >> ~/.ssh/authorized_keys\"`\n\n第一个cat 后的文件地址取决于你电脑上这个文件的路径，后边是说把前边你本地的id_rsa.pub的内容写到远程服务器上git 这个用户的.ssh/authorized_keys文件里，也就是前边创建的那个文件。\n\n所以，不出意外的话，此时可以在服务器上运行\n\n`cat ~/.ssh/authorized_keys ` 就可以看到你本地电脑生成的key了，不出意外的话结尾应该是你生成key填写的邮箱。\n\n#### 3 初始化本地仓库\n\n在服务器上任何一个位置，执行\n\n`git init --bare project.git`，这样，在你的开发机和服务器环境是就可以用到这个project.git了。\n\n（为已存在的git项目）设置远程仓库的URL\n\n`git remote set-url origin git@git.droplet.com:project.git`\n\ngit@git.droplet.com:project.git 替换成你的git用户名，你的ip或域名，及你的服务器上git的文件夹\n\n如果是一个新的仓库，是这样\n\n`git init && git remote add origin git@git.droplet.com:project.git`\n\ngit@git.droplet.com:my-project.gi 只是服务器上\n\n\n### 总结：\n\n\t所以实际上上边的流程是\n\t\n\t0. 在服务器上比如home/git 目录里git init --bare project.git\n\t1. 在自己电脑，某个目录，git init 或者git clone git@git.droplet.com:project.git\n\t2. 在服务器上比如www目录，git init 或git clone git@git.droplet.com:project.git\n\t\n\t不出意外，这样就可以了。\n\t\n\t本地添加一个新文件，git add . , git commit -m \"test\" ,git push origin master，登录服务器，切换到www目录，git pull origin master，就可以了。\n\t\n\t\n参考资料:\n\n[How To Set Up a Private Git Server on a VPS](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps)\n\n[Git on the Server - Setting Up the Server](https://git-scm.com/book/it/v2/Git-on-the-Server-Setting-Up-the-Server)","source":"_posts/Set Up a Private Git Server on a VPS.md","raw":"title: vps 搭建个人git服务器\ndate: 2015-11-07 23:34:10\ntags:  [vps,git]\n---\n\n\n以下内容主要来自\n\t[How To Set Up a Private Git Server on a VPS](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps)\n\n之前在DigitalOcean买了个5刀的vps，本来是想搞VPN的，但是没成功，后来把个人博客放这了，后来又觉得有点浪费，索性重新启用这个域名来写技术文章。\n\n本来是用的WP的但是也一直没写，后来又想折腾别的程序试一下，就选了现在的[hexo](https://hexo.io)，昨天在自己电脑上安装了，也可以写文章页可以默认 `hexo server` 运行，然后，我愉快的把命令行关掉之后，就傻了。\n\n后来也在官方文档和Google里看有什么办法能让它在后台运行，官方说可以 `hexo s &`，然并卵，官方和Google都说可以用 `forever` `pm2` ，一样然并卵，今天早晨起来继续弄的时候，觉得还是放弃吧，既然有public文件夹，还是用nginx去解析吧。这个都是后话了。\n\n下边说怎么在vps上安装git服务器，昨天和今天上午也看了一些资料一直也不成功。晚上从DigitalOcean社区里看到这篇文章，然后就成功了。\n\n\n#### 0 在本地生成ssh key\n\n\tssh-keygen -C \"youremail@mailprovider.com\"\n\n\tGenerating public/private rsa key pair.\n\t\n\tEnter file in which to save the key (/home/flynn/.ssh/id_rsa):\n\t\n\tEnter passphrase (empty for no passphrase):\n\t\n\tEnter same passphrase again: \n\t\n\tYour identification has been saved in foo_rsa.\n\t\n\tYour public key has been saved in foo_rsa.pub.\n\n\n注意替换成自己的邮箱，可以一路回车，也可以在 Enter passphrase 的时候输入一个密码保护一下。如果已经生成过了可以 **略过这步**。\n#### 1 在服务器添加git用户\n首先切换到root用户，`su -` 。\n然后添加git用户。（用户名不一定是git，但是习惯上用这个名）\n\n`useradd git`\n\n设置密码\n\n`passwd git`\n\n输入两次密码即可，用户创建完毕。我在操作的时候并没有在/home/下创建git用户的目录。\n\n所以可能需要自己手动创建\n\n`cd /home/`\n\n`mkdir git `\n\n`sudo chown -R -v git:git git/`\n\n现在可以安装git服务了。\n\n\n    CentOS/Fedora: yum install git\n    Ubuntu/Debian: apt-get install git\n\nDO文档说可以这样，但是部分资料里写要 install git-core，但是因为之前安装过git-core，所以不确定是不是DO文档上是正确的，**所以此处DO的文档可能不准确。**（不确定）\n\n#### 2 把本地的ssh key添加到服务器的允许访问列表里\n\n登录进服务器，切换到git用户。\n\n`su git`\n\n然后创建git用户的.ssh文件夹及authorized_keys文件，\n\n`mkdir ~/.ssh && touch ~/.ssh/authorized_keys`\n\n\n&&的意思是执行完第一个命令后紧接着执行第二个命令，分开写一样可以，连着写逼格更高。\n\n然后回到本地的命令行里，\n\n`cat .ssh/id_rsa.pub | ssh git@123.45.56.78 \"cat >> ~/.ssh/authorized_keys\"`\n\n第一个cat 后的文件地址取决于你电脑上这个文件的路径，后边是说把前边你本地的id_rsa.pub的内容写到远程服务器上git 这个用户的.ssh/authorized_keys文件里，也就是前边创建的那个文件。\n\n所以，不出意外的话，此时可以在服务器上运行\n\n`cat ~/.ssh/authorized_keys ` 就可以看到你本地电脑生成的key了，不出意外的话结尾应该是你生成key填写的邮箱。\n\n#### 3 初始化本地仓库\n\n在服务器上任何一个位置，执行\n\n`git init --bare project.git`，这样，在你的开发机和服务器环境是就可以用到这个project.git了。\n\n（为已存在的git项目）设置远程仓库的URL\n\n`git remote set-url origin git@git.droplet.com:project.git`\n\ngit@git.droplet.com:project.git 替换成你的git用户名，你的ip或域名，及你的服务器上git的文件夹\n\n如果是一个新的仓库，是这样\n\n`git init && git remote add origin git@git.droplet.com:project.git`\n\ngit@git.droplet.com:my-project.gi 只是服务器上\n\n\n### 总结：\n\n\t所以实际上上边的流程是\n\t\n\t0. 在服务器上比如home/git 目录里git init --bare project.git\n\t1. 在自己电脑，某个目录，git init 或者git clone git@git.droplet.com:project.git\n\t2. 在服务器上比如www目录，git init 或git clone git@git.droplet.com:project.git\n\t\n\t不出意外，这样就可以了。\n\t\n\t本地添加一个新文件，git add . , git commit -m \"test\" ,git push origin master，登录服务器，切换到www目录，git pull origin master，就可以了。\n\t\n\t\n参考资料:\n\n[How To Set Up a Private Git Server on a VPS](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps)\n\n[Git on the Server - Setting Up the Server](https://git-scm.com/book/it/v2/Git-on-the-Server-Setting-Up-the-Server)","slug":"Set Up a Private Git Server on a VPS","published":1,"updated":"2015-11-08T02:42:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij8gcopt001loc0r6ztc21tz"},{"layout":"react-native","title":"React-Native Fetch方法发送网络请求","date":"2015-11-06T14:54:22.000Z","_content":"\n\n\n先贴一个官方文档。\n[Network](https://facebook.github.io/react-native/docs/network.html#content)\n\n\n\n    fetch('https://mywebsite.com/endpoint/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            firstParam: 'yourValue',\n            secondParam: 'yourOtherValue',\n        })\n    })\n\n一开始我就是单纯的这么写的，愉快的把URL替换掉，把参数替换掉，然后。。。\n我愉快的敲下 `var_dump($_POST['firstParam'])` 的时候，后台没接到任何东西，后来在stackoverflow上看到回答，说之所以接收不到，是因为这不属于form data，想要这么写，需要在接收前添加 `file_get_contents('php://input') `,然后果然就可以了。\n\n    $json = json_decode(file_get_contents('php://input'), true);\n    var_dump($json['firstParam']);\n\n但是这样会影响到现有的web应用，所以又继续查资料，发现可以改成下边这样的方法。\n\n\n    function toQueryString(obj) {\n        return obj ? Object.keys(obj).sort().map(function (key) {\n            var val = obj[key];\n            if (Array.isArray(val)) {\n                return val.sort().map(function (val2) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(val2);\n                }).join('&');\n            }\n    \n            return encodeURIComponent(key) + '=' + encodeURIComponent(val);\n        }).join('&') : '';\n\t}\n\n\n    fetch(url, {\n        method: 'post',\n        body: toQueryString({ \n            'firstParam': 'yourValue',\n            'secondParam':'yourOtherValue' \n        })\n    }) \n\n\n\n这样，在后台就可以正常的用$_POST['firstParam'];接收了。\n\n\n[Sending data as key-value pair using fetch polyfill in react-native](http://stackoverflow.com/questions/32448862/how-can-i-use-react-native-with-php-with-fetch-return-data-is-always-null)\n\n[How can I use react-native with php with fetch return data is always null](http://stackoverflow.com/questions/31201940/sending-data-as-key-value-pair-using-fetch-polyfill-in-react-native)\n\n\n","source":"_posts/React-Native-Fetch.md","raw":"layout: react-native\ntitle: React-Native Fetch方法发送网络请求\ndate: 2015-11-06 22:54:22\ntags:  [react-native,fetch,网络请求]\n---\n\n\n\n先贴一个官方文档。\n[Network](https://facebook.github.io/react-native/docs/network.html#content)\n\n\n\n    fetch('https://mywebsite.com/endpoint/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            firstParam: 'yourValue',\n            secondParam: 'yourOtherValue',\n        })\n    })\n\n一开始我就是单纯的这么写的，愉快的把URL替换掉，把参数替换掉，然后。。。\n我愉快的敲下 `var_dump($_POST['firstParam'])` 的时候，后台没接到任何东西，后来在stackoverflow上看到回答，说之所以接收不到，是因为这不属于form data，想要这么写，需要在接收前添加 `file_get_contents('php://input') `,然后果然就可以了。\n\n    $json = json_decode(file_get_contents('php://input'), true);\n    var_dump($json['firstParam']);\n\n但是这样会影响到现有的web应用，所以又继续查资料，发现可以改成下边这样的方法。\n\n\n    function toQueryString(obj) {\n        return obj ? Object.keys(obj).sort().map(function (key) {\n            var val = obj[key];\n            if (Array.isArray(val)) {\n                return val.sort().map(function (val2) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(val2);\n                }).join('&');\n            }\n    \n            return encodeURIComponent(key) + '=' + encodeURIComponent(val);\n        }).join('&') : '';\n\t}\n\n\n    fetch(url, {\n        method: 'post',\n        body: toQueryString({ \n            'firstParam': 'yourValue',\n            'secondParam':'yourOtherValue' \n        })\n    }) \n\n\n\n这样，在后台就可以正常的用$_POST['firstParam'];接收了。\n\n\n[Sending data as key-value pair using fetch polyfill in react-native](http://stackoverflow.com/questions/32448862/how-can-i-use-react-native-with-php-with-fetch-return-data-is-always-null)\n\n[How can I use react-native with php with fetch return data is always null](http://stackoverflow.com/questions/31201940/sending-data-as-key-value-pair-using-fetch-polyfill-in-react-native)\n\n\n","slug":"React-Native-Fetch","published":1,"updated":"2015-11-08T02:51:53.000Z","comments":1,"photos":[],"link":"","_id":"cij8gcopw001qoc0ru8ajb8gd"}],"PostAsset":[],"PostCategory":[{"post_id":"cij8gcop9000coc0rhcfw8xex","category_id":"cij8gcopa000doc0rlbpqcfcc","_id":"cij8gcopb000goc0r2d8cku9x"},{"post_id":"cij8gcopd000noc0r8l6bcqbd","category_id":"cij8gcope000ooc0r5inamxs7","_id":"cij8gcopf000roc0rfp0sk13u"},{"post_id":"cij8gcopg000toc0rhwizpfw6","category_id":"cij8gcope000ooc0r5inamxs7","_id":"cij8gcoph000uoc0ruvkzgnxo"},{"post_id":"cij8gcopj0010oc0ry2v03cqs","category_id":"cij8gcopk0011oc0rud2fsa42","_id":"cij8gcopl0014oc0ryaqvti7h"},{"post_id":"cij8gcopq001doc0r3xs3c9vd","category_id":"cij8gcopr001eoc0r7yr59wto","_id":"cij8gcopr001hoc0re0akqwdv"}],"PostTag":[{"post_id":"cij8gcoom0000oc0rk8tllbeo","tag_id":"cij8gcoor0001oc0raz6lszmt","_id":"cij8gcoot0004oc0re72hv77s"},{"post_id":"cij8gcoom0000oc0rk8tllbeo","tag_id":"cij8gcoot0002oc0r1xv97fb5","_id":"cij8gcoou0005oc0r584rezy9"},{"post_id":"cij8gcoom0000oc0rk8tllbeo","tag_id":"cij8gcoot0003oc0rr9j55urw","_id":"cij8gcoov0006oc0rt0ylimkg"},{"post_id":"cij8gcop60007oc0r4ndfg5mi","tag_id":"cij8gcop70008oc0rgypr965f","_id":"cij8gcop8000aoc0rztro6xhh"},{"post_id":"cij8gcop60007oc0r4ndfg5mi","tag_id":"cij8gcop70009oc0r6v65gweg","_id":"cij8gcop8000boc0rv0rxodbf"},{"post_id":"cij8gcop9000coc0rhcfw8xex","tag_id":"cij8gcopa000eoc0rk7eaeryc","_id":"cij8gcopb000joc0rf5kg1rbb"},{"post_id":"cij8gcop9000coc0rhcfw8xex","tag_id":"cij8gcopb000foc0rhyfsdmvg","_id":"cij8gcopc000koc0rrfleaz1e"},{"post_id":"cij8gcop9000coc0rhcfw8xex","tag_id":"cij8gcopb000hoc0rn4zzvadx","_id":"cij8gcopc000loc0rxccvciwy"},{"post_id":"cij8gcop9000coc0rhcfw8xex","tag_id":"cij8gcopb000ioc0ri9amjkiv","_id":"cij8gcopc000moc0r69groxy8"},{"post_id":"cij8gcopd000noc0r8l6bcqbd","tag_id":"cij8gcope000poc0rc1s5udv5","_id":"cij8gcopf000qoc0ruu8lsjgy"},{"post_id":"cij8gcopd000noc0r8l6bcqbd","tag_id":"cij8gcopb000ioc0ri9amjkiv","_id":"cij8gcopf000soc0ry5btgms2"},{"post_id":"cij8gcopg000toc0rhwizpfw6","tag_id":"cij8gcoph000voc0rfg1qu674","_id":"cij8gcoph000xoc0rq2g9rkye"},{"post_id":"cij8gcopg000toc0rhwizpfw6","tag_id":"cij8gcoph000woc0r4yd1i1x8","_id":"cij8gcoph000yoc0r1oxqucn1"},{"post_id":"cij8gcopj0010oc0ry2v03cqs","tag_id":"cij8gcopb000ioc0ri9amjkiv","_id":"cij8gcopl0013oc0rlxv6gv3i"},{"post_id":"cij8gcopj0010oc0ry2v03cqs","tag_id":"cij8gcopk0012oc0r0zg0828k","_id":"cij8gcopl0015oc0rkdl4nhca"},{"post_id":"cij8gcopl0016oc0rjd6we55h","tag_id":"cij8gcopn0017oc0ra7nrsekf","_id":"cij8gcopn0018oc0r1s8yskov"},{"post_id":"cij8gcopl0016oc0rjd6we55h","tag_id":"cij8gcoor0001oc0raz6lszmt","_id":"cij8gcopn0019oc0rzut1v29p"},{"post_id":"cij8gcopo001aoc0rj535nime","tag_id":"cij8gcoor0001oc0raz6lszmt","_id":"cij8gcopp001boc0r4w5swuxw"},{"post_id":"cij8gcopo001aoc0rj535nime","tag_id":"cij8gcopn0017oc0ra7nrsekf","_id":"cij8gcopp001coc0rx9vv4ivd"},{"post_id":"cij8gcopq001doc0r3xs3c9vd","tag_id":"cij8gcopr001foc0rz7tz19za","_id":"cij8gcopr001ioc0r9e0urgl0"},{"post_id":"cij8gcopq001doc0r3xs3c9vd","tag_id":"cij8gcopb000ioc0ri9amjkiv","_id":"cij8gcops001joc0r4a4qgoyr"},{"post_id":"cij8gcopq001doc0r3xs3c9vd","tag_id":"cij8gcopr001goc0rww8f1ye9","_id":"cij8gcops001koc0rj59q0p8j"},{"post_id":"cij8gcopt001loc0r6ztc21tz","tag_id":"cij8gcopu001moc0r27iw991v","_id":"cij8gcopv001ooc0r55zri2he"},{"post_id":"cij8gcopt001loc0r6ztc21tz","tag_id":"cij8gcopu001noc0r8tcu4qpz","_id":"cij8gcopv001poc0rffyfh1c0"},{"post_id":"cij8gcopw001qoc0ru8ajb8gd","tag_id":"cij8gcopw001roc0rwhzz1osl","_id":"cij8gcopx001uoc0r74qrkhpf"},{"post_id":"cij8gcopw001qoc0ru8ajb8gd","tag_id":"cij8gcopw001soc0rydhiy0ej","_id":"cij8gcopx001voc0rzar5u07u"},{"post_id":"cij8gcopw001qoc0ru8ajb8gd","tag_id":"cij8gcopx001toc0r2fu91spw","_id":"cij8gcopx001woc0r7cst15ly"}],"Tag":[{"name":"hexo","_id":"cij8gcoor0001oc0raz6lszmt"},{"name":"time","_id":"cij8gcoot0002oc0r1xv97fb5"},{"name":"widget","_id":"cij8gcoot0003oc0rr9j55urw"},{"name":"https","_id":"cij8gcop70008oc0rgypr965f"},{"name":"ssl","_id":"cij8gcop70009oc0r6v65gweg"},{"name":"php","_id":"cij8gcopa000eoc0rk7eaeryc"},{"name":"pdo","_id":"cij8gcopb000foc0rhyfsdmvg"},{"name":"redis","_id":"cij8gcopb000hoc0rn4zzvadx"},{"name":"mysql","_id":"cij8gcopb000ioc0ri9amjkiv"},{"name":"node","_id":"cij8gcope000poc0rc1s5udv5"},{"name":"javascript","_id":"cij8gcoph000voc0rfg1qu674"},{"name":"标识符","_id":"cij8gcoph000woc0r4yd1i1x8"},{"name":"excel","_id":"cij8gcopk0012oc0r0zg0828k"},{"name":"dropbox","_id":"cij8gcopn0017oc0ra7nrsekf"},{"name":"crontab","_id":"cij8gcopr001foc0rz7tz19za"},{"name":"linux","_id":"cij8gcopr001goc0rww8f1ye9"},{"name":"vps","_id":"cij8gcopu001moc0r27iw991v"},{"name":"git","_id":"cij8gcopu001noc0r8tcu4qpz"},{"name":"react-native","_id":"cij8gcopw001roc0rwhzz1osl"},{"name":"fetch","_id":"cij8gcopw001soc0rydhiy0ej"},{"name":"网络请求","_id":"cij8gcopx001toc0r2fu91spw"}]}}