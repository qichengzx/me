<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[启程]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.qichengzx.com/"/>
  <updated>2016-05-07T14:08:27.000Z</updated>
  <id>http://www.qichengzx.com/</id>
  
  <author>
    <name><![CDATA[qichengzx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（六） - 远程调用]]></title>
    <link href="http://www.qichengzx.com/2016/05/03/php-rabbitmq-tutorial-six.html"/>
    <id>http://www.qichengzx.com/2016/05/03/php-rabbitmq-tutorial-six.html</id>
    <published>2016-05-03T06:35:20.000Z</published>
    <updated>2016-05-07T14:08:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="远程调用">远程调用</h3><p>在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">第二节</a>中，我们学习了如何使用工作队列在多个worker中分发耗时任务。</p>
<p>但是如果我们需要在远程运行一个函数并等待返回结果怎么办？这是两码事，这个模式通常被称为远程过程调用（Remote Procedure Call，RPC）。</p>
<p>在本节中我们准备使用RabbitMQ构建一个RPC系统：一个客户端和一个可扩展的RPC服务端。由于我们没有值得分发的耗时任务，我们准备创建一个假的返回<a href="https://en.wikipedia.org/wiki/Fibonacci_number" target="_blank" rel="external">斐波那契数列</a>的RPC服务。</p>
<h3 id="客户端接口">客户端接口</h3><p>我们创建一个简单的客户端类来说明RPC服务如何使用。这个类会展示call方法如何发送一个RPC请求并且阻塞，直到接收到返回值。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fibonacci_rpc</span> = <span class="keyword">new</span> FibonacciRpcClient();</span><br><span class="line"><span class="variable">$response</span> = <span class="variable">$fibonacci_rpc</span>-&gt;call(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[.] Got "</span>, <span class="variable">$response</span>, <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="RPC注意事项">RPC注意事项</h4><p>尽管RPC在计算机学中很常见，但它十分挑剔。当程序员不知道是否是调用一个本地的方法还是一个很慢的RPC会出现这个问题。这样的困惑便导致不可预测的系统并增加不必要的调试复杂性。比起简化的软件，误用RPC会导致不可维护的无头绪代码。</p>
<p>记住刚才的内容，考虑下面的建议：</p>
<p>​    确保可以明显的看出哪个方法调用的是本地的哪个是远程的。</p>
<p>​    系统文档化。让组件之间的依赖变得清晰可见。</p>
<p>​    错误处理。当RPC服务长时间关闭客户端该作何反应？</p>
<p>如果有疑问，则尽量避免使用RPC。如果可以话，你应该使用异步管道——而不是RPC——像阻塞，结果被异步推送到下个计算阶段。</p>
<h3 id="回调队列">回调队列</h3><p>通常在RabbitMQ上做RPC很简单。客户端发送请求消息，服务端回复消息。为了接收响应消息，我们需要在请求中附带一个”callback”队列地址，我们可以使用默认的队列。来试一试：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(<span class="variable">$queue_name</span>, ,) = <span class="variable">$channel</span>-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(</span><br><span class="line">	<span class="variable">$payload</span>,</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'reply_to'</span> =&gt; <span class="variable">$queue_name</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">''</span>, <span class="string">'rpc_queue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... then code to read a response message from the callback_queue</span></span><br></pre></td></tr></table></figure>
<h4 id="消息属性">消息属性</h4><p>AMQP协议定义了14个消息属性。大部分不常用，下面的除外：</p>
<p>​    delivery_mode：值为2时表示持久化，1为临时的。也许你还记得这个属性来自第二节。</p>
<p>​    content_type：编码格式，比如经常用的JSON格式，良好的做法是设置为：application/json。</p>
<p>​    reply_to：通常用来定义回调队列名称。</p>
<p>​    correlation_id：用来关联RPC的响应和请求。</p>
<h3 id="Correlation_Id">Correlation Id</h3><p>在上面的方法中我们建议为每一个RPC请求创建一个回调队列。这样非常低效，但是幸运的是有更好的办法 - 我们可以为每一个客户端创建一个单独的回调队列。</p>
<p>这样又带来一个新的问题，在队列接收到响应时，并不知道属于哪个请求。这也正是correlation_id属性要发挥的作用。我们为每一个请求的设定一个唯一的correlation_id值，然后，当在回调队列接收到消息时会查看它的属性，基于此，我们就可以把响应和请求进行匹配。如果发现一个未知的correlation_id值，可以安全的忽略掉这条消息 - 因为它不属于任何请求。</p>
<p>也许你会问，为什么应该忽略回调队列里的未知消息，而不是返回一个错误？因为服务可能会出现紊乱的情况，虽然不太可能，但是如果发生这种情况，RPC服务会在发送完响应后挂掉，但是还没有进行消息确认。如果发生了，重启RPC服务后会再次处理这个请求。这就是为什么在客户端我们必须适当的处理重复请求，而RPC服务最好的幂等的。</p>
<h3 id="总结">总结</h3><p><img src="/images/rabbitmq/python-six.png" alt=""></p>
<p>RPC工作流程：</p>
<p>​    当客户端开始运行时会创建一个匿名独有回调队列。</p>
<p>​    RPC请求中，客户端消息带有两个属性：reply_to用来设置回调队列，correlation_id用来唯一标识每一个请求。</p>
<p>​    请求被发送到rpc_queue队列。</p>
<p>​    RPC worker（又称worker）在队列中守护，等待新请求。当请求到达，它会进行处理，然后把结果以消息的形式发送回客户端的队列，队列名便是客户端消息带有的reply_to的值。</p>
<p>​    客户端等待回调队列中的数据。当消息到达，检查它的correlation_id的值。如果符合客户端发送给RPC服务器中请求的值，客户端会返回响应内容到应用中。</p>
<h3 id="整合">整合</h3><p>斐波那契方法：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fib(<span class="variable">$n</span>)&#123;</span><br><span class="line">  if(<span class="variable">$n</span> == <span class="number">0</span>)</span><br><span class="line">  	return <span class="number">0</span>;</span><br><span class="line">  if(<span class="variable">$n</span> == <span class="number">1</span>)</span><br><span class="line">  	return <span class="number">1</span>;</span><br><span class="line">  return fib(<span class="variable">$n-1</span>) + fib(<span class="variable">$n-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义完斐波那契方法。假定它仅接受数字类型的输入。（别期望它能处理大的数字，它很可能非常慢的处理完。）</p>
<p>RPC服务处理程序rpc_server.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">'rpc_queue'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">fuction fib(<span class="variable">$n</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$n</span> == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$n</span> == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> fib(<span class="variable">$n</span>-<span class="number">1</span>) + fib(<span class="variable">$n</span>-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [x] Awaiting RPC requests\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$req</span>)</span></span>&#123;</span><br><span class="line">  <span class="variable">$n</span> = intval(<span class="variable">$req</span>-&gt;body);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">" [.] fib("</span>,<span class="variable">$n</span>,<span class="string">")\n"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(</span><br><span class="line">  	(string)fib(<span class="variable">$n</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'correlation_id'</span> =&gt; <span class="variable">$req</span>-&gt;get(<span class="string">'correlation_id'</span>))</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$req</span>-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">''</span>, <span class="variable">$req</span>-&gt;get(<span class="string">'reply_to'</span>));</span><br><span class="line">  <span class="variable">$req</span>-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack(<span class="variable">$req</span>-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="string">'rpc_queue'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$channel</span>-&gt;callbacks))&#123;</span><br><span class="line">  <span class="variable">$channel</span>-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>服务端代码相当简单：</p>
<p>​    和以往一样我们会从创建连接，频道，和声明队列开始</p>
<p>​    也许我们想要运行更多的进程。为了在多个服务器之间负载均衡，需要在$channel.basic_qos中设置prefech_count；</p>
<p>​    我们使用basic_consume访问队列。然后进入while循环等待请求消息，处理，然后返回响应消息。</p>
<p>RPC客户端 rpc_client.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRpcClient</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$connection</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$channel</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$callback_queue</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$response</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$corr_id</span>;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="variable">$this</span>-&gt;connection = <span class="keyword">new</span> AMQPStreamConnection(</span><br><span class="line">		  <span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span></span><br><span class="line">		);</span><br><span class="line">		<span class="variable">$this</span>-&gt;channel = <span class="variable">$this</span>-&gt;connection-&gt;channel();</span><br><span class="line">		<span class="keyword">list</span>(<span class="variable">$this</span>-&gt;callback_queue, ,) = <span class="variable">$this</span>-&gt;channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">		<span class="variable">$this</span>-&gt;channel-&gt;basic_consume(</span><br><span class="line">			<span class="variable">$this</span>-&gt;callback_queue, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">			<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="string">'on_response'</span>));</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line"> 	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on_response</span><span class="params">(<span class="variable">$req</span>)</span></span>&#123;</span><br><span class="line"> 		<span class="keyword">if</span>(<span class="variable">$req</span>-&gt;get(<span class="string">'correlation_id'</span>) == <span class="variable">$this</span>-&gt;corr_id)&#123;</span><br><span class="line"> 			<span class="variable">$this</span>-&gt;response = <span class="variable">$req</span>-&gt;body;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">  	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">(<span class="variable">$n</span>)</span></span>&#123;</span><br><span class="line">		<span class="variable">$this</span>-&gt;response = <span class="keyword">null</span>;</span><br><span class="line">		<span class="variable">$this</span>-&gt;corr_id = uniqid();</span><br><span class="line"></span><br><span class="line">		<span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(</span><br><span class="line">  		(string) <span class="variable">$n</span>,</span><br><span class="line">  		<span class="keyword">array</span>(</span><br><span class="line">  			<span class="string">'correlation_id'</span> =&gt; <span class="variable">$this</span>-&gt;corr_id,</span><br><span class="line">  			<span class="string">'reply_to'</span> =&gt; <span class="variable">$this</span>-&gt;callback_queue)</span><br><span class="line">  		);</span><br><span class="line">    )</span><br><span class="line">      </span><br><span class="line">    <span class="variable">$this</span>-&gt;channel-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">''</span>, <span class="string">'rpc_queue'</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="variable">$this</span>-&gt;response)&#123;</span><br><span class="line">    	<span class="variable">$this</span>-&gt;channel-&gt;wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intval(<span class="variable">$this</span>-&gt;response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$fibonacci_rpc</span> = <span class="keyword">new</span> FibonacciRpcClient();</span><br><span class="line"><span class="variable">$response</span> = <span class="variable">$fibonacci_rpc</span>-&gt;call(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [.] Got "</span>, <span class="variable">$response</span>, <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在可以查看示例的完整代码了。<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/rpc_client.php" target="_blank" rel="external">rpc_client.php</a> 和 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/rpc_server.php" target="_blank" rel="external">rpc_server.php</a>。</p>
<p>现在RPC服务端可以运行了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php rpc_server.php&#10;[x] Awiting RPC resquests</span><br></pre></td></tr></table></figure>
<p>接收斐波那契数列运行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php rpc_client<span class="class">.php</span></span><br><span class="line">[x] Requesting <span class="function"><span class="title">fib</span><span class="params">(<span class="number">30</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>这里展现的并不是RPC服务的唯一可能实现，但它有一些重要的优势：</p>
<p>​    如果RPC服务太慢，可以按比例增加运行数量。试试在新控制台裕兴第二个rpc_server.php服务。</p>
<p>​    在客户端，RPC要求只发送和接收一条消息。不能有像队列声明一样的异步调用。结果就是，对于单一的RPC请求，客户端仅需要一个网络往返。</p>
<p>现在的代码还是过于简单，并没有想解决更复杂（更重要）的问题，比如：</p>
<p>​    要是没有服务端守护运行，客户端作何反应？</p>
<p>​    RPC客户端是否需要设置超时？</p>
<p>​    如果服务端引发异常，是否该把它发送到客户端？</p>
<p>​    处理前阻止无效消息（如检查范围，类型）进入？</p>
<p>如果想尝试，可以在<a href="https://www.rabbitmq.com/plugins.html" target="_blank" rel="external">rabbitmq-management</a> 里找到一些有用的查看队列的插件。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-six-php.html" target="_blank" rel="external">Remote procedure call (RPC)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="远程调用">远程调用</h3><p>在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">第二节</a>中，我们学习了如何使用工作队列在多个worker中分发耗时任务。</p>
<p>但是如果我们需要在远程运行]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（五） - 主题]]></title>
    <link href="http://www.qichengzx.com/2016/04/27/php-rabbitmq-tutorial-five.html"/>
    <id>http://www.qichengzx.com/2016/04/27/php-rabbitmq-tutorial-five.html</id>
    <published>2016-04-27T10:27:03.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="主题">主题</h3><p>(<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">使用php-amqplib</a>)</p>
<p>在<a href="/2016/04/24/php-rabbitmq-tutorial-four.html">上一节</a>我们改善了日志系统(logging system，以下简称日志系统)，为了替代fanout类型的交换器，我们使用了一个direct类型的交换器，带来的好处是可以有选择的接收日志。</p>
<p>虽然使用direct交换器改善了系统，但是仍然有局限性 - 它不能根据多个条件进行路由。</p>
<p>在日志系统中，我们也许不仅仅想订阅严重等级的日志，也想订阅基于消息发布源的内容。也许你已经知道这个概念来自于UNIX的<a href="http://en.wikipedia.org/wiki/Syslog" target="_blank" rel="external">syslog</a>工具，基于严重性(info/warn/crit…)和设备路由日志(auth/cron/kern…)的工具。</p>
<p>这可以提高灵活性 - 我们也许只想要监听来自’cron’的关键错误而不是来自’kern’的全部日志。</p>
<p>为了在我们的日志系统上实现这个功能，需要学习一个更复杂的 topic 交换器。</p>
<h3 id="Topic_交换器">Topic 交换器</h3><p>发送到 topic 交换器的消息不能随意设置 routing_key - 它必须是一个单词列表，以’.’分隔。单词可以是任何内容，但是通常会具体说明消息的功能。一些有效的routing key示例：样：”stock.usd.nyse”，”nyse.vmw”，”quick.orange.rabbit”。routing key 可以是任何长度的你喜欢的单词，最大255个字节。</p>
<p>binding key 也必须是同样的格式，topic交换器的逻辑和direct交换器类似 - 带有特定routing key的消息会被派发到所有绑定了binding key的队列，然而对于binding key依然有两个重要的特殊情况：</p>
<pre><code>*可以代替一个单词

<span class="preprocessor">#可以代替<span class="number">0</span>个或多个单词</span>
</code></pre><p>下图比较好的解释了这个情况：</p>
<p><img src="/images/rabbitmq/python-five.png" alt="">    </p>
<p>在这个例子中，我们准备全部发送描述动物的消息。这些消息带有由三个单词(两个点号分隔)组成的routing key，其中第一个单词表示速度，第二个表示颜色，第三个表示种类：”<speed>.<colour>.<species>“。</species></colour></speed></p>
<p>我们创建三个绑定：Q1的binding key为”*.orange”，Q2的binding key为”*.*.rabbit”和”lazy.#“。</p>
<p>这些绑定可以概括为：</p>
<pre><code>Q1 关注所有orange的动物

Q2 想知道所有关于兔子（rabbits）和懒惰动物（<span class="keyword">lazy</span> animals）的消息。
</code></pre><p>routing key为”quick.orange.rabbit”的消息会被发送到两个队列，”lazy.orange.elephant”也会被发送到这两个队列。而”quick.orange.fox”则只会发送到第一个队列，”lazy.brown.fox”会被只发送到第二个队列。”lazy.pink.rabbit”会只被发送到第二个队列一次，即使它匹配两个绑定。”quick.brown.fox”不匹配任何绑定，所以会被丢弃。</p>
<p>如果打破规则，发送一条带有一个或四个单词，如”orange”或”quick.orange.male.rabbit”会怎么样？好吧，消息会丢失，因为它不匹配任何一个绑定。</p>
<p>但是，”lazy.orange.male.rabbit”这种消息，即使它有4个单词，依然会匹配最后一个绑定，然后被发送到第二个队列。</p>
<h4 id="topic_交换器">topic 交换器</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">topic 交换器非常强大，可以表现得跟其他交换器一样。</span><br><span class="line"></span><br><span class="line">当一个队列的binding <span class="variable">key</span>为<span class="string">"#"</span>时，它会接收所有消息，忽略routing <span class="variable">key</span>，像fanout交换器一样。</span><br><span class="line"></span><br><span class="line">当绑定中不存在<span class="string">"*"</span>和<span class="string">"#"</span>时，topic交换器会表现的跟direct交换器一样。</span><br></pre></td></tr></table></figure>
<h3 id="整合">整合</h3><p>我们准备在日志系统中使用topic交换器。假定日志的routing key由两个单词：”<facility>.<severity>“组成。</severity></facility></p>
<p>代码与上一节的几乎一致。</p>
<p>emit_log_topic.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$routing_key</span> = <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) ? <span class="variable">$argv</span>[<span class="number">1</span>] : <span class="string">'anonymous.info'</span>;</span><br><span class="line"><span class="variable">$data</span> = implode(<span class="string">' '</span>, array_slice(<span class="variable">$agrv</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>)) <span class="variable">$data</span> = <span class="string">"Hello Wrold!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">'topic_logs'</span>, <span class="variable">$routing_key</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [x] Sent "</span>,<span class="variable">$routing_key</span>,<span class="string">':'</span>,<span class="variable">$data</span>,<span class="string">" \n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>receive_logs_topic.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$queue_name</span>, ,) = <span class="variable">$channel</span>-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$binding_keys</span> = array_slice(<span class="variable">$argv</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">empty</span>(<span class="variable">$binding_keys</span>) )&#123;</span><br><span class="line">  file_put_contents(<span class="string">'php://stderr'</span>, <span class="string">"Usage: $argv[0] [binding_key]\n"</span>);</span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$binding_keys</span> <span class="keyword">as</span> <span class="variable">$binding_key</span>)&#123;</span><br><span class="line">  <span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>, <span class="string">'topic_logs'</span>, <span class="variable">$binding_key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$msg</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">' [*] '</span>,<span class="variable">$msg</span>-&gt;delivery_info[<span class="string">'routing_key'</span>], <span class="string">':'</span>, <span class="variable">$msg</span>-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="variable">$queue_name</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$channel</span>-&gt;callbacks))&#123;</span><br><span class="line">  <span class="variable">$channel</span>-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收所有日志：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_topic<span class="class">.php</span> <span class="string">'#'</span></span><br></pre></td></tr></table></figure>
<p>接收所有来自”kern”的日志：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_topic<span class="class">.php</span> <span class="string">"kern.*"</span></span><br></pre></td></tr></table></figure>
<p>只接收”致命(critical)”日志：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_topic.php &#34;*.critical&#34;</span><br></pre></td></tr></table></figure>
<p>创建多个绑定：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_topic.php &#34;kern.*&#34; &#34;*.critical&#34;</span><br></pre></td></tr></table></figure>
<p>发布routing key为”kern.critical”的日志就输入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php emit_log_topic.php &#34;kern.critical&#34; &#34;A critical kernel error&#34;</span><br></pre></td></tr></table></figure>
<p>注意此代码并没有做路由或捆绑的例子，也许你想试一下两个以上的routing key参数。</p>
<p>一些问题：</p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_1" target="_blank" rel="external">“*”会匹配routing key为空的消息吗？</a></p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_2" target="_blank" rel="external">“#.*”会匹配内容为”..”的消息吗？会匹配一个单词的消息吗？</a></p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_3" target="_blank" rel="external">“a.*.#”和”a.#”的区别是什么？</a></p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log_topic.php" target="_blank" rel="external">emit_log_topic.php完整代码</a> <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs_topic.php" target="_blank" rel="external">receive_logs_topic.php完整代码</a></p>
<p>下一步，在第六节中学习像远程过程调用一样完成消息往返。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-five-php.html" target="_blank" rel="external">Topics</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="主题">主题</h3><p>(<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">使用php-amqplib</a>)</p>
<p>在<a hre]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（四） - 路由]]></title>
    <link href="http://www.qichengzx.com/2016/04/24/php-rabbitmq-tutorial-four.html"/>
    <id>http://www.qichengzx.com/2016/04/24/php-rabbitmq-tutorial-four.html</id>
    <published>2016-04-24T06:16:41.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="路由">路由</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>）<br>在<a href="/2016/04/23/php-rabbitmq-tutorial-three.html">上一节</a>中，我们创建了一个简单的日志系统（logging system）。我们已经可以广播日志消息到多个接收者了。</p>
<p>在本节中，我们要给它增加一个功能-使它能够只订阅消息的一个子集。比如，只把严重的错误信息写入到日志文件（存储到磁盘）中，但同时仍然会把所有日志信息输出到控制台中。</p>
<h3 id="绑定">绑定</h3><p>在上一节中我们已经创建了绑定（bindings），代码如下：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;queue_bind(<span class="variable">$queue</span>_name,<span class="string">'logs'</span>);</span><br></pre></td></tr></table></figure>
<p>绑定（bindings）是指交换器（exchange）和队列（queue）的关系。可以简单的理解为：这个队列对这个交换器中的消息感兴趣。</p>
<p>绑定的时候可以带一个额外的 routing_key 参数。为了避免与$channel::basic_publish的参数混淆，我们把它叫做 binding_key，所以我们这样使用key创建一个绑定：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$binding</span>_key = <span class="string">'black'</span>;</span><br><span class="line"><span class="variable">$channel-</span>&gt;queue_bind(<span class="variable">$queue</span>_name,<span class="variable">$exchange</span>_name,<span class="variable">$binding</span>_key);</span><br></pre></td></tr></table></figure>
<p>binding key的意义取决于交换器的类型。我们之前使用过的fanout类型的交换器，会忽略这个值。</p>
<h3 id="Direct_交换器">Direct 交换器</h3><p>之前创建的日志系统分发所有消息到所有的消费者。我们打算扩展一下，使它可以过滤严重的消息。比如，我们只想在接收到严重错误的时候才写入到磁盘中，不在警告或普通的消息上浪费磁盘空间。</p>
<p>我们使用的是没有太多扩展性的fanout交换器，它仅能够简单的广播消息。</p>
<p>我们将要使用一个direct交换器代替fanout交换器。路由算法很简单-只有binding key完全匹配routing key的消息会进入队列。</p>
<p>为了说明，考虑如下的场景：</p>
<p><img src="/images/rabbitmq/direct-exchange.png" alt=""></p>
<p>在这个场景中，我们可以看到direct类型的交换器X有两个队列，第一个队列使用orange作为binding key，第二个队列有两个绑定，一个是black另一个是green。</p>
<p>在这个场景中，当routing key为orange的消息发送到交换器，将会被路由到队列Q1。routing key为black或green的消息将会发送到Q2。其他的消息则会被丢弃。</p>
<h3 id="多个绑定">多个绑定</h3><p><img src="/images/rabbitmq/direct-exchange-multiple.png" alt=""></p>
<p>使用相同的binding key绑定多个队列是合法的。在这个例子中，我们会使用black作为binding key为X和Q1之间添加一个绑定。这样一来，direct 交换器就表现得跟fanout交换器一样，分发消息到匹配的队列。routing key为black的消息就会被分发到Q1和Q2。</p>
<h3 id="发送日志">发送日志</h3><p>我们将要对日志系统使用这个模型，我们将要发送消息到一个direct交换器。将日志级别作为routing key。这样一来接收端程序就可以选择它想要接收的消息了。首先来看看发送日志。</p>
<p>和以往一样，需要创建一个交换器：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>然后准备发送消息：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$channel-</span>&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">'direct_logs'</span>,<span class="variable">$severity</span>);</span><br></pre></td></tr></table></figure>
<p>为了简化，我们可以假定’severity’的值可以是’info’,’warning’,’error’中的一个。</p>
<h3 id="订阅">订阅</h3><p>接收消息的脚本会跟之前一样正常工作，但是我们准备为每一个我们感兴趣的日志级别创建一个新的绑定。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach(<span class="variable">$severities</span> <span class="keyword">as</span> <span class="variable">$severity</span>)&#123;</span><br><span class="line">	<span class="variable">$channel-</span>&gt;queue_bind(<span class="variable">$queue</span>_name,<span class="string">'direct_logs'</span>,<span class="variable">$severity</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合">整合</h3><p><img src="/images/rabbitmq/python-four.png" alt=""></p>
<p>emit_log_direct.php类的代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStremConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$severity</span> = <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) ? <span class="variable">$argv</span>[<span class="number">1</span>] : <span class="string">'info'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = implode(<span class="string">' '</span>,array_slice(<span class="variable">$argv</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>)) <span class="variable">$data</span> = “Hello World!”;</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span> = “[x] Sent ”,<span class="variable">$severity</span>,<span class="string">':'</span>,<span class="variable">$data</span>,” \n”;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>receive_logs_direct.php的代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$queue_name</span>, ,) = <span class="variable">$channel</span>-&gt;queue_declare(“”,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$severities</span> = array_slice(<span class="variable">$argv</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$severities</span>))&#123;</span><br><span class="line">	file_put_contents(<span class="string">'php://stderr'</span>,”Usage:<span class="variable">$argv</span>[<span class="number">0</span>][info][warning][error]\n”);</span><br><span class="line">	<span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$severities</span> <span class="keyword">as</span> <span class="variable">$severity</span>)&#123;</span><br><span class="line">	<span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>,<span class="string">'direct_logs'</span>,<span class="variable">$severity</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'[*]Waiting for logs.To exit press CTRL+C'</span>,”\n”;</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$msg</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'[*]'</span>,<span class="variable">$msg</span>-&gt;delivery_info[<span class="string">'routing_key'</span>],<span class="string">':'</span>,<span class="variable">$msg</span>-&gt;body,”\n”;	</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="variable">$queue_name</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$channel</span>-&gt;callbacks))&#123;</span><br><span class="line">	<span class="variable">$channel</span>-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你想只保存’warning’或’error’（而不是’info’）级别的消息，只需要打开命令行输入：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_direct.php <span class="keyword">warning</span> <span class="keyword">error</span> &gt; logs_from_rabbit.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>
<p>如果你想在屏幕上输出所有的消息，打开一个新的终端，输入：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php receive_logs_direct.php info warning error</span><br><span class="line">[*]Waiting <span class="keyword">for</span> logs.To <span class="keyword">exit</span> press CTRL+C</span><br></pre></td></tr></table></figure>
<p>例如，发送error消息，输入：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">php</span> emit_log_direct.php <span class="built_in">error</span> <span class="string">"Run. Run. Or it will explode."</span></span><br><span class="line">[x] Sent <span class="string">'error'</span>:<span class="string">'Run. Run. Or it will explode.'</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log_direct.php" target="_blank" rel="external">emit_log_direct.php源码</a>  <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs_direct.php" target="_blank" rel="external">receive_logs_direct.php源码</a></p>
<p>转到第五节，查看如何监听基于模式的消息。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-php.html" target="_blank" rel="external">Routing</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="路由">路由</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>）<br>在<a href="/]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（三） - 发布/订阅]]></title>
    <link href="http://www.qichengzx.com/2016/04/23/php-rabbitmq-tutorial-three.html"/>
    <id>http://www.qichengzx.com/2016/04/23/php-rabbitmq-tutorial-three.html</id>
    <published>2016-04-23T11:58:17.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="发布/订阅">发布/订阅</h3><p>我们在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">上一节</a>创建了一个工作队列，并假定队列对应的任务传送给了某个客户端。在这一章节我们会做一些完全不一样的东西–我们会发送一条消息到多个消费者，也称之为“发布/订阅”模式。</p>
<p>为了说明这个模式，我们会创建一个简单的日志系统（logging system，以下简称日志系统），它由两个程序组成–第一个是发送日志信息，第二个是接收日志并打印。</p>
<p>日志系统的每一个运行的接收端程序都会接收信息，这样就可以运行一个接收端就把日志保存到硬盘里，同时运行另一个接收端去实时显示日志到屏幕。</p>
<p>本质上，日志内容是广播给所有的接收端的。</p>
<h3 id="交换器">交换器</h3><p>在之前的章节中我们从一个队列里发送和接收消息，现在该把完整的RabbitMQ消息模型介绍给大家了。</p>
<p>让我们快速的回看一遍在之前的章节中的内容：</p>
<pre><code>&gt;生产者是一个用来发送消息的程序

&gt;队列是一个存储消息的缓冲区

&gt;消费者是一个接收消息的程序
</code></pre><p>RabbitMQ消息模型的核心思想是，生产者永远不会直接发送给任何消息队列，实际上，生产者一般情况下甚至不知道消息应该发送给哪个队列。</p>
<p>生产者只能发送消息到交换器中，交换器非常简单。一方面从生产者接收消息，另一方面把消息推送到队列中。交换器必须知道如何处理接收到的消息，是推送到某个队列？推送到多个队列？还是丢弃这条消息。这个规则通过交换器类型(exchange type)来指定。</p>
<p><img src="/images/rabbitmq/exchanges.png" alt=""></p>
<p>这里是交换器的几个类型：direct,topic,headers,fanout。这里我们主要关注最后一个–fanout，创建一个类型为 fanout 的交换器，命名为 logs。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>fanout交换器非常简单，你可以从名称中猜出它的功能，它把所有接收到的消息广播给所有它知道的队列，这也正是我们的日志系统需要的功能。</p>
<h4 id="列出交换器">列出交换器</h4><p>可以使用rabbitmqctl 命令列出服务器上的所有交换器：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_exchanges</span><br><span class="line"></span><br><span class="line">Listing exchanges ...</span><br><span class="line">        direct</span><br><span class="line">amq<span class="class">.direct</span>      direct</span><br><span class="line">amq<span class="class">.fanout</span>      fanout</span><br><span class="line">amq<span class="class">.headers</span>     headers</span><br><span class="line">amq<span class="class">.match</span>       headers</span><br><span class="line">amq<span class="class">.rabbitmq</span><span class="class">.log</span>        topic</span><br><span class="line">amq<span class="class">.rabbitmq</span><span class="class">.trace</span>      topic</span><br><span class="line">amq<span class="class">.topic</span>       topic</span><br><span class="line">logs    fanout</span><br><span class="line">..<span class="class">.done</span>.</span><br></pre></td></tr></table></figure>
<p>结果中有一些amq.*和一些未命名的交换器，这是一些默认创建的交换器，它们不太可能是现在需要用到的。</p>
<h4 id="未命名交换器">未命名交换器</h4><p>在之前的章节中我们对交换器一无所知，直到可以发送消息给队列。大概是因为我们当时正在使用一个以空字符串“”定义的默认的交换器。</p>
<p>回想一下之前怎么发布消息：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">''</span>,<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure>
<p>这里就是使用默认或者说未命名的交换器：消息被routing_key的值<br>Here we use the default or nameless exchange: messages are routed to the queue with the name specified by routing_key, if it exists. The routing key is the second argument to basic_publish</p>
<p>现在，可以发布消息到这个队列。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$channel-</span>&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">'logs'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="临时队列">临时队列</h3><p>也许你还记得在之前我们使用了一个指定的队列（还记得 hello 队列 和 task_queue 队列吗？）。可以命名一个队列是至关重要的–我们需要指定一个worker到同一个队列。当想让生产者和消费者使用同一个队列时给队列命名是非常重要的。</p>
<p>但是在我们的日志系统中情况不同了，我们想要接收所有的消息，不仅仅是其中的一部分，我们关心的是最新的消息而不是旧的，因此需要做两件事。</p>
<p>首先，当连接到RabbitMQ时，需要一个空的队列，可以手动创建一个名字随机的队列，或者，更好的办法是，让服务器为我们随机选一个队列名字。</p>
<p>其次，一旦与消费者失去连接，队列需要自动删除。</p>
<p>在<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>中，当我们创建了一个名字为空的队列时，实际上是创建了一个被生成了名字的非持久化的队列。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>方法执行后，$queue_name变量包含了一个RabbitMQ生成的字符串。比如也许是这样的：amq.gen-JzTY20BRgKO-HjmUJj0wLg。</p>
<p>当连接被关闭的时候，队列也会被删掉，因为队列是独有的。</p>
<h3 id="绑定(Bindlings)">绑定(Bindlings)</h3><p><img src="/images/rabbitmq/bindings.png" alt=""></p>
<p>我们已经创建了一个fanout类型的交换器和一个队列。现在需要让交换器发送消息给队列。交换器和队列之间的关系称之为绑定(binding)</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;queue_bind(<span class="variable">$queue</span>_name,<span class="string">'logs'</span>);</span><br></pre></td></tr></table></figure>
<p>现在开始，logs 交换器会把消息附加到队列中。</p>
<h4 id="列出绑定（Listing_bindings）">列出绑定（Listing bindings）</h4><p>可以使用 rabbitmqctl list_bindings列出所有存在的正在使用的绑定。</p>
<h3 id="整合">整合</h3><p><img src="/images/rabbitmq/python-three-overall.png" alt=""></p>
<p>发送日志消息的生产者，与之前的代码看起来没什么不同，最重要的变化是现在想要发送消息到我们的 logs 交换器中，需要在发送时提供一个routing_key，但是在 fanout类型的交换器中这个值是可以忽略的。下边是emit_log.php的代码。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/verdor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$channel</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = implode(<span class="string">' '</span>,array_slice(<span class="variable">$argv</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>)) <span class="variable">$data</span> = <span class="string">"info:Hello World"</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">'logs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[x]Sent "</span>,<span class="variable">$data</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log.php" target="_blank" rel="external">emit_log.php</a>)</p>
<p>如你所见，建立连接后声明了交换器，这一步是必须的，因为发送消息到一个不存在的交换器是被禁止的。</p>
<p>如果还没有队列绑定到交换器，信息会丢失，但是这对于我们是可以的，如果没有消费者监听，我们可以安全的丢弃消息。</p>
<p>receive_logs.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">QMAPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>,<span class="string">'logs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'[*] Waiting for logs. To exit press CTRL+C'</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$msg</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'[x]'</span>,<span class="variable">$msg</span>-&gt;body,<span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="variable">$queue_name</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line">whild(count(<span class="variable">$channel</span>-&gt;callbacks))&#123;</span><br><span class="line">	<span class="variable">$channel</span>-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs.php" target="_blank" rel="external">receive_logs.php</a>)</p>
<p>如果想保存日志到文件中，可以在命令中输入</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">php</span> <span class="tag">receive_logs</span><span class="class">.php</span> &gt; <span class="tag">logs_from_rabbit</span><span class="class">.log</span></span><br></pre></td></tr></table></figure>
<p>如果想在屏幕上查看日志，新打开一个终端并运行：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">php</span> <span class="tag">receive_logs</span><span class="class">.php</span></span><br></pre></td></tr></table></figure>
<p>发送日志：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">php</span> <span class="tag">emit_log</span><span class="class">.php</span></span><br></pre></td></tr></table></figure>
<p>使用 rabbitmqctl list_bindings 可以确认代码确实创建了绑定和队列，当两个receive_logs.php在运行的时候会看到类似这样的：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_bindings</span><br><span class="line">Listing bindings ...</span><br><span class="line">logs    exchange        amq<span class="class">.gen-JzTY20BRgKO-HjmUJj0wLg</span>  queue           []</span><br><span class="line">logs    exchange        amq<span class="class">.gen-vso0PVvyiRIL2WoV3i48Yg</span>  queue           []</span><br><span class="line">..<span class="class">.done</span>.</span><br></pre></td></tr></table></figure>
<p>对于结果的解释很简单，logs交换器中的数据发送到两个服务器指定的队列，而这正是我们要实现的。</p>
<p>想要弄明白怎样去监听部分消息，转到第四部分。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-php.html" target="_blank" rel="external">Publish/Subscribe</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="发布/订阅">发布/订阅</h3><p>我们在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">上一节</a>创建了一个工作队列，并假定队列对应的任务传送给了某个客户端。在这一章节我们会做一些完全不一样的东西]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（二） - 工作队列]]></title>
    <link href="http://www.qichengzx.com/2016/04/17/php-rabbitmq-tutorial-two.html"/>
    <id>http://www.qichengzx.com/2016/04/17/php-rabbitmq-tutorial-two.html</id>
    <published>2016-04-17T06:39:30.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="工作队列">工作队列</h3><h5 id="（使用php-amqplib库）">（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>库）</h5><p><img src="/images/rabbitmq/python-two.png" alt=""></p>
<p>在本教程<a href="/2016/02/28/php-rabbitmq-tutorial-one.html">第一部分</a> 我们已经写完了从一个指定队列发送和接收消息的程序。在这一章节中，我们会创建一个工作队列（Work Queue）来分发耗时的任务给多个工作者（worker）。</p>
<p>工作队列（也被称为 任务队列-task queue）主要是避免立即执行资源密集型任务并且还要等待它执行完毕。相反，需要让任务稍后执行，我们把一个任务当做一条信息发送给队列，后台运行的工作者（worker）会取出任务并执行，当运行多个worker时任务会在它们之间共享。</p>
<p>这个概念在web应用中非常有用，可以在短暂的HTTP请求期间处理一些复杂的任务。</p>
<h3 id="准备工作">准备工作</h3><p>在前面的部分我们发送了一条内容为“Hello World”的信息，现在我们会发送一些字符串，把这些字符串当做复杂的任务，我们并没有一个实际的任务，像是图片缩放，或者转换PDF文件，所以我们使用sleep方法来假设任务很繁忙。我们会在字符串中加入一些“.”来表示复杂复杂程度；每一个“.”表示需要耗时1秒，比如，“Hello …”代表需要耗时3秒。</p>
<p>我们从上一节的基础上稍微改动了一下send.php，来允许消息可以从命令行发送，这个程序会发送任务到队列中，把它命名为new_task.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = impllode(<span class="string">' '</span>,array_slice(<span class="variable">$argv</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>))<span class="variable">$data</span> = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(<span class="variable">$data</span>,</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>)<span class="comment">#设置消息持久化，下边会讲到。</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">''</span>,<span class="string">'task_queue'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[x] Sent "</span>,<span class="variable">$data</span>,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure>
<p>上一节的receive.php也需要一些改动：需要为消息中的每一个“.”模拟1秒的工作。它会从队列中取出消息并运行，把它命名为worker.php：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$callback</span> = <span class="keyword">function</span>(<span class="variable">$msg</span>)&#123;</span><br><span class="line">	echo <span class="string">"[x] Received "</span>,<span class="variable">$msg-</span>&gt;body,<span class="string">"\n"</span>;</span><br><span class="line">	sleep(substr_count(<span class="variable">$msg-</span>&gt;body,<span class="string">'.'</span>));</span><br><span class="line">	echo <span class="string">"[x] Done"</span>,<span class="string">"\n"</span>;</span><br><span class="line">	<span class="variable">$msg-</span>&gt;delivery_info[<span class="string">'channel]-&gt;basic_ack($msg-&gt;delivery_info['</span>delivery_tag<span class="string">']);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_gos(null,1,null);</span><br><span class="line">$channel-&gt;basic_consume('</span>task_queue<span class="string">','',false,false,false,false,$callback);</span></span><br></pre></td></tr></table></figure>
<p>注意我们伪造的任务需要花费时间（即发送的字符串中要有一些”.”）</p>
<p>然后运行：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php new_task<span class="class">.php</span> <span class="string">"A very hard task which takes two seconds.."</span></span><br><span class="line">php wordker.php</span><br></pre></td></tr></table></figure>
<h3 id="轮询分发">轮询分发</h3><p>使用工作队列的一个好处就是它能够并行的处理队列。如果有太多工作需要处理，只需要添加新的worker就可以了。</p>
<p>首先，我们试着同时运行两个worker.php，它们都会从队列接收到消息，但是到底是不是这样呢？我们看一下。</p>
<p>此时需要打开3个终端，其中两个运行worker.php，这两个就是我们的消费者 - C1和C2。</p>
<p>shell1</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php worker.php</span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages. <span class="keyword">To</span> <span class="keyword">exit</span> press CTRL+C</span><br></pre></td></tr></table></figure>
<p>shell2</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php worker.php</span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages. <span class="keyword">To</span> <span class="keyword">exit</span> press CTRL+C</span><br></pre></td></tr></table></figure>
<p>在第三个终端中我们会发送新的任务，消费者程序开始运行后就可以发送一些消息了。</p>
<p>shell3</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php new_task<span class="class">.php</span> First message.</span><br><span class="line">php new_task<span class="class">.php</span> Second message..</span><br><span class="line">php new_task<span class="class">.php</span> Third message...</span><br><span class="line">php new_task<span class="class">.php</span> Fourth message....</span><br><span class="line">php new_task<span class="class">.php</span> Fifth message.....</span><br></pre></td></tr></table></figure>
<p>我们看一下发送给worker的是什么:</p>
<p>shell1</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php worker<span class="class">.php</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages<span class="class">.To</span> exit press CTRL+C</span><br><span class="line">[x]Received <span class="string">'First message.'</span></span><br><span class="line">[x]Received <span class="string">'Third message...'</span></span><br><span class="line">[x]Received <span class="string">'Fifth message.....'</span></span><br></pre></td></tr></table></figure>
<p>shell2</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php worker<span class="class">.php</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages<span class="class">.To</span> exit press CTRL+C</span><br><span class="line">[x]Received <span class="string">'Second message.'</span></span><br><span class="line">[x]Received <span class="string">'Fourth message...'</span></span><br></pre></td></tr></table></figure>
<p>RabbitMQ会默认按顺序把消息发送给下一个消费者，平均每个消费者都会得到一样多数量的消息，这种分发消息的方式叫做轮询。试着添加三个或更多个worker来运行。</p>
<h3 id="消息响应">消息响应</h3><p>执行一个任务会消耗一定的时间，也许你想知道如果一个消费者在执行一个耗时较长的任务时但是在执行一部分的时候挂掉会发生什么。在我们当前的代码中，一旦RabbitMQ把消息分发给消费者便会立即从内存中移除。这种情况下，如果停止一个worker，它正在处理的消息就会丢失。同时其他所有发送给这个worker的还没有处理的消息也会丢失。</p>
<p>但是我们不想丢失任何任务，如果一个worker挂掉，需要把任务发送到另一个worker。</p>
<p>为了确保消息永不丢失，RabbitMQ支持消息响应（message acknowledgements），消费者会发送一个响应告诉RabbitMQ已经收到了某条消息，并且已经处理，这样RabbitMQ就可以删掉它了。</p>
<p>如果一个消费者程序在未发送响应之前挂掉了（频道关闭，链接关闭，或者TCP连接丢失），RabbitMQ会认为消息没有完全处理然后会重新推送到队列中。如果此时有其他的消费者程序在运行，RabbitMQ会很快把消息发送给另一个消费者。这样就可以确保消息不会丢失，即使worker偶尔挂掉。</p>
<p>消息是没有超时的概念的，当worker断开连接的时候，RabbitMQ会重新发送消息，这样在处理一个耗时较长的消息任务时就不会出现问题了。</p>
<p>消息响应默认是关闭的。可以通过设置basic_consume的第四个参数为false(true表示不开启应答)，然后在处理完任务的时候从worker发送一个正确的响应内容。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$msg</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[x] Received "</span>,<span class="variable">$msg</span>-&gt;body,<span class="string">"\n"</span>;</span><br><span class="line">	sleep(substr_count(<span class="variable">$msg</span>-&gt;body,<span class="string">'.'</span>));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[x] Done"</span>,<span class="string">"\n"</span>;</span><br><span class="line">	<span class="variable">$msg</span>-&gt;delivery_info[<span class="string">'channel]-&gt;basic_ack($msg-&gt;delivery_info['</span>delivery_tag]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="string">'task_queue'</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="variable">$callback</span>);</span><br></pre></td></tr></table></figure>
<p>这样我们就可以确保当你CTRL+C杀掉一个正在处理消息的worker的时候，消息并不会丢失。在这个worker挂掉之后，所有未响应的消息就会发送。</p>
<h3 id="忘了响应">忘了响应</h3><p>一个很容易犯的错误就是忘了basic_ack，后果很严重。消息会在程序退出后重新发送（可能看起来像是随机返还 原文：which may look like random redelivery），但是如果它不释放未响应的消息，RabbitMQ就会占用越来越多的内存。</p>
<p>为了排除这种错误可以使用rabbitmqctl来打印messages_unacknowledges字段：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br><span class="line"></span><br><span class="line">Listing queues ...</span><br><span class="line">hello    <span class="number">0</span>       <span class="number">0</span></span><br><span class="line">...done.</span><br></pre></td></tr></table></figure>
<h3 id="消息持久化">消息持久化</h3><p>我们已经学习了确保即使消费者程序挂掉，任务也不会丢失。但是任务还是会在RabbitMQ服务停止的时候丢失。</p>
<p>当RabbitMQ退出或崩溃，它会丢失之前所有的队列和消息，除非你特意告诉它。所以我们必须把队列和消息设为持久化。</p>
<p>首先，为了队列不丢失，需要把它声明为<i>持久化（durable）</i>，所以修改queue_declare的第三个参数为true：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;queue_declare(<span class="string">'hello'</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>尽管这行代码本身是正确的，但是仍然不会正确运行。因为在之前已经定义过一个非持久化的 hello 队列。RabbitＭＱ不允许使用不同参数重新定义一个已经存在的队列，它会返回一个错误。但是可以用一个快捷的方法去解决，定义一个不同名字的队列，比如 task_queue：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>需要把生产者和消费者程序都设置为 true。</p>
<p>这时候，我们就可以确保在RabbitMQ重启之后task_queue队列不会丢失。现在需要设置消息持久化了 - 通过设置AMQPMessage的属性数组中消息属性 delivery_mode = 2来达到。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$msg</span> = new AMQPMessage(<span class="variable">$data</span>,</span><br><span class="line">		<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>) //设置消息持久化</span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
<h3 id="关于消息持久化的说明">关于消息持久化的说明</h3><p>设置消息持久化并不能完全保证消息不会丢失。这只是告诉让RabbitMQ要把消息保存到硬盘，但是从RabbitMQ接收到消息到保存完成仍然还有一个短暂的间隔时间。因为RabbitMQ并不是每一条消息都会使用fsync(2)，可能只是保存到缓存中而不是真正的写到磁盘里。并不能保证消息真正的持久化，但是对于简单的工作队列已经足够了。如果你需要更健壮的持久化，可以使用<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="external">publisher confirms</a>机制。</p>
<h3 id="公平分发">公平分发</h3><p>也许你注意到它仍没有像我们想的那样去派发任务，比如在两个worker的情况下，处理奇数消息的比较繁忙，处理偶数消息的比较轻松，一个worker不断的忙碌而另一个几乎不需要工作，但是RabbitmQ并不知道这些，并且继续一如既往的派发消息。</p>
<p>这是因为RabbitMQ在消息进入队列的时候只管去派发，并不管消费者未做出响应的消息数。它只是把每第n条消息发送给第n个消费者。</p>
<p>我们可以使用basic_qos方法，并设置prefetch_count = 1。这样是告诉RabbitMQ在同一时刻不要发送超过1条消息给一个worker，或者说，不要发送新的消息给worker直到它已处理完上一条消息并作出了响应。这样，它就会把消息发送给下一个空闲的worker了。</p>
<p><img src="/images/rabbitmq/prefetch-count.png" alt=""></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;basic_qos(null,<span class="number">1</span>,null);</span><br></pre></td></tr></table></figure>
<h3 id="注意队列长度">注意队列长度</h3><p>如果所有的worker都处于忙碌状态，队列就会填满，你需要留意，添加更多的worker，或者使用其他的策略。</p>
<h3 id="整合">整合</h3><p>最终，new_task.php的代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/verdor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = implode(<span class="string">' '</span>,array_slice(<span class="variable">$argv</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>)) <span class="variable">$data</span> = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(<span class="variable">$data</span>,</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>) <span class="comment">// 消息持久化</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">''</span>,<span class="string">'task_queue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[x]Sent "</span>, <span class="variable">$data</span>, <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/new_task.php" target="_blank" rel="external">new_task.php源码</a></p>
<p>worker.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span> = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection</span>-&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'[*] Waiting for messages.To exit press CTRL+C'</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$msg</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[x]Received "</span>,<span class="variable">$msg</span>-&gt;body,<span class="string">"\n"</span>;</span><br><span class="line">	sleep(substr_count(<span class="variable">$msg</span>-&gt;body,<span class="string">'.'</span>));</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[x]Done"</span>,<span class="string">"\n"</span>;</span><br><span class="line">	<span class="variable">$msg</span>-&gt;delivery_info[<span class="string">'chennel'</span>]-&gt;basic_ack(<span class="variable">$msg</span>-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_qos(<span class="keyword">null</span>,<span class="number">1</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_consume(<span class="string">'task_queue'</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$channel</span>-&gt;callbacks))&#123;</span><br><span class="line">	<span class="variable">$channel</span>-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel</span>-&gt;close();</span><br><span class="line"><span class="variable">$connection</span>-&gt;close();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/worker.php" target="_blank" rel="external">worker.php</a></p>
<p>使用消息应答和prefetch_count=1后，就可以运行一个工作队列了，持久模式选项会在即使RabbitMQ重启的情况下保留任务。</p>
<p>现在我们可以继续学习第三部分的内容，学习如何发送相同的消息给多个消费者。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-two-php.html" target="_blank" rel="external">Work queues</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="工作队列">工作队列</h3><h5 id="（使用php-amqplib库）">（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（一） - 介绍]]></title>
    <link href="http://www.qichengzx.com/2016/02/28/php-rabbitmq-tutorial-one.html"/>
    <id>http://www.qichengzx.com/2016/02/28/php-rabbitmq-tutorial-one.html</id>
    <published>2016-02-28T03:10:03.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><h3 id="先决条件">先决条件</h3><p>本教程先决条件是RabbitMQ已经安装并正在以5672端口运行在 localhost，如果你使用了不同的域，端口，用户，密码，连接配置需要适当改变。</p>
<h3 id="获得帮助">获得帮助</h3><p>如果在本教程中遇到问题，可以通过邮件列表进行联系。</p>
<h3 id="介绍">介绍</h3><p>RabbitMQ是一个消息代理，它的本质是，从producers（生产者）接收消息，然后发送给consumers（消费者），在这个过程中，可以根据自己的配置规则使用路由，缓冲区，保存消息。</p>
<p>通常的，RabbitMQ，信息传送（messaging），使用一些专业术语。（RabbitMQ, and messaging in general, uses some jargon.）</p>
<pre><code>&gt;生产（Producing）仅仅意味着发送，发送信息的程序叫做生产者（producers），以下图表示：
</code></pre><p><img src="/images/rabbitmq/producer.png" alt=""></p>
<pre><code>&gt;队列就是一个信箱的名字，存在于RabbitMQ内部，虽然消息在RabbitMQ和你的应用之间传输，但是只能存在于队列里，队列没有大小限制，它可以存储尽可能多的消息，本质上它是一个无限大的缓冲区，多个producers（生产者）可以通过一个队列发送消息，多个consumers（消费者）也可以尝试从一个队列接收消息，队列以下图表示，队列的名字在图的上边：
</code></pre><p><img src="/images/rabbitmq/queue.png" alt="">    </p>
<pre><code>&gt;consumers（消费者）的意思与接收相似，消费者主要是等待接收消息的程序，以下图表示：
</code></pre><p><img src="/images/rabbitmq/consumer.png" alt="">    </p>
<p>需要注意的是，生产者，消费者，和代理，不需要一定在一台机器上，事实上在大多数情况下他们确实不在一台机器上。</p>
<h3 id="“Hello_World”">“Hello World”</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>库）</p>
<p>在这一部分，我们使用PHP写两段程序，一个生产者发送一条消息，一个消费者接收消息并打印出来。我们会忽略一些php-amqplib API的细节，从简单的事情开始学习，这是一段内容为“Hello World”的消息。</p>
<p>在下边的示意图中，“P”是生产者，“C”是消费者，中间的盒子是队列 — 一个RabbitMQ代表消费者的消息缓冲区。</p>
<p><img src="/images/rabbitmq/python-one.png" alt=""></p>
<h4 id="php-amqplib库">php-amqplib库</h4><p>RabbitMQ支持很多协议，本教程包含AMQP 0-9-1，一个开放，通用信息协议，RabbitMQ支持Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等多种语言（详见<a href="http://www.rabbitmq.com/devtools.html" target="_blank" rel="external">这里</a>），在本教程中我们使用php-amqplib，使用<a href="https://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">Composer</a> 管理依赖。</p>
<p>添加一个composer.json文件到你的项目目录。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">require</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">php-amqplib/php-amqplib</span>": <span class="value"><span class="string">"2.5.*"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果你已经安装了 Composer ，可以运行如下的代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer<span class="class">.phar</span> install</span><br></pre></td></tr></table></figure>
<p>这是一个Windows系统下的Composer安装文件。</p>
<p>现在我们已经安装了php-amqplib，可以写程序了。</p>
<h3 id="发送">发送</h3><p><img src="/images/rabbitmq/sending.png" alt=""></p>
<p>新建一个send.php作为发送端，receive.php作为接收端，发送端会连接RabbitMQ，发送一条信息，然后退出。</p>
<p>在send.php中，需要引用php-amqplib库，和使用其中的一些必要的类。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br></pre></td></tr></table></figure>
<p>接下来，建立到RabbitMQ服务器的连接：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$connection</span> = new AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection-</span>&gt;channel();</span><br></pre></td></tr></table></figure>
<p>这里我们使用socket进行连接，处理协议和鉴定，这样就已经连接到了本机的代理，如果想要连接不同的主机，只要更改localhost为该主机的名称或IP地址即可。</p>
<p>下一步，建立频道，大部分API的工作都在这完成。</p>
<p>要想发送信息，需要声明一个队列，之后可以向这个队列里发布消息。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;queue_declare(<span class="string">'hello'</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span> = new AMQPMessage(<span class="string">'Hello World!'</span>);</span><br><span class="line"><span class="variable">$channel-</span>&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">''</span>, <span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">echo <span class="string">" [x] Sent 'Hello World!'\n"</span>;</span><br></pre></td></tr></table></figure>
<p>声明队列是幂等的 — 它仅在不存在的时候才会被创建，如果存在也不会受影响。消息内容是一个字节数组（byte array），所以可以发送任何内容。</p>
<p>最后，关闭频道和连接。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$channel-</span>&gt;close();</span><br><span class="line"><span class="variable">$connection-</span>&gt;close();</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/send.php" target="_blank" rel="external">这是send.php类的完整内容。</a></p>
<h3 id="发送失败">发送失败</h3><p>如果这是第一次使用RabbitMQ，并且没有看到“Sent”信息（即“ [x] Sent ‘Hello World!”），也许你抓耳挠腮的想知道为什么出错了，也许是代理没有足够的硬盘空间（默认情况下需要至少1G的空间）导致拒绝接收信息。检查日志文件，有必要的花调低限值。<a href="http://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="external">这个配置文件</a>文档将会展示给你如何设置disk_free_limit。</p>
<h3 id="接收">接收</h3><p>收件人，与发送者只发送一条消息不同，接收者会一直运行以监听信息并输出。</p>
<p><img src="/images/rabbitmq/receiving.png" alt=""></p>
<p>receive.php中与send.php中的 include和use 部分的代码一样。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br></pre></td></tr></table></figure>
<p>设置连接与send.php一样，打开连接和频道，命名一个队列，需要注意的是，队列名需要与send.php所发布的队列的名字一致。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$connection</span> = new AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line"><span class="variable">$channel</span> = <span class="variable">$connection-</span>&gt;channel();</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel-</span>&gt;queue_declare(<span class="string">'hello'</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">echo <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure>
<p>注意，我们在此声明了一个队列，因为有可能会在send程序开启前先开启receive程序，我们想要确保在试着接收消息之前队列就已经存在了。</p>
<p>下一步，告诉服务器去从队列传送消息，我们会定义一个用于从服务器接收消息的函数，记住，消息会异步的从服务器发送到客户端。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$callback</span> = <span class="keyword">function</span>(<span class="variable">$msg</span>) &#123;</span><br><span class="line">  echo <span class="string">" [x] Received "</span>, <span class="variable">$msg-</span>&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$channel-</span>&gt;basic_consume(<span class="string">'hello'</span>, <span class="string">''</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="variable">$callback</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$channel-</span>&gt;callbacks)) &#123;</span><br><span class="line">    <span class="variable">$channel-</span>&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处使用while方法，当收到消息时，会把收到的消息传入到$callback方法里。</p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive.php" target="_blank" rel="external">这是receive.php类的全部内容。</a></p>
<p>现在我们可以运行两段脚本了，在命令行里，执行sender程序。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php <span class="built_in">send</span>.php</span><br></pre></td></tr></table></figure>
<p>然后，执行receiver程序</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">php</span> <span class="tag">receive</span><span class="class">.php</span></span><br></pre></td></tr></table></figure>
<p>receiver程序会把通过sender程序发送的内容打印出来，receiver程序会一直运行，监听新消息（使用ctrl+c停止），所以试着运行sender程序从另一个命令行。</p>
<p>如果想查看队列，可以运行rabbitmqctl list_queues。</p>
<p>Hello World！</p>
<p>查看第二部分，建立一个简单的队列。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-php.html" target="_blank" rel="external">“Hello World!”</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="准备工作">准备工作</h2><h3 id="先决条件">先决条件</h3><p>本教程先决条件是RabbitMQ已经安装并正在以5672端口运行在 localhost，如果你使用了不同的域，端口，用户，密码，连接配置需要适当改变。</p>
<h3 id="获得帮]]>
    </summary>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="http://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一段有意思的JS For循环代码]]></title>
    <link href="http://www.qichengzx.com/2016/02/25/a-piece-of-interesting-code-of-js-for-function.html"/>
    <id>http://www.qichengzx.com/2016/02/25/a-piece-of-interesting-code-of-js-for-function.html</id>
    <published>2016-02-25T09:10:43.000Z</published>
    <updated>2016-02-25T09:16:54.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (var i =<span class="number">0</span>,j =<span class="number">0</span>; i &lt;<span class="number">10</span>,j&lt;<span class="number">6</span>;i++,j++) &#123;</span><br><span class="line">	a = i+j;</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="string">"i="</span>+i);</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="string">"j="</span>+j);</span><br><span class="line">	console.<span class="built_in">log</span>(<span class="string">"a="</span>+a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>朋友面试，遇到的面试题，电话跟我说完就回来写下来试了一下，结果与自己预想的一样。</p>
<p>没写之前，电话里说的思路是，因为 j 限制了 小于 6，那么应该只循环6次，实际上也确实是这样。</p>
<p>所以最终结果，a = 10。</p>
<h6 id="但是想不明白为什么会有这样的面试题，或者说，什么样的情况会需要写这样的代码呢？">但是想不明白为什么会有这样的面试题，或者说，什么样的情况会需要写这样的代码呢？</h6>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="]]>
    </summary>
    
      <category term="js" scheme="http://www.qichengzx.com/tags/js/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL实现row_number第二部分]]></title>
    <link href="http://www.qichengzx.com/2016/02/24/MySql-row_number-part-2.html"/>
    <id>http://www.qichengzx.com/2016/02/24/MySql-row_number-part-2.html</id>
    <published>2016-02-24T09:58:24.000Z</published>
    <updated>2016-02-25T03:35:21.000Z</updated>
    <content type="html"><![CDATA[<p>接上篇：<a href="https://www.qichengzx.com/2016/02/03/MySQL%E5%AE%9E%E7%8E%B0row_number%20.html">MySQL实现row_number</a></p>
<h3 id="为分组增加row_number">为分组增加row number</h3><p>row_number的分析函数怎么样？（原文：How about  row_number “over partition by” functionality? ），比如，如果想为每一个组增加row number，并且在每一个新的分组重置它。</p>
<p>查看下图中payments表。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">    customerNumber, paymentDate, amount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payments</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> customerNumber;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql-row-number/mysql-row_number-payments-table.jpg" alt=""></p>
<p>设想下，为每一条customer数据增加一个当前行的编号，并且每当customer的number字段变化的时候行编号都被重置。</p>
<p>为了实现这个，需要使用两个临时变量，一个作为当前行编号，另一个用来存 上一条customer number与当前行的number进行对比，查询语句如下。（这句有点绕，可能翻译的不太准确，请以原文为准。To achieve this, you have to use two session variables, one for the row number and the other for storing the old customer number to compare it with the current one as the following query:）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> </span><br><span class="line">    @row_number:=<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> @customer_no = customerNumber <span class="keyword">THEN</span> @row_number + <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">num</span>,</span><br><span class="line">    @customer_no:=customerNumber <span class="keyword">as</span> CustomerNumber,</span><br><span class="line">    paymentDate,</span><br><span class="line">    amount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payments</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> customerNumber;</span></span><br></pre></td></tr></table></figure>
<p>在这段查询代码中，我们使用了CASE声明，如果customer的number不变，就给row_number变量+1，否则，重置为1，结果如下：</p>
<p><img src="/images/mysql-row-number/mysql-row_number-per-group.jpg" alt=""></p>
<p>与为每一行记录生成row_number一样，也可以使用派生表（derived table）和交叉连接（cross join）生成同样的结果。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> </span><br><span class="line">    @row_number:=<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> @customer_no = customerNumber <span class="keyword">THEN</span> @row_number + <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">num</span>,</span><br><span class="line">    @customer_no:=customerNumber <span class="keyword">as</span> CustomerNumber,</span><br><span class="line">    paymentDate,</span><br><span class="line">    amount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payments,(<span class="keyword">SELECT</span> @customer_no:=<span class="number">0</span>,@row_number:=<span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">t</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> customerNumber;</span></span><br></pre></td></tr></table></figure>
<p>本教程中，我们展示了如何在MySQL中模仿row_number方法。</p>
<p>原文地址：<a href="http://www.mysqltutorial.org/mysql-row_number/" target="_blank" rel="external">MySQL row_number, This Is How You Emulate It</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>接上篇：<a href="https://www.qichengzx.com/2016/02/03/MySQL%E5%AE%9E%E7%8E%B0row_number%20.html">MySQL实现row_number</a></p>
<h3 id="为分组增加row_n]]>
    </summary>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.qichengzx.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL实现row_number]]></title>
    <link href="http://www.qichengzx.com/2016/02/03/MySQL%E5%AE%9E%E7%8E%B0row_number%20.html"/>
    <id>http://www.qichengzx.com/2016/02/03/MySQL实现row_number .html</id>
    <published>2016-02-03T10:25:26.000Z</published>
    <updated>2016-02-03T10:27:20.000Z</updated>
    <content type="html"><![CDATA[<p>在本教程中，我们将在MySQL中实现一个非常实用的row_number功能。</p>
<p>row_number是一个返回数据排序编号的排名方法，从1开始。我们经常需要用到row_number去生成某些报表，不幸的是，MySQL并不像MSSQL，Oracle一样支持这个方法。在MySQL中如果想实现这个功能需要临时变量。</p>
<p>为了在MySQL中实现row_number，需要在查询中实用临时变量，下图中从employees表中查询出5条数据，并且从1开始，为每一行添加了编号(row number)。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SET</span> @row_number = <span class="number">0</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span> </span><br><span class="line">    (@row_number:=@row_number + <span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">num</span>, firstName, lastName</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/mysql-row_number-session-variables.jpg" alt=""></p>
<p>在上面的查询中：</p>
<pre><code>首先，我们定义了一个变量叫做row_number,初始值为<span class="number">0</span>，row_number是以@为前缀的一个临时变量。

然后，在查询中，我们为这个变量每次+<span class="number">1</span>，LIMIT分句是为了限制返回的结果数，此处设为<span class="number">5.</span>
</code></pre><p>另一个方法是使用临时变量作为派生表，联合主表。看下边的查询语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> </span><br><span class="line">    (@row_number:=@row_number + <span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">num</span>, firstName, lastName</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees,(<span class="keyword">SELECT</span> @row_number:=<span class="number">0</span>) <span class="keyword">AS</span> <span class="keyword">t</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span></span><br></pre></td></tr></table></figure>
<p>需要注意，派生表必须使用别名，以使查询语句在语法上没有问题。</p>
<p>由于时间关系（回家过年），暂时到这里，文中部分内容可能翻译的有点不太顺，可以直接看下原文，原文中还有一部分讲分组查询中实用row_number。</p>
<p>这个之后再写。</p>
<p>原文地址：<a href="http://www.mysqltutorial.org/mysql-row_number/" target="_blank" rel="external">MySQL row_number, This Is How You Emulate It</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在本教程中，我们将在MySQL中实现一个非常实用的row_number功能。</p>
<p>row_number是一个返回数据排序编号的排名方法，从1开始。我们经常需要用到row_number去生成某些报表，不幸的是，MySQL并不像MSSQL，Oracle一样支持这个方法]]>
    </summary>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.qichengzx.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECharts饼图示例]]></title>
    <link href="http://www.qichengzx.com/2016/01/19/echarts-pie.html"/>
    <id>http://www.qichengzx.com/2016/01/19/echarts-pie.html</id>
    <published>2016-01-19T13:27:00.000Z</published>
    <updated>2016-01-19T14:25:04.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/BEEC6560-EC03-4027-969D-DBB584A47E69.png" alt=""></p>
<p>今天写一个做地区分布的饼图的东西。</p>
<p>由于数据库里本身没有存储地区数据，只有IP，所以也用到了<a href="http://www.ipip.net/" target="_blank" rel="external">高春辉老师目前的项目</a>里提供的IP地址数据库。可以在数据库下载页面下载到免费的数据库文件和一个PHP处理类。</p>
<p>还用到了百度团队开源的<a href="http://echarts.baidu.com/index.html" target="_blank" rel="external">ECharts</a>，很简单很好用。</p>
<p>其实事情本身并没有难度。</p>
<h3 id="约定">约定</h3><p>默认为：此时已有一个静态页面，并且已引入echarts的js文件。</p>
<h3 id="先读取数据">先读取数据</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT id,ips FROM table order by id desc limit 100000"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pdo</span> = new PDO(<span class="string">'mysql:host=127.0.0.1;dbname=db1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$pdo</span> -&gt; query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$query-</span>&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable">$query-</span>&gt;fetchAll();</span><br></pre></td></tr></table></figure>
<h3 id="根据IP得出所在地信息">根据IP得出所在地信息</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">include <span class="string">'./IP.class.php'</span>;//ipip.net提供的IP处理类</span><br><span class="line"><span class="variable">$IP</span> = new IP();</span><br><span class="line">foreach (<span class="variable">$rs</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">	<span class="variable">$a</span> = <span class="variable">$IP-</span>&gt;find(<span class="variable">$value</span>[<span class="string">"ips"</span>]);</span><br><span class="line">	<span class="variable">$arr</span>[<span class="variable">$key</span>] = <span class="variable">$a</span>[<span class="number">1</span>].<span class="variable">$a</span>[<span class="number">2</span>]; //正确的IP返回的数据为:Array ( [<span class="number">0</span>] =&gt; 中国 [<span class="number">1</span>] =&gt; 黑龙江 [<span class="number">2</span>] =&gt; 鹤岗 [<span class="number">3</span>] =&gt; ) ,这里根据实际情况取对应字段即可。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成echarts所需的数据">生成echarts所需的数据</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = array_count_values(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>
<p>嗯，一个非常简单粗暴的把同名地区数量算出来的方法。这样就生成了如array(‘北京’=&gt;2,’天津’=&gt;3)这样的数据。正是echarts所需的。</p>
<h3 id="饼图区域">饼图区域</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"main"</span> style=<span class="string">"width: 1400px;height:1400px;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="正经的JS来了">正经的JS来了</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var myChart = echarts.init(document.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line">var <span class="keyword">option</span> = &#123;</span><br><span class="line">      </span><br><span class="line">       title : &#123;</span><br><span class="line">        text: <span class="string">'IP分布地区'</span>,</span><br><span class="line">        x:<span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip : &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span>,</span><br><span class="line">        formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        //简单起见此处直接foreach了</span><br><span class="line">        data: [&lt;?php foreach (<span class="variable">$keys</span> as <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123; echo <span class="string">'"'</span>.<span class="variable">$value</span>.<span class="string">'",'</span>; &#125;?&gt;]</span><br><span class="line">    &#125;,</span><br><span class="line">    series : [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'IP所在地区'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            radius : <span class="string">'40%'</span>,</span><br><span class="line">            center: [<span class="string">'50%'</span>, <span class="string">'60%'</span>],</span><br><span class="line">            data:[</span><br><span class="line">            	//同上，</span><br><span class="line">            	&lt;?php </span><br><span class="line">            		//reset(<span class="variable">$data</span>);</span><br><span class="line">					while (list(<span class="variable">$key</span>, <span class="variable">$val</span>) = each(<span class="variable">$data</span>))&#123;</span><br><span class="line">						echo <span class="string">'&#123;value:'</span>.<span class="variable">$val</span>.<span class="string">',name:"'</span>.<span class="variable">$key</span>.<span class="string">'"&#125;,'</span>;</span><br><span class="line">					&#125;</span><br><span class="line">            	?&gt;</span><br><span class="line">            ],</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                emphasis: &#123;</span><br><span class="line">                    shadowBlur: <span class="number">10</span>,</span><br><span class="line">                    shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">                    shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   // 使用刚指定的配置项和数据显示图表。</span><br><span class="line">   myChart.setOption(<span class="keyword">option</span>);</span><br></pre></td></tr></table></figure>
<p>打开页面看一下吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/BEEC6560-EC03-4027-969D-DBB584A47E69.png" alt=""></p>
<p>今天写一个做地区分布的饼图的东西。</p>
<p>由于数据库里本身没有存储地区数据，只有IP，所以也用到了<a href="]]>
    </summary>
    
      <category term="ECharts" scheme="http://www.qichengzx.com/tags/ECharts/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/tags/javascript/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单的input获得焦点时的小动画效果]]></title>
    <link href="http://www.qichengzx.com/2016/01/11/placeholder-animate.html"/>
    <id>http://www.qichengzx.com/2016/01/11/placeholder-animate.html</id>
    <published>2016-01-11T13:42:58.000Z</published>
    <updated>2016-01-12T13:33:24.000Z</updated>
    <content type="html"><![CDATA[<p>以前经常见到的一种页面表单效果，但是并没有在项目中用过，前几天在sf上看到相关问题，顺手写了一个，还挺简单，没什么含量。</p>
<p>此处省略HTML头信息等内容。</p>
<h3 id="HTML">HTML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"uname"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CSS">CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value">relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">input</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">200px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span> <span class="number">3px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"><span class="number">1px</span> solod <span class="hexcolor">#666</span></span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">label</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">5px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#ccc</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">30px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">30px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="JS">JS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'focus'</span>,<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).siblings(<span class="string">'label'</span>).animate(&#123;top:<span class="string">'-20px'</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'focusout'</span>,<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).siblings(<span class="string">'label'</span>).animate(&#123;top:<span class="string">'0'</span>&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="RESULT">RESULT</h3><iframe width="100%" height="300" src="//jsfiddle.net/qichengzx/zc91Lyx7/8/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="不足">不足</h3><p>没有考虑label的鼠标点击事件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以前经常见到的一种页面表单效果，但是并没有在项目中用过，前几天在sf上看到相关问题，顺手写了一个，还挺简单，没什么含量。</p>
<p>此处省略HTML头信息等内容。</p>
<h3 id="HTML">HTML</h3><figure class="highlight x]]>
    </summary>
    
      <category term="input" scheme="http://www.qichengzx.com/tags/input/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/tags/javascript/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[crontab实现定时备份数据库]]></title>
    <link href="http://www.qichengzx.com/2016/01/10/backup-database-with-crontab.html"/>
    <id>http://www.qichengzx.com/2016/01/10/backup-database-with-crontab.html</id>
    <published>2016-01-10T10:52:55.000Z</published>
    <updated>2016-04-23T12:07:24.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/backup-database-with-crontab/crontab.jpg" alt=""></p>
<p>crontab命令之前写过了，在<a href="http://segmentfault.com/a/1190000003953826" target="_blank" rel="external">Linux crontab 访问PHP URL完成定时任务</a>，今天写了一个用来备份数据库的脚本。</p>
<p>主要会用到以下几个命令：</p>
<h4 id="mysqldump">mysqldump</h4><p>参考文章：<a href="http://blog.csdn.net/shellching/article/details/8129687" target="_blank" rel="external">mysqldump导入导出数据库总结 </a></p>
<h4 id="创建-sh文件：">创建.sh文件：</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line"><span class="keyword">vi</span> backup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>backup.sh内主要内容如下：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hlocalhost -uroot -p'root' --databases database1 | gzip &gt; /var/backups/databases-database1<span class="escape">`d</span>ate +'<span class="var_expand">%Y%</span>m<span class="var_expand">%d_%</span>H<span class="var_expand">%M%</span>S'<span class="escape">`.</span>sql.gz</span><br></pre></td></tr></table></figure>
<p>首先用mysqldump命令</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>连接数据库</span><br><span class="line"><span class="number">2.</span>选择要备份数据库</span><br><span class="line"><span class="number">3.</span>选择存储备份文件的方式，这里使用了gzip了生成一个压缩包</span><br></pre></td></tr></table></figure>
<p>根据文档，如果想备份所有数据库，可以使用</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hlocalhost -uroot -p'root' --all-databases | gzip &gt; /var/backups/databases-all-database<span class="escape">`d</span>ate +'<span class="var_expand">%Y%</span>m<span class="var_expand">%d_%</span>H<span class="var_expand">%M%</span>S'<span class="escape">`.</span>sql.gz</span><br></pre></td></tr></table></figure>
<p>保存。</p>
<p>有备份，就会有备份后的处理，显而易见的问题是备份多了会比较占空间，并且也用不到那么多备份。所以备份完成删除掉一段时间以前的就可以了。这步也可以在备份前做，无所谓。</p>
<p>这里又用到了find命令</p>
<p>参考文章：<a href="http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html" target="_blank" rel="external">Linux中find常见用法示例</a></p>
<h4 id="删除之前的备份文件">删除之前的备份文件</h4><p>在刚才的backup.sh中继续输入：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/var/backups/</span></span><br><span class="line">rm -rf `<span class="javascript">find . -name <span class="string">'*.sql.gz'</span> -mtime +<span class="number">10</span></span>`</span><br></pre></td></tr></table></figure>
<p>这句命令有两部分，</p>
<p>第一部分是删除命令：’rm -rf’。就是那句一定要慎用的命令了.</p>
<p>第二部分是找到：当前目录，名字以’.sql.gz’结尾的，更改时间在10天以前的文件。</p>
<p>‘.’表示当前目录，由于上一句是’cd /var/backups/‘，所以这里使用当前目录即可。</p>
<p>‘-name ‘和’-mtime’参数是find命令的条件。</p>
<p>具体的说明，和其他条件可以参考前边说到的文章。</p>
<p>到这里基本上备份脚本就完成了。</p>
<p>但是为了什么时候突然想看一下日志，或者备份出错的时候查问题，还可以在脚本里加上记录日志的命令：</p>
<h4 id="日志">日志</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '<span class="operator"><span class="keyword">Begin</span> <span class="keyword">Backup</span> <span class="keyword">Database</span> <span class="keyword">At</span> :<span class="string">' `date +'</span>%Y-%<span class="keyword">m</span>-%<span class="keyword">d</span> %H:%<span class="keyword">M</span>:%S<span class="string">'`</span></span></span><br></pre></td></tr></table></figure>
<p>这里又用到了date。</p>
<p>参考文章：<a href="http://blog.csdn.net/jk110333/article/details/8590746/" target="_blank" rel="external">Linux下date命令，格式化输出，时间设置 </a></p>
<p>脚本保存之后，记得添加执行权限；</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">sudo</span> <span class="tag">chmod</span> +<span class="tag">x</span> <span class="tag">backup</span><span class="class">.sh</span></span><br></pre></td></tr></table></figure>
<p>接下来就是在系统里添加crontab任务了。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/</span><br><span class="line"><span class="keyword">vi</span> crontab</span><br></pre></td></tr></table></figure>
<p>在文件末尾，加上</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">m</span>  <span class="keyword">h</span> dom mon dow user	command</span><br><span class="line">00 5 * * * root /home/yourname/backup.<span class="keyword">sh</span> &gt;&gt; /<span class="keyword">var</span>/<span class="keyword">log</span>/backup.<span class="literal">log</span></span><br></pre></td></tr></table></figure>
<p>这样，backup.sh里的echo就会输出到/var/log/backup.log中了。</p>
<p>Over。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/backup-database-with-crontab/crontab.jpg" alt=""></p>
<p>crontab命令之前写过了，在<a href="http://segmentfault.com/a/11900000039]]>
    </summary>
    
      <category term="crontab" scheme="http://www.qichengzx.com/tags/crontab/"/>
    
      <category term="linux" scheme="http://www.qichengzx.com/tags/linux/"/>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="linux" scheme="http://www.qichengzx.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Dropbox同步hexo文章]]></title>
    <link href="http://www.qichengzx.com/2015/12/27/dropbox-sync-hexo-article.html"/>
    <id>http://www.qichengzx.com/2015/12/27/dropbox-sync-hexo-article.html</id>
    <published>2015-12-27T13:47:09.000Z</published>
    <updated>2016-04-23T12:08:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/dropbox/20130702165945-558672261.jpg" alt=""></p>
<p>继之前<a href="https://www.qichengzx.com/2015/11/13/dropbox-sync-hexo-and-autobuild-itself.html">那次失败的尝试</a>之后（只在当时写的时候实验过几次，每次都以服务器卡死结束），后来在又多了几篇日志之后连generate也不能愉快的完成了。索性就在本地生成然后git push到服务器。</p>
<p>现在想更激进一些，git只管理日志以外的东西，比如hexo的升级，或模板的调整和日志源文件。而生成的静态文件直接通过Dropbox客户端同步到服务器。</p>
<p>话不多说。</p>
<p>以下为前提：</p>
<pre><code>本地已安装hexo，和Dropbox客户端，并且客户端的同步目录已经选择到hexo的目录。
服务器已安装dropbox服务，及相应的用户。
</code></pre><p>Dropbox的同步目录选hexo根目录或public都行，只是在服务器的处理脚本那同步修改下就行了。</p>
<p>以下内容假设已在服务器添加dbox用户用于dropbox服务的同步处理。并且也已经设置了与dropbox账户的关联。</p>
<h4 id="启动dropboxd">启动dropboxd</h4><p>用dbox用户登录服务器。</p>
<p>然后，启动dropboxd进程。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/dropbox-dist/dropboxd</span> &amp;</span><br></pre></td></tr></table></figure>
<h4 id="设置文件夹监测">设置文件夹监测</h4><h5 id="先安装incron服务。">先安装incron服务。</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> incron</span><br><span class="line">yum <span class="keyword">install</span> incron</span><br></pre></td></tr></table></figure>
<h5 id="开机启动">开机启动</h5><p>安装sysv-rc-conf，用于管理服务的启动</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install sysv-rc-<span class="keyword">conf</span></span><br><span class="line">sysv-rc-<span class="keyword">conf</span> incron <span class="keyword">on</span></span><br><span class="line">sysv-rc-<span class="keyword">conf</span> --<span class="keyword">list</span> <span class="comment">//用于查看所有服务的状态</span></span><br></pre></td></tr></table></figure>
<h5 id="创建监测服务">创建监测服务</h5><p>先修改下incron的编辑器</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/incron.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>在文件的最后一行，去掉editor = vi前的#，保存退出。</p>
<p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrontab <span class="operator">-e</span></span><br></pre></td></tr></table></figure>
<p>如果当前登录的不是dbox用户，可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrontab -udbox <span class="operator">-e</span></span><br></pre></td></tr></table></figure></p>
<p>然后输入：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/home/</span>dbox<span class="regexp">/Dropbox/y</span>ourfolder<span class="regexp">/ IN_ATTRIB,IN_MOVE /</span>home<span class="regexp">/dbox/</span>dbox.sh</span><br></pre></td></tr></table></figure>
<p>第一个参数：用来接收Dropbox同步的文件夹</p>
<p>第二个参数：指监测的动作</p>
<p>第三个参数：处理脚本</p>
<p>监测的动作可以用：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IN_ACCESS，即文件被访问</span><br><span class="line">IN_MODIFY，文件被 <span class="keyword">write</span></span><br><span class="line">IN_ATTRIB，文件属性被修改，如 <span class="keyword">chmod</span>、<span class="keyword">chown</span>、touch 等</span><br><span class="line">IN_CLOSE_WRITE，可写文件被 <span class="keyword">close</span></span><br><span class="line">IN_CLOSE_NOWRITE，不可写文件被 <span class="keyword">close</span></span><br><span class="line">IN_OPEN，文件被 <span class="keyword">open</span></span><br><span class="line">IN_MOVED_FROM，文件被移走,如 mv</span><br><span class="line">IN_MOVED_TO，文件被移来，如 mv、cp</span><br><span class="line">IN_CREATE，创建新文件</span><br><span class="line">IN_DELETE，文件被删除，如 rm</span><br><span class="line">IN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己</span><br><span class="line">IN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己</span><br><span class="line">IN_UNMOUNT，宿主文件系统被 umount</span><br><span class="line">IN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)</span><br><span class="line">IN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)</span><br><span class="line"><span class="comment">#上面所说的文件也包括目录。</span></span><br></pre></td></tr></table></figure>
<h5 id="处理同步后的文件的脚本">处理同步后的文件的脚本</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/home/</span>dbox/</span><br><span class="line">vi dbox.sh</span><br><span class="line"></span><br><span class="line">cd <span class="regexp">/home/</span>dbox<span class="regexp">/Dropbox/</span>yoursite/</span><br><span class="line">cp -R <span class="keyword">public</span><span class="regexp">/ /</span>var<span class="regexp">/www/</span>yoursite/</span><br></pre></td></tr></table></figure>
<p>最后一句要注意看你本地同步了哪些内容，还要注意与网站的目录对应。</p>
<p>还要注意dbox.sh要有执行权限，和yoursite的写入权限。</p>
<p>至此，完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/dropbox/20130702165945-558672261.jpg" alt=""></p>
<p>继之前<a href="https://www.qichengzx.com/2015/11/13/dropbox-sync-hexo]]>
    </summary>
    
      <category term="dropbox" scheme="http://www.qichengzx.com/tags/dropbox/"/>
    
      <category term="hexo" scheme="http://www.qichengzx.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Let's Encrypt制作数字证书]]></title>
    <link href="http://www.qichengzx.com/2015/12/19/secure-your-website-with-lets-encrypt.html"/>
    <id>http://www.qichengzx.com/2015/12/19/secure-your-website-with-lets-encrypt.html</id>
    <published>2015-12-19T08:38:37.000Z</published>
    <updated>2015-12-19T13:31:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://s.qichengzx.com/img/201512/https.png" alt=""></p>
<p>Let’s Encrypt是一个新的CA机构，提供非常简单并且免费的TLS／SSL证书服务。</p>
<p>可谓万众期待。</p>
<p>说下我的环境：</p>
<pre><code>Ubuntu <span class="number">14.04</span><span class="number">.3</span>
Nginx <span class="number">1.4</span><span class="number">.6</span>
</code></pre><p>首先你要有个域名，其次要有个服务器。</p>
<h3 id="STEP_0_－_安装Let’s_Encrypt_客户端">STEP 0 － 安装Let’s Encrypt 客户端</h3><h5 id="安装git">安装git</h5><p>先更新下系统</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> -y install git</span><br></pre></td></tr></table></figure>
<h5 id="Clone_Let’s_Encrypt">Clone Let’s Encrypt</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="keyword">clone</span> <span class="title">https</span>://github.com/letsencrypt/letsencrypt /opt/letsencrypt</span><br></pre></td></tr></table></figure>
<p>这里把下载的文件放到了/opt/letsencrypt文件夹</p>
<h3 id="STEP_1－生成证书">STEP 1－生成证书</h3><p>首先需要关闭80端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx <span class="operator">-s</span> stop</span><br></pre></td></tr></table></figure>
<p>接下来运行Let’s Encrypt</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/letsencrypt</span><br><span class="line">./letsencrypt-auto certonly --standalone</span><br></pre></td></tr></table></figure>
<p>注意：需要超级用户权限，所以需要输入密码</p>
<p>之后会出现提示框，需要输入邮箱，用于接收提醒和，如果不幸丢失了Key，找回的时候也需要邮箱。</p>
<p>根据提示进行操作即可，接下来啥同意用户协议。</p>
<p>下一步则是输入你需要生成证书的域名了，如果需要一个证书给多个域名使用，这些域名则要全部输入，（example.com和www.example.com是不同的域名），域名之间用空格，逗号，左斜杠 分隔。</p>
<p>成功后会有如下提示：</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"></span><br><span class="line"> - <span class="keyword">If</span> you lose your account credentials, you can recover through</span><br><span class="line">   e-mails sent <span class="keyword">to</span> sammy@digitalocean.com</span><br><span class="line"> - Congratulations! Your certificate <span class="keyword">and</span> chain have been saved at</span><br><span class="line">    /etc/letsencrypt/live/example.com/fullchain.pem. Your</span><br><span class="line">   cert will expire <span class="keyword">on</span> <span class="number">2016</span>-<span class="number">03</span>-<span class="number">15</span>. <span class="keyword">To</span> obtain a <span class="keyword">new</span> version <span class="keyword">of</span> the</span><br><span class="line">   certificate <span class="keyword">in</span> the future, simply run Let<span class="attribute">'s</span> Encrypt again.</span><br><span class="line"> - Your account credentials have been saved <span class="keyword">in</span> your Let<span class="attribute">'s</span> Encrypt</span><br><span class="line">   <span class="keyword">configuration</span> directory at /etc/letsencrypt. You should make a</span><br><span class="line">   secure backup <span class="keyword">of</span> this folder now. This <span class="keyword">configuration</span> directory will</span><br><span class="line">   also contain certificates <span class="keyword">and</span> private keys obtained by Let<span class="attribute">'s</span></span><br><span class="line">   Encrypt so making regular backups <span class="keyword">of</span> this folder <span class="keyword">is</span> ideal.</span><br><span class="line"> - <span class="keyword">If</span> like Let<span class="attribute">'s</span> Encrypt, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating <span class="keyword">to</span> ISRG / Let<span class="attribute">'s</span> Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating <span class="keyword">to</span> EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>
<p>证书位置：/etc/letsencrypt/live/example.com/fullchain.pem</p>
<p>过期时间：2016-03-15</p>
<p>至于过期时间为什么这么短则是出于安全考虑。不宜使用同一个证书太长时间。</p>
<h5 id="证书文件：">证书文件：</h5><p>上一步成功后，会有如下4个文件生成。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ls <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/y</span>our_domain_name</span><br></pre></td></tr></table></figure>
<pre><code><span class="attribute">cert.pem</span>: <span class="string">证书</span>
<span class="attribute">chain.pem</span>: <span class="string">The Let's Encrypt chain certificate（不知道什么鬼）</span>
<span class="attribute">fullchain.pem</span>: <span class="string">cert.pem and chain.pem combined</span>
<span class="attribute">privkey.pem</span>: <span class="string">证书私钥</span>
</code></pre><h3 id="STEP_2－配置Web服务器(Nginx)">STEP 2－配置Web服务器(Nginx)</h3><p>证书生成完毕，现在可以配置Web服务器了。</p>
<p>编辑配置文件：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span><span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>在server区块中，增加如下代码：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen 443 ssl<span class="comment">;</span></span><br><span class="line">server_name example.com<span class="comment">;</span></span><br><span class="line">ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem<span class="comment">;</span></span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>如果之前是绑定的80端口，直接改为443即可，后边增加 ssl 。</p>
<p>如果想使用最安全的SSL协议，增加如下代码：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="title">ssl_prefer_server_ciphers</span> <span class="built_in">on</span>;</span><br><span class="line"><span class="title">ssl_ciphers</span> AES256+EECDH:AES256+EDH:!aNULL;</span><br></pre></td></tr></table></figure>
<p>最后，在server区块后再增加一段，用于从HTTP跳转到HTTPS。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> example.com;</span><br><span class="line">    <span class="title">rewrite</span><span class="regexp"> ^/(.*)</span> <span class="url">https://example.com/<span class="variable">$1</span></span> <span class="built_in">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，退出。</p>
<p>重启Nginx服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx <span class="operator">-s</span> reopen</span><br></pre></td></tr></table></figure>
<p>现在已经可以通过HTTPS访问网站了。</p>
<p>原文中还有设置自动生成证书的部分，出于懒的原因此处不再写。</p>
<p>参考资料：<br><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04" target="_blank" rel="external">How To Secure Nginx with Let’s Encrypt on Ubuntu 14.04</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://s.qichengzx.com/img/201512/https.png" alt=""></p>
<p>Let’s Encrypt是一个新的CA机构，提供非常简单并且免费的TLS／SSL证书服务。</p>
<p>可谓万众期待。</p>
]]>
    </summary>
    
      <category term="https" scheme="http://www.qichengzx.com/tags/https/"/>
    
      <category term="ssl" scheme="http://www.qichengzx.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP使用Redis作为缓存使用PDO读取MySQL数据]]></title>
    <link href="http://www.qichengzx.com/2015/12/05/php-use-pdo-cache-query-result-with-redis.html"/>
    <id>http://www.qichengzx.com/2015/12/05/php-use-pdo-cache-query-result-with-redis.html</id>
    <published>2015-12-05T14:37:09.000Z</published>
    <updated>2015-12-06T01:31:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo1414772222.jpg" alt=""></p>
<p>图片转自：<a href="http://blog.encodez.com/blog/using-pdofetchall-examples-with-codes-and-output-results" target="_blank" rel="external">Using PDO::fetchAll – Examples with codes and output results</a></p>
<p>一个简单的例子。</p>
<p><strong>实现功能：</strong></p>
<pre><code><span class="number">1.</span>使用PDO读取数据

<span class="number">2.</span>使用Redis缓存结果

<span class="number">3.</span>再次查询时会从Redis查询，减少MySQL查询
</code></pre><p>没有注意代码的逻辑，仅实现思路。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//一上来肯定是配置pdo的连接信息。其实这步在这个示例中可以放到第一个<span class="keyword">else</span>中。</span><br><span class="line"><span class="variable">$dsn</span> = <span class="string">'mysql:dbname=node;host=127.0.0.1'</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">//连接Redis</span><br><span class="line"><span class="variable">$redis</span>= new Redis();</span><br><span class="line"><span class="variable">$redis-</span>&gt;connect(<span class="string">'127.0.0.1'</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">//接收查询参数</span><br><span class="line"><span class="variable">$id</span> = intval($_GET[<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line">//设置在Redis中存储的KEY</span><br><span class="line"><span class="variable">$MY</span>_NODE_KEY<span class="number">_</span> = <span class="string">'TEST_PDO_REDIS_ID_'</span>;</span><br><span class="line"></span><br><span class="line">//拼接KEY和查询ID，读取Redis，</span><br><span class="line"><span class="variable">$cache</span> = <span class="variable">$redis-</span>&gt;get(<span class="variable">$MY</span>_NODE_KEY<span class="number">_</span>.<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">//用来插入log的时间参数</span><br><span class="line"><span class="variable">$date</span> = date(<span class="string">"Y-m-d H:i:s"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cache</span>)&#123;</span><br><span class="line">	//Redis缓存存在则直接输出</span><br><span class="line">	print_r(json_decode(<span class="variable">$cache</span>,true));</span><br><span class="line">	//并记录log</span><br><span class="line">	error_log(<span class="variable">$date</span>.<span class="string">"---read from redis \r\n"</span>, <span class="number">3</span>, <span class="string">'./debug.txt'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	//缓存不存在，则连接PDO</span><br><span class="line">	try &#123;</span><br><span class="line">    	<span class="variable">$pdo</span> = new PDO(<span class="variable">$dsn</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">    	error_log(<span class="variable">$date</span>.<span class="string">"---Connection Succcess \r\n"</span>, <span class="number">3</span>, <span class="string">'./debug.txt'</span>);</span><br><span class="line">		</span><br><span class="line">		//查询</span><br><span class="line">	    <span class="variable">$query</span> = <span class="variable">$pdo</span> -&gt; query(<span class="string">"select * from news where id = '$id'"</span>);</span><br><span class="line">		//设置结果集为数组</span><br><span class="line">	    // [PDOStatement::fetch](http://php.net/manual/zh/pdostatement.fetch.php)</span><br><span class="line">	    <span class="variable">$query-</span>&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line">	    </span><br><span class="line">	    <span class="variable">$rs</span> = <span class="variable">$query-</span>&gt;fetch();</span><br><span class="line">	</span><br><span class="line">	    if (is_array(<span class="variable">$rs</span>)) &#123;</span><br><span class="line">	    	//查询完成，以json格式写入Redis中。</span><br><span class="line">			<span class="variable">$redis-</span>&gt;set(<span class="variable">$MY</span>_NODE_KEY<span class="number">_</span>.<span class="variable">$rs</span>[<span class="string">'id'</span>],json_encode(<span class="variable">$rs</span>));</span><br><span class="line">			print_r(<span class="variable">$rs</span>);</span><br><span class="line">			error_log(<span class="variable">$date</span>.<span class="string">"read from mysql \r\n"</span>, <span class="number">3</span>, <span class="string">'./debug.txt'</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	//PDO连接出错</span><br><span class="line">	&#125; catch (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">		//输出错误信息，并记录log中</span><br><span class="line">    	echo <span class="string">'Connection failed: '</span> . <span class="variable">$e-</span>&gt;getMessage();</span><br><span class="line">    	error_log(<span class="variable">$date</span>.<span class="string">"---Connection failed \r\n"</span>, <span class="number">3</span>, <span class="string">'./debug.txt'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写的很糙，逻辑已经简单到没有逻辑了。</p>
<p>一句话说一下思路就是：<br>    先看有没有缓存<br>    木有就查数据库，写入缓存</p>
<p>参考资料：<br>    <a href="http://php.net/manual/zh/book.pdo.php" target="_blank" rel="external">PHP 数据对象</a><br>    <a href="http://www.cnblogs.com/zemliu/archive/2012/05/08/2490953.html" target="_blank" rel="external">PHP PDO的简单使用(query(),exec(),prepare(),Transaction,行锁)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo1414772222.jpg" alt=""></p>
<p>图片转自：<a href="http://blog.encodez.com/blog/using-pdofe]]>
    </summary>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="pdo" scheme="http://www.qichengzx.com/tags/pdo/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/tags/php/"/>
    
      <category term="redis" scheme="http://www.qichengzx.com/tags/redis/"/>
    
      <category term="php" scheme="http://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js连接MySQL并读取数据]]></title>
    <link href="http://www.qichengzx.com/2015/12/03/nodejs-mysql.html"/>
    <id>http://www.qichengzx.com/2015/12/03/nodejs-mysql.html</id>
    <published>2015-12-03T13:38:37.000Z</published>
    <updated>2015-12-03T14:24:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo201312030901.jpg" alt=""></p>
<p>文章部分代码与<a href="http://segmentfault.com/a/1190000002995355" target="_blank" rel="external">之前整理的一篇文章</a>一样。</p>
<p>本文主要实现node连接MySQL并读取指定表的数据输出到ejs模板中。</p>
<p>MySQL是一款非常常用的开源数据库，<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="external">npm中也有MySQL的包</a>。</p>
<p>###MySQL测试库的表结构：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`news`</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`news`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`createtime`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`news`</span> WRITE;</span></span><br><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`news`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'news one'</span>,<span class="number">1449064787</span>),(<span class="number">2</span>,<span class="string">'news two'</span>,<span class="number">1449064790</span>),(<span class="number">3</span>,<span class="string">'news three'</span>,<span class="number">1449064900</span>);</span></span><br><span class="line"><span class="operator"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Node-js_MySQL包">安装Node.js MySQL包</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> mysql</span><br></pre></td></tr></table></figure>
<h3 id="server-js">server.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);<span class="comment">//用来格式化UNIX时间戳</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure>
<p>配置MySQL数据库</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">	host:<span class="string">'localhost'</span>,</span><br><span class="line">	user:<span class="string">'root'</span>,</span><br><span class="line">	password:<span class="string">'root'</span>,</span><br><span class="line">	database:<span class="string">'node'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>连接数据库，并在成功或失败时输出log</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">connection.connect(function(<span class="keyword">err</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">err</span>)&#123;</span><br><span class="line">		console.<span class="literal">log</span>('Database is connected...\<span class="keyword">n</span>\<span class="keyword">n</span>');</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		console.<span class="literal">log</span>('<span class="keyword">Error</span> Connecting Database...\<span class="keyword">n</span>\<span class="keyword">n</span>');</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>定义表</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">TABLE</span> = '<span class="keyword">news</span>';</span><br></pre></td></tr></table></figure>
<p>设定模板引擎</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="keyword">set</span>(<span class="string">'view engine'</span>,<span class="string">'ejs'</span>);</span><br></pre></td></tr></table></figure>
<p>这就是很普通的路由，表示接收访问首页的请求</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//定义一组数据</span></span><br><span class="line">	<span class="keyword">var</span> data = [</span><br><span class="line">					&#123; name : <span class="string">'Bloody Mary'</span> , drunkness : <span class="number">3</span> &#125;,</span><br><span class="line">					&#123; name : <span class="string">'Martini'</span> , drunkness : <span class="number">5</span> &#125;,</span><br><span class="line">					&#123; name : <span class="string">'Scotch'</span> , drunkness : <span class="number">10</span> &#125;</span><br><span class="line">				];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//MySQL查询</span></span><br><span class="line">	connection.query(</span><br><span class="line">		<span class="comment">//普通的SQL</span></span><br><span class="line">		<span class="string">'select * from '</span> + TABLE,</span><br><span class="line">		<span class="comment">//查询回调</span></span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				<span class="comment">//输出错误</span></span><br><span class="line">				<span class="keyword">throw</span> err;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(results)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(results);</span><br><span class="line">				<span class="comment">//express render一个页面</span></span><br><span class="line">				res.render(<span class="string">'pages/index'</span>,&#123;</span><br><span class="line">					title:<span class="string">'test'</span>,</span><br><span class="line">					results:results,</span><br><span class="line">					data:data,</span><br><span class="line">					moment:moment</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'8888 is the magic port'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="index-ejs">index.ejs</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">include</span> ../partials/head %&gt;</span><br><span class="line"></span><br><span class="line">&lt;body class=<span class="string">"container"</span>&gt;</span><br><span class="line">	&lt;main&gt;</span><br><span class="line">		&lt;<span class="keyword">div</span> class=<span class="string">"jumbotron"</span>&gt;</span><br><span class="line">			&lt;h2&gt;data <span class="keyword">from</span> <span class="keyword">static</span>&lt;/h2&gt;</span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&lt;% data.forEach(function(d) &#123; %&gt;</span><br><span class="line">				&lt;li&gt;</span><br><span class="line">					&lt;%= d.name %&gt;</span><br><span class="line">					&lt;span&gt;&lt;%= d.drunkness %&gt;&lt;/span&gt;</span><br><span class="line">				&lt;/li&gt;</span><br><span class="line">			    &lt;% &#125;); %&gt;</span><br><span class="line">			&lt;/ul&gt;</span><br><span class="line">		&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">		&lt;<span class="keyword">div</span> class=<span class="string">"jumbotron"</span>&gt;</span><br><span class="line">			&lt;h2&gt;data <span class="keyword">from</span> mysql&lt;/h2&gt;</span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&lt;% results.forEach(function(<span class="literal">result</span>) &#123; %&gt;</span><br><span class="line">				&lt;li&gt;</span><br><span class="line">					&lt;%= <span class="literal">result</span>.id %&gt;</span><br><span class="line">					&lt;span&gt;&lt;%= <span class="literal">result</span>.title %&gt;&lt;/span&gt;</span><br><span class="line">					&lt;span&gt;&lt;%= moment(<span class="literal">result</span>.createtime*<span class="number">1000</span>).format('<span class="type">YYYY</span>-<span class="type">MM</span>-<span class="type">DD</span>, hh:mm:ss') %&gt;&lt;/span&gt;</span><br><span class="line">				&lt;/li&gt;</span><br><span class="line">			    &lt;% &#125;); %&gt;</span><br><span class="line">			&lt;/ul&gt;</span><br><span class="line">		&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;/main&gt;</span><br><span class="line"></span><br><span class="line">	&lt;footer&gt;</span><br><span class="line">		&lt;% <span class="keyword">include</span> ../partials/footer %&gt;</span><br><span class="line">	&lt;/footer&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>至此，就可以正常输出从数据库里读取出来的数据了。</p>
<p><strong>小插曲</strong></p>
<p>之前在练习的时候，require MySQL 之后npm install 只安装了require的几个包，昨天再写的时候装了一大堆。<br>另外之前在使用moment的时候并没有在render页面的时候传入moment，直接就可以用了，昨天也报错了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo201312030901.jpg" alt=""></p>
<p>文章部分代码与<a href="http://segmentfault.com/a/1190000002]]>
    </summary>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="node" scheme="http://www.qichengzx.com/tags/node/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL命令行导出结果集到Excel]]></title>
    <link href="http://www.qichengzx.com/2015/11/21/export-results-of-mysql-to-excel.html"/>
    <id>http://www.qichengzx.com/2015/11/21/export-results-of-mysql-to-excel.html</id>
    <published>2015-11-21T13:24:35.000Z</published>
    <updated>2015-11-21T13:50:00.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo1631785_mysql.gif" alt=""></p>
<p>某个需求，为了简单单独建表存储，而且没有相关的后台管理方法，无法查看，或导出，但是又突然出现需要导出这个需求。</p>
<p>所以突然想到MySQL是否带了这种直接导出到文件中的方法，查资料后发现果然有。</p>
<p>只需要在命令行中执行如下查询即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_table <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file.csv'</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span>;</span></span><br></pre></td></tr></table></figure>
<p>有几点需要注意：</p>
<pre><code><span class="number">0.</span>文件将在服务器上生成，所以需要需要MySQL进程有生成文件的权限。
<span class="number">1.</span>必须为一个不存在的文件名。
</code></pre><p>其实还有一些功能，或者说是说明，这里并没有写。</p>
<p>官方文档：</p>
<p><a href="http://dev.mysql.com/doc/refman/5.5/en/select-into.html" target="_blank" rel="external">13.2.9.1 SELECT … INTO Syntax</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo1631785_mysql.gif" alt=""></p>
<p>某个需求，为了简单单独建表存储，而且没有相关的后台管理方法，无法查看，或导出，但是又突然出现需要导出这]]>
    </summary>
    
      <category term="excel" scheme="http://www.qichengzx.com/tags/excel/"/>
    
      <category term="mysql" scheme="http://www.qichengzx.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.qichengzx.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS标识符]]></title>
    <link href="http://www.qichengzx.com/2015/11/17/js-names.html"/>
    <id>http://www.qichengzx.com/2015/11/17/js-names.html</id>
    <published>2015-11-17T14:07:21.000Z</published>
    <updated>2015-11-18T14:21:40.000Z</updated>
    <content type="html"><![CDATA[<p>标识符由一个字母开头，其后可以选择性的加上一个或多个字母、数字或下划线。但是，不能使用下面这些保留字：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span></span><br><span class="line">boolean <span class="keyword">break</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">catch</span> <span class="built_in">char</span> <span class="keyword">class</span> <span class="keyword">const</span> <span class="keyword">continue</span></span><br><span class="line">debugger <span class="keyword">default</span> <span class="keyword">delete</span> <span class="keyword">do</span> <span class="built_in">double</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">enum</span> <span class="keyword">export</span> extends</span><br><span class="line"><span class="literal">false</span> <span class="keyword">final</span> <span class="keyword">finally</span> <span class="built_in">float</span> <span class="keyword">for</span> <span class="built_in">function</span></span><br><span class="line"><span class="keyword">goto</span></span><br><span class="line"><span class="keyword">if</span> implements <span class="keyword">import</span> <span class="keyword">in</span> instanceof <span class="keyword">int</span> <span class="keyword">interface</span> </span><br><span class="line"><span class="built_in">long</span></span><br><span class="line">native <span class="keyword">new</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">package</span> <span class="keyword">private</span> <span class="keyword">protected</span> <span class="keyword">public</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">short</span> <span class="keyword">static</span> <span class="keyword">super</span> <span class="keyword">switch</span> <span class="keyword">synchronized</span></span><br><span class="line"><span class="keyword">this</span> <span class="keyword">throw</span> throws transient <span class="literal">true</span> <span class="keyword">try</span> <span class="keyword">typeof</span></span><br><span class="line">var <span class="keyword">volatile</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">with</span></span><br></pre></td></tr></table></figure>
<p>这个列表里的大部分并未用在JS语言里，有一些已经逐渐在新标准中出现，但是这个列表也不包括一些本应该保留的字，如undefined,NaN,Infinity。</p>
<p>JS不允许使用保留字来命名变量或参数，也不允许在对象字面量中，或者用 点运算符(.)提取对象属性时，使用保留字作为对象的属性名。</p>
<p>标识符被用于语句，变量，参数，属性名，运算符和标记。</p>
<p>注:实际中，JS也允许 (_),($)开头。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>标识符由一个字母开头，其后可以选择性的加上一个或多个字母、数字或下划线。但是，不能使用下面这些保留字：</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line"]]>
    </summary>
    
      <category term="javascript" scheme="http://www.qichengzx.com/tags/javascript/"/>
    
      <category term="标识符" scheme="http://www.qichengzx.com/tags/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
      <category term="javascript" scheme="http://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Dropbox同步hexo的文章源文件并自动生成文章发布]]></title>
    <link href="http://www.qichengzx.com/2015/11/13/dropbox-sync-hexo-and-autobuild-itself.html"/>
    <id>http://www.qichengzx.com/2015/11/13/dropbox-sync-hexo-and-autobuild-itself.html</id>
    <published>2015-11-13T06:12:35.000Z</published>
    <updated>2015-12-19T07:50:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong> 阅读之前默认为已在服务器安装hexo，也默认服务器可以访问Dropbox </strong></p>
<p><strong> 不建议服务器内存小于512M ，谁卡谁知道 </strong></p>
<h3 id="最初的最初">最初的最初</h3><p>先说下我最终完成的结构：</p>
<pre><code><span class="number">1.</span>本地有一个日志文件夹，用于存放md文件，或HTML文件，作为本地的Dropbox客户端同步的目录
<span class="number">2.</span>服务器home文件夹中init一套hexo程序，用于接收本地的md文件，和generate，minify
</code></pre><p>流程：</p>
<pre><code><span class="number">1.</span>本地撰写，本地客户端自动同步
<span class="number">2.</span>服务器Dropbox设置的同步目录接收本地的内容并cp到专门用于生成的hexo目录里
<span class="number">3.</span>服务器用于生成的hexo生成新日志，cp到web目录中
</code></pre><p>这么做的原因是，如果一共（是整个博客一共）只有一篇文章或几篇文章，那几乎没影响，如果，有几十篇了，据我观察，生成很耗时，可能会导致搜索引擎访问出现404，用户打开一个生成到一半的文件，用户打开一个木有样式的文章。</p>
<h3 id="STEP_0_安装Dropbox">STEP 0 安装Dropbox</h3><p><a href="https://db.tt/mMNtRA6x" target="_blank" rel="external">注册Dropbox</a>。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( ! has_dropbox_account() )&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"请先注册个账户啊亲"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于Dropbox默认安装在~，所以建议新建一个专用于同步的账户，如dbox。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">adduser </span>dbox</span><br><span class="line"><span class="label">passwd</span> dbox</span><br></pre></td></tr></table></figure>
<p><strong> 请记住密码。请记住密码。请记住密码。 </strong></p>
<p>然后，用新建的账户登录进去。</p>
<p>终于可以安装Dropbox了。</p>
<p>这里要区分一下你的系统，</p>
<p><strong> 32位: </strong></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cd</span> <span class="regexp">~ &amp;&amp;</span> wget -O - <span class="string">"https://www.dropbox.com/download?plat=lnx.x86"</span> | tar xzf -</span><br></pre></td></tr></table></figure>
<p><strong> 64位: </strong></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cd</span> <span class="regexp">~ &amp;&amp;</span> wget -O - <span class="string">"https://www.dropbox.com/download?plat=lnx.x86_64"</span> | tar xzf -</span><br></pre></td></tr></table></figure>
<p>然后就可以运行Dropbox的守护程序了</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/.dropbox-dist/dropboxd</span> &amp;</span><br></pre></td></tr></table></figure>
<p>第一次在新的电脑上启动，会提示：</p>
<pre><code>此电脑尚未与任何 Dropbox 帐户关联...

请访问 https://www.dropbox.com/cli_link_nonce?nonce=95cd317d2<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> 来关联此设备。

此电脑现在已与 Dropbox 关联。欢迎 yourname username
</code></pre><p><strong> 注意在出现“此电脑现在已与 Dropbox 关联。欢迎 your username”前不要ctrl+c 退出这个程序。 </strong></p>
<p>打开授权链接后会出现如下的提示，选择连接即可。</p>
<p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexo33B2BAAF-6996-41AA-BFA3-FC177106F62A.png" alt=""></p>
<p>一定要注意，不然你都会奇怪为啥再次启动这个进程的时候还会出现“尚未关联的提示”</p>
<p>验证成功后，会在当前用户的home目录中创建Dropbox目录，即Dropbox同步的目录。</p>
<p>此时，如果你打开了 top，那应该发现此时服务器的内存有点捉急了，原因是Dropbox这个进程占的很多，所以一般情况下killall dropbox 退出就好了，壕请随意。</p>
<h3 id="STEP_1_设置文件夹监测">STEP 1 设置文件夹监测</h3><p><strong>安装incron服务</strong></p>
<p>incron是Linux下一个监测文件变化的服务</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> incron</span><br><span class="line">yum <span class="keyword">install</span> incron</span><br></pre></td></tr></table></figure>
<p><strong> 设置开机启动 </strong></p>
<p>安装sysv-rc-conf，用于管理服务的启动</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install sysv-rc-<span class="keyword">conf</span></span><br><span class="line">sysv-rc-<span class="keyword">conf</span> incron <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<p><strong> 创建监测任务 </strong></p>
<p>先修改下incron的编辑器</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/incron.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<p>（此时可能需要sudo权限，因为是dbox用户）在文件的最后一行，去掉editor = vi前的#，保存退出。</p>
<p>输入：incrontab -e</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/home/</span>dbox<span class="regexp">/Dropbox/y</span>ourfolder<span class="regexp">/ IN_ATTRIB,IN_MOVE /</span>home<span class="regexp">/dbox/</span>hexo.bash</span><br></pre></td></tr></table></figure>
<p>第一个参数：用来接收Dropbox同步的文件夹</p>
<p>第二个参数：指监测的动作</p>
<p>第三个参数：处理脚本</p>
<p>监测的动作可以用：</p>
<pre><code>IN_ACCESS，即文件被访问
IN_MODIFY，文件被 <span class="keyword">write</span>
IN_ATTRIB，文件属性被修改，如 <span class="keyword">chmod</span>、<span class="keyword">chown</span>、touch 等
IN_CLOSE_WRITE，可写文件被 <span class="keyword">close</span>
IN_CLOSE_NOWRITE，不可写文件被 <span class="keyword">close</span>
IN_OPEN，文件被 <span class="keyword">open</span>
IN_MOVED_FROM，文件被移走,如 mv
IN_MOVED_TO，文件被移来，如 mv、cp
IN_CREATE，创建新文件
IN_DELETE，文件被删除，如 rm
IN_DELETE_SELF，自删除，即一个可执行文件在执行时删除自己
IN_MOVE_SELF，自移动，即一个可执行文件在执行时移动自己
IN_UNMOUNT，宿主文件系统被 umount
IN_CLOSE，文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)
IN_MOVE，文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)
<span class="comment">#上面所说的文件也包括目录。</span>
</code></pre><p>可以选自己需要的动作</p>
<p>接下来写处理脚本<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">vi</span> <span class="tag">hexo</span><span class="class">.bash</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> -R /home/dbox/Dropbox/yourfolder/* /home/dbox/dropasync/<span class="keyword">source</span>/_posts/;</span><br><span class="line"><span class="keyword">cd</span> /home/dbox/dropasync/ &amp;&amp; hexo gm</span><br><span class="line"><span class="keyword">cd</span> ~ &amp;&amp; ./.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure>
<p>理论上到这里已经可以了。</p>
<p><del>但是实际上我本人在测试的时候，512内存的服务器会只剩下4M内存，然后再执行任何命令都提示<br><code>-bash: fork: Cannot allocate memory</code>，持续很长时间，一开始以为是同时跑的进程太多导致内存不够，把没用的mongodb，redis都kill之后还是这样，后来干脆在执行这个脚本的时候把Dropbox的后台禁掉，也不行，之后想到了在这段脚本里echo一段数字到log中，执行的时候发现会写入多次，但是还是不清楚为什么会出现这种情况，进程里也是出现了两个或多个hexo，于是干脆就在这段脚本开始时先kill dropbox和hexo，在末尾再kill hexo。实际运行起来，内存还是会降到最低，但是持续时间明显减少到可以接受的程度。</del></p>
<hr>
<h2 id="2015-11-21_14:06:07_附截图">2015-11-21 14:06:07 附截图</h2><p><img src="http://7b1hhm.com1.z0.glb.clouddn.com/hexoF2A913D3-14C5-4FC9-B177-500AC0434036.png" alt=""></p>
<hr>
<p>2015-11-14 22:38:06 测试发现，上述带删除线的方法依然不行。内存依然会榨干很长时间。</p>
<hr>
<p>至于为何出现这个情况，咱不可知。。。总不能完全是因为内存太小吧……</p>
<p>后续应该还会继续改进这个脚本。</p>
<p><strong>另外，在安装这个用于生成日志的hexo程序的时候也出现了npm killed的问题，查了资料发现也是因为内存不足，npm install -d 可以查看安装过程，如果出错可以用来定位到底是什么原因引起错误</strong></p>
<p>一些参考资料：</p>
<p><a href="http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps/" target="_blank" rel="external">Hexo 服务器端布署及 Dropbox 同步</a></p>
<p><a href="http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/" target="_blank" rel="external">用Hexo+Vps搭建博客并用Dropbox同步自动发布</a></p>
<p><a href="http://linux.die.net/man/5/incrontab" target="_blank" rel="external">incrontab(5) - Linux man page</a></p>
<p><a href="http://wlx.westgis.ac.cn/tag/incrontab/" target="_blank" rel="external">incron：linux下基于文件的事件触发</a></p>
<p><a href="http://askubuntu.com/questions/221293/why-is-chkconfig-no-longer-available-in-ubuntu" target="_blank" rel="external">Why is chkconfig no longer available in Ubuntu?</a></p>
<p><a href="https://www.garron.me/en/linux/use-incron-rsync-dropbox-backup.html" target="_blank" rel="external">Use incron to Trigger Action when File Changes 如果设置incrontab出现问题可以参考这篇</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong> 阅读之前默认为已在服务器安装hexo，也默认服务器可以访问Dropbox </strong></p>
<p><strong> 不建议服务器内存小于512M ，谁卡谁知道 </strong></p>
<h3 id="最初的最初">最初的最初</h3><p>先]]>
    </summary>
    
      <category term="dropbox" scheme="http://www.qichengzx.com/tags/dropbox/"/>
    
      <category term="hexo" scheme="http://www.qichengzx.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为hexo加一个时钟小挂件]]></title>
    <link href="http://www.qichengzx.com/2015/11/11/time-widget-for-hexo.html"/>
    <id>http://www.qichengzx.com/2015/11/11/time-widget-for-hexo.html</id>
    <published>2015-11-11T06:16:29.000Z</published>
    <updated>2015-11-11T09:28:05.000Z</updated>
    <content type="html"><![CDATA[<p>之前在 <a href="http://segmentfault.com/a/1190000003055672" target="_blank" rel="external">HTML+CSS3再加一点点JS做的一个小时钟</a> 看到的这个问题，觉得很好把代码存下来了，今天突发奇想把它放到hexo的新博客上。</p>
<h3 id="STEP_0">STEP 0</h3><p>把HTML内容放到新建的模板里，我命名为time.ejs。</p>
<pre><code>    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"widget-wrap"</span>&gt;
    &lt;h3 <span class="type">class</span>=<span class="string">"widget-title"</span>&gt;Time&lt;/h3&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"widget time"</span>&gt;
        &lt;style <span class="property">id</span>=<span class="string">"clock-animations"</span>&gt;&lt;/style&gt;
        &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-wrapper"</span>&gt;
            &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-base"</span>&gt;
                    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-indicator"</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                        &lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                    &lt;/<span class="keyword">div</span>&gt;
                    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-hour"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-minute"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-second"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
                    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"clock-center"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
            &lt;/<span class="keyword">div</span>&gt;
        &lt;/<span class="keyword">div</span>&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>原文中<code>&lt;style id=&quot;clock-animations&quot;&gt;&lt;/style&gt;</code>是放在head区域的，为了减小对全局的影响，我拿到这个挂件中了，实际上并没有影响。</p>
<p>这里要注意挂件的代码结构要尽量与主题自带的结构一致。（仅仅是为了好看，和好整理）</p>
<p>当然了，这个文件要放在<code>layout/_widget</code>下。</p>
<h3 id="STEP_1">STEP 1</h3><p>js脚本</p>
<p>由于脚本内容较少，我就直接放在了script.js中，文件位置再source/js。</p>
<pre><code>var <span class="built_in">now</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();
  var <span class="built_in">second</span> = <span class="built_in">now</span>.getSeconds();
  var <span class="built_in">minute</span> = <span class="built_in">now</span>.getMinutes();
  var <span class="built_in">hour</span> = <span class="built_in">now</span>.getHours();
  <span class="keyword">if</span> (<span class="built_in">hour</span> &gt; <span class="number">12</span>) {
      <span class="built_in">hour</span> = <span class="built_in">hour</span> - <span class="number">12</span>;
  }
  hourDeg   = <span class="built_in">hour</span> * <span class="number">30</span> + <span class="built_in">now</span>.getMinutes() / <span class="number">60</span> * <span class="number">30</span>;
  minuteDeg = <span class="built_in">now</span>.getMinutes() * <span class="number">6</span>;
  secondDeg = <span class="built_in">now</span>.getSeconds() * <span class="number">6</span>;
  stylesDeg = [
      <span class="string">"@keyframes rotate-hour{ from{transform:rotate("</span> + hourDeg + <span class="string">"deg);}to{transform:rotate("</span> + (hourDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@keyframes rotate-minute{from{transform:rotate("</span> + minuteDeg + <span class="string">"deg);}to{transform:rotate("</span> + (minuteDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@keyframes rotate-second{from{transform:rotate("</span> + secondDeg + <span class="string">"deg);}to{transform:rotate("</span> + (secondDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-moz-keyframes rotate-hour{ from{transform:rotate("</span> + hourDeg + <span class="string">"deg);}to{transform:rotate("</span> + (hourDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-moz-keyframes rotate-minute{from{transform:rotate("</span> + minuteDeg + <span class="string">"deg);}to{transform:rotate("</span> + (minuteDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-moz-keyframes rotate-second{from{transform:rotate("</span> + secondDeg + <span class="string">"deg);}to{transform:rotate("</span> + (secondDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-webkit-keyframes rotate-hour{from{transform:rotate("</span> + hourDeg + <span class="string">"deg);}to{transform:rotate("</span> + (hourDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-webkit-keyframes rotate-minute{from{transform:rotate("</span> + minuteDeg + <span class="string">"deg);}to{transform:rotate("</span> + (minuteDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>,
      <span class="string">"@-webkit-keyframes rotate-second{from{transform:rotate("</span> + secondDeg + <span class="string">"deg);}to{transform:rotate("</span> + (secondDeg + <span class="number">360</span>) + <span class="string">"deg);}}"</span>
  ].<span class="built_in">join</span>(<span class="string">""</span>);
  $(<span class="comment">'#clock-animations').html(stylesDeg);</span>
</code></pre><h3 id="STEP_2">STEP 2</h3><p>CSS样式</p>
<p>新建文件time.styl，路径为<code>/source/css/_partial/time.styl</code></p>
<p>内容略多，主要是给多浏览器写前缀。</p>
<pre><code><span class="class">.clock-wrapper</span> <span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#f7f7f7</span>,<span class="hexcolor">#e0e0e0</span>)</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">10px</span> <span class="number">15px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>),<span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>)</span></span>;
}</span>
<span class="class">.clock-base</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="hexcolor">#eee</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="rules">{
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">15px</span></span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">15px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">230px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">230px</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span> <span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">113px</span> <span class="number">114px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#a4a4a4</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(1)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">30deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;  <span class="comment">/* Opera */</span>        }</span>
    <span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(2)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">60deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">60deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">60deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">60deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">60deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;  <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(3)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;  <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5a5a5a</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(4)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">120deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">120deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">120deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">120deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">120deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(5)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">150deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">150deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">150deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">150deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">150deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(6)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">180deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">180deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">180deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">180deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">180deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5a5a5a</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(7)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">210deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">210deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">210deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">210deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">210deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(8)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">240deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">240deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">240deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">240deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">240deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(9)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">270deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">270deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">270deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">270deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">270deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5a5a5a</span></span></span>;
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(10)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">300deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">300deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">300deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">300deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">300deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(11)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">330deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">330deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">330deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">330deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">330deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
}</span>
<span class="class">.clock-indicator</span> <span class="tag">div</span><span class="pseudo">:nth-child(12)</span> <span class="rules">{
    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;
    <span class="rule"><span class="attribute">-ms-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;    <span class="comment">/* IE 9 */</span>
    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;   <span class="comment">/* Firefox */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">translateY</span>(-<span class="number">113px</span>)</span></span>;     <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5a5a5a</span></span></span>;
}</span>
<span class="class">.clock-hour</span> <span class="rules">{
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">2</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">128px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">80px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">65px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#555</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>)</span></span>; 
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">-ms-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">-o-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> <span class="number">1s</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Firefox 4 */</span>
    <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">animation</span>:<span class="value">rotate-hour <span class="number">43200s</span> linear infinite</span></span>;
    <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> rotate-hour <span class="number">43200s</span> linear infinite</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
}</span>
<span class="class">.clock-minute</span> <span class="rules">{
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">3</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">128px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">60px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">85px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#555</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>)</span></span>; 
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> <span class="number">1s</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Firefox 4 */</span>
    <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">70px</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">70px</span></span></span>;
    <span class="rule"><span class="attribute">-ms-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">70px</span></span></span>;
    <span class="rule"><span class="attribute">-o-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">70px</span></span></span>;
    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> <span class="number">2px</span> <span class="number">70px</span></span></span>;
    <span class="rule"><span class="attribute">animation</span>:<span class="value">rotate-minute <span class="number">3600s</span> linear infinite</span></span>;
    <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> rotate-minute <span class="number">3600s</span> linear infinite</span></span>; <span class="comment">/* Safari 和 Chrome */</span>
}</span>
<span class="class">.clock-second</span> <span class="rules">{
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">4</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">129px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">15px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">140px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#a00</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>)</span></span>; 
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">1px</span> <span class="number">115px</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transform-origin</span>:<span class="value"> <span class="number">1px</span> <span class="number">115px</span></span></span>;
    <span class="rule"><span class="attribute">-ms-transform-origin</span>:<span class="value"> <span class="number">1px</span> <span class="number">115px</span></span></span>;
    <span class="rule"><span class="attribute">-o-transform-origin</span>:<span class="value"> <span class="number">1px</span> <span class="number">115px</span></span></span>;
    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value"> <span class="number">1px</span> <span class="number">115px</span></span></span>;
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> <span class="number">1s</span></span></span>;
    <span class="rule"><span class="attribute">-moz-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Firefox 4 */</span>
    <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Safari 和 Chrome */</span>
    <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> <span class="number">1s</span></span></span>; <span class="comment">/* Opera */</span>
    <span class="rule"><span class="attribute">animation</span>:<span class="value">rotate-hour <span class="number">60s</span> linear infinite</span></span>;
     <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> rotate-second <span class="number">60s</span> linear infinite</span></span>;  <span class="comment">/* Safari 和 Chrome */</span>
}</span>
<span class="class">.clock-second</span><span class="pseudo">:after</span> <span class="rules">{
    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">8px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">8px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">3px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">110px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#a00</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>)</span></span>;
}</span>
<span class="class">.clock-center</span> <span class="rules">{
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">55px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">55px</span></span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#e3e3e3</span>,<span class="hexcolor">#f7f7f7</span>)</span></span>; 
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">150px</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="hexcolor">#fafafa</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="hexcolor">#e3e3e3</span></span></span>;
}</span>
<span class="class">.clock-center</span><span class="pseudo">:after</span><span class="rules">{
    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">65px</span></span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#ddd</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
}</span>
</code></pre><p> 之后，在sidebar.styl 末尾加入 <code>@import &quot;time&quot;</code>,这是styl的语法，表示引入一个文件，因为两个文件是同级，所以可以直接这么写，加<code>./</code>也可以。</p>
<h3 id="STEP_3">STEP 3</h3><p>最后，在themes的config文件中注册这个挂件。</p>
<p>在_config.yml中，找到<code>widgets</code>，在你想要加的位置中加入 <code>- time</code>，即模板文件名。<br>比如我的widgets变成了这样：</p>
<pre><code>widgets:
-<span class="ruby"> clock
</span>-<span class="ruby"> category
</span>-<span class="ruby"> tag
</span>-<span class="ruby"> tagcloud
</span>-<span class="ruby"> archive
</span>-<span class="ruby"> recent_posts</span>
</code></pre><h3 id="LAST">LAST</h3><p>至此，就全部完事，可以去<code>hexo generate</code>或<code>hexo server</code>了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前在 <a href="http://segmentfault.com/a/1190000003055672" target="_blank" rel="external">HTML+CSS3再加一点点JS做的一个小时钟</a> 看到的这个问题，觉得很好把代码存下来了，今]]>
    </summary>
    
      <category term="hexo" scheme="http://www.qichengzx.com/tags/hexo/"/>
    
      <category term="time" scheme="http://www.qichengzx.com/tags/time/"/>
    
      <category term="widget" scheme="http://www.qichengzx.com/tags/widget/"/>
    
  </entry>
  
</feed>
