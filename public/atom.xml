<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[启程]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://www.qichengzx.com/"/>
  <updated>2017-06-27T14:25:53.000Z</updated>
  <id>https://www.qichengzx.com/</id>
  
  <author>
    <name><![CDATA[qichengzx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MySQL实现按经纬度做距离排序]]></title>
    <link href="https://www.qichengzx.com/2017/06/27/order-by-distance-in-mysql.html"/>
    <id>https://www.qichengzx.com/2017/06/27/order-by-distance-in-mysql.html</id>
    <published>2017-06-27T14:18:19.000Z</published>
    <updated>2017-06-27T14:25:53.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/geolocation.png" alt=""><br>题图来自网络</p>
<p>工作中某些业务需要用到按距离排序返回结果，之前的方式是根据前端传过来来的经纬度，和指定范围的距离，算出一个坐标区间，再用这个区间的值去MySQL中查找，类似“where lat between (lat1, lat2) and lng between (lng1,lng2)”，查出数据后，再遍历数据计算每一条数据到这个经纬度的距离，然后根据得出的距离排序返回。低效，麻烦，不方便分页。</p>
<p>于是决定直接从MySQL中算出距离后返回，省事，方便，还可以直接分页了。</p>
<p>查资料后发现还挺简单的，下方的示例是从<a href="https://developers.google.com/maps/articles/phpsqlsearch_v3" target="_blank" rel="external">Google官方的文档</a>中摘取出来。</p>
<p>创建如下数据表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `markers` (</div><div class="line">  `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,</div><div class="line">  `name` VARCHAR( 60 ) NOT NULL ,</div><div class="line">  `address` VARCHAR( 80 ) NOT NULL ,</div><div class="line">  `lat` FLOAT( 10, 6 ) NOT NULL ,</div><div class="line">  `lng` FLOAT( 10, 6 ) NOT NULL</div><div class="line">) ENGINE = MYISAM ;</div></pre></td></tr></table></figure>
<p>填充数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Frankie Johnnie &amp; Luigo Too&apos;,&apos;939 W El Camino Real, Mountain View, CA&apos;,&apos;37.386339&apos;,&apos;-122.085823&apos;);</div><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Amici\&apos;s East Coast Pizzeria&apos;,&apos;790 Castro St, Mountain View, CA&apos;,&apos;37.38714&apos;,&apos;-122.083235&apos;);</div><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Kapp\&apos;s Pizza Bar &amp; Grill&apos;,&apos;191 Castro St, Mountain View, CA&apos;,&apos;37.393885&apos;,&apos;-122.078916&apos;);</div><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Round Table Pizza: Mountain View&apos;,&apos;570 N Shoreline Blvd, Mountain View, CA&apos;,&apos;37.402653&apos;,&apos;-122.079354&apos;);</div><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Tony &amp; Alba\&apos;s Pizza &amp; Pasta&apos;,&apos;619 Escuela Ave, Mountain View, CA&apos;,&apos;37.394011&apos;,&apos;-122.095528&apos;);</div><div class="line">INSERT INTO `markers` (`name`, `address`, `lat`, `lng`) VALUES (&apos;Oregano\&apos;s Wood-Fired Pizza&apos;,&apos;4546 El Camino Real, Los Altos, CA&apos;,&apos;37.401724&apos;,&apos;-122.114646&apos;);</div></pre></td></tr></table></figure>
<p>下面，开始从表中查询数据。</p>
<p>根据latitude，longitude值，基于<a href="http://en.wikipedia.org/wiki/Haversine_formula" target="_blank" rel="external">Haversine公式</a>从表中查询数据。</p>
<p>假设我们要查询latitude=37.38714,longitude=-122.083235，范围在25英里内的前20条数据，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id, ( 3959 * acos( cos( radians(&apos;37.38714&apos;) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(&apos;-122.083235&apos;) ) + sin( radians(&apos;37.38714&apos;) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance &lt; 25 ORDER BY distance LIMIT 0, 20;</div></pre></td></tr></table></figure>
<p>如果想使用“公里”代替“英里”，将3959换成6371即可。</p>
<p>特别简单。</p>
<p>参考资料：</p>
<p><a href="https://developers.google.com/maps/articles/phpsqlsearch_v3" target="_blank" rel="external">Creating a Store Locator with PHP, MySQL &amp; Google Maps</a></p>
<p><a href="https://zh.scribd.com/presentation/2569355/Geo-Distance-Search-with-MySQL" target="_blank" rel="external">Geo/Spatial Search with MySQL</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/geolocation.png" alt=""><br>题图来自网络</p>
<p>工作中某些业务需要用到按距离排序返回结果，之前的方式是根据前端传过来来的经纬度，和指定范围的距离，算出一个坐标区间，再用这个区间的值去MySQL中查找，类]]>
    </summary>
    
      <category term="mysql" scheme="https://www.qichengzx.com/tags/mysql/"/>
    
      <category term="mysql" scheme="https://www.qichengzx.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Beego中使用过滤器]]></title>
    <link href="https://www.qichengzx.com/2017/03/06/insert-filter-in-beego.html"/>
    <id>https://www.qichengzx.com/2017/03/06/insert-filter-in-beego.html</id>
    <published>2017-03-06T00:23:47.000Z</published>
    <updated>2017-06-27T14:53:11.000Z</updated>
    <content type="html"><![CDATA[<p>为了方便调试和排错，决定在现有的beego程序里加上requestID。</p>
<p>查了些资料发现写的并不是特别清楚和详细，在此总结一下，也算是加深下印象。</p>
<p>astaxie说可以用过滤器实现，就是在Beego运行时在特定的步骤前加入。而由于我的需求比较简单，就选在了BeforeRouter。</p>
<p>在main.go中:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego/context"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"github.com/satori/go.uuid"</span></div></pre></td></tr></table></figure>
<p>在main函数中加入:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> FilterRequestID = <span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span> &#123;</div><div class="line">	requestId := uuid.NewV4().String()</div><div class="line">	ctx.Input.SetData(<span class="string">"requestId"</span>, requestId)</div><div class="line">&#125;</div><div class="line"></div><div class="line">beego.InsertFilter(<span class="string">"/*"</span>, beego.BeforeRouter, FilterRequestID)</div></pre></td></tr></table></figure>
<p>在需要使用的地方，如</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @router /requestid [get]</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyController)</span> <span class="title">Requestid</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//读取requestId</span></div><div class="line">	rid := this.Ctx.Input.GetData(<span class="string">"requestId"</span>).(<span class="keyword">string</span>)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"requestId:"</span>,rid)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyController)</span> <span class="title">Requestid</span><span class="params">()</span></span> &#123;</div><div class="line">	rid := m.Ctx.Input.GetData(<span class="string">"requestId"</span>).(<span class="keyword">string</span>)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"requestId:"</span>,rid)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实很简单，但是文档和查到的资料中都没有明确的说需要引用 “github.com/astaxie/beego/context”，导致写的时候浪费了一些时间。</p>
<p>参考资料:</p>
<p><a href="https://beego.me/docs/mvc/controller/filter.md" target="_blank" rel="external">过滤器</a><br><a href="https://gocn.io/article/95" target="_blank" rel="external">beego log中增加request id的一种方式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了方便调试和排错，决定在现有的beego程序里加上requestID。</p>
<p>查了些资料发现写的并不是特别清楚和详细，在此总结一下，也算是加深下印象。</p>
<p>astaxie说可以用过滤器实现，就是在Beego运行时在特定的步骤前加入。而由于我的需求比较简单]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言写的一个短网址服务]]></title>
    <link href="https://www.qichengzx.com/2016/12/27/shortlen-url-by-go.html"/>
    <id>https://www.qichengzx.com/2016/12/27/shortlen-url-by-go.html</id>
    <published>2016-12-27T13:27:34.000Z</published>
    <updated>2016-12-27T14:26:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/go/best-url-shortener-to-make-earn-money.png" alt=""></p>
<center>题图来自<a href="http://www.dwtricks.com/2015/05/best-10-url-shortener-networks-to-earn-money-2015.html/" target="_blank" rel="external">http://www.dwtricks.com/</a></center>

<p>“缩址，又称短址、短网址、网址缩短、缩短网址、URL缩短等，指的是一种互联网上的技术与服务。此服务可以提供一个非常短小的URL以代替原来的可能较长的URL，将长的URL地址缩短。<br>用户访问缩短后的URL时，通常将会重定向到原来的URL。”</p>
<p>– Wikipedia</p>
<p>虽然短网址早已不再那么受广泛关注。但是不妨拿来练手。</p>
<p>根据公开可以搜索到的资料，短网址一般是将一个ID转换到一串字母，生成短的网址用于传播，实际访问会重定向到原网址。如上所述。</p>
<p>那么使用Go来写这个有什么优势呢，优势之一当然是，Go部署简单，只需要copy执行文件即可。执行速度也快，甚至连HTTP服务器都不需要。</p>
<h5 id="下边就边写边说明。">下边就边写边说明。</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"database/sql"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/gin-gonic/gin"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/garyburd/redigo/redis"</span></div><div class="line">	_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/speps/go-hashids"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h6 id="定义hashid包需要的salt，即生成字符串的最短位数。">定义hashid包需要的salt，即生成字符串的最短位数。</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> (</div><div class="line">	hdSalt        = <span class="string">"mysalt"</span></div><div class="line">	hdMinLength   = <span class="number">5</span></div><div class="line">	defaultDomain = <span class="string">"http://localhost:8000/"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h6 id="定义redis和MySQL的配置信息">定义redis和MySQL的配置信息</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">	RedisClient *redis.Pool</div><div class="line">	RedisHost   = <span class="string">"127.0.0.1:6379"</span></div><div class="line">	RedisDb     = <span class="number">0</span></div><div class="line">	RedisPwd    = <span class="string">""</span></div><div class="line"></div><div class="line">	db      *sql.DB</div><div class="line">	DB_HOST = <span class="string">"tcp(127.0.0.1:3306)"</span></div><div class="line">	DB_NAME = <span class="string">"short"</span></div><div class="line">	DB_USER = <span class="string">"root"</span></div><div class="line">	DB_PASS = <span class="string">""</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h5 id="main函数，首先连接redis和MySQL。定义如下路由：">main函数，首先连接redis和MySQL。定义如下路由：</h5><ul>
<li>访问首页</li>
<li>访问hash</li>
<li>访问短网址信息页</li>
<li>生成短网址接口</li>
</ul>
<p>熟悉的朋友应该都知道，访问短网址服务的首页一般会跳转到一个固定的网址，比如渣浪微博会跳转到微博首页，Twitter则是给出“Twitter uses the t.co domain as part of a service to protect users from harmful activity”的提示。这里我们也让它跳转到一个指定的网页。</p>
<p>最后，以8080端口运行，实际线上会使用80端口，可以自行修改。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	initRedis()</div><div class="line">	initMysql()</div><div class="line"></div><div class="line">	gin.SetMode(gin.DebugMode)</div><div class="line">	r := gin.Default()</div><div class="line"></div><div class="line">	r.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</div><div class="line">		<span class="comment">//http code can be StatusFound or StatusMovedPermanently </span></div><div class="line">		c.Redirect(http.StatusFound, defaultDomain)</div><div class="line">	&#125;)</div><div class="line">	r.GET(<span class="string">"/:hash"</span>, expandUrl)</div><div class="line">	r.GET(<span class="string">"/:hash/info"</span>, expandUrlApi)</div><div class="line">	r.POST(<span class="string">"/short"</span>, shortUrl)</div><div class="line"></div><div class="line">	r.Run(<span class="string">":8000"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="连接redis和MySQL">连接redis和MySQL</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initRedis</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// 建立连接池</span></div><div class="line">	RedisClient = &amp;redis.Pool&#123;</div><div class="line">		MaxIdle:     <span class="number">1</span>,</div><div class="line">		MaxActive:   <span class="number">10</span>,</div><div class="line">		IdleTimeout: <span class="number">180</span> * time.Second,</div><div class="line">		Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(redis.Conn, error)</span></span> &#123;</div><div class="line">			c, err := redis.Dial(<span class="string">"tcp"</span>, RedisHost)</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> _, err := c.Do(<span class="string">"AUTH"</span>, RedisPwd); err != <span class="literal">nil</span> &#123;</div><div class="line">				c.Close()</div><div class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">			&#125;</div><div class="line">			c.Do(<span class="string">"SELECT"</span>, RedisDb)</div><div class="line">			<span class="keyword">return</span> c, <span class="literal">nil</span></div><div class="line">		&#125;,</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMysql</span><span class="params">()</span></span> &#123;</div><div class="line">	dsn := DB_USER + <span class="string">":"</span> + DB_PASS + <span class="string">"@"</span> + DB_HOST + <span class="string">"/"</span> + DB_NAME + <span class="string">"?charset=utf8"</span></div><div class="line">	db, _ = sql.Open(<span class="string">"mysql"</span>, dsn)</div><div class="line">	db.SetMaxOpenConns(<span class="number">5</span>)</div><div class="line">	db.SetMaxIdleConns(<span class="number">20</span>)</div><div class="line">	db.Ping()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="生成短网址的接口函数。">生成短网址的接口函数。</h5><p>根据传入的URL参数，进行简单的验证后，写入数据库。根据写入后生成的ID，再生成一个字符串，然后返回给调用方。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">shortUrl</span><span class="params">(c *gin.Context)</span></span> &#123;</div><div class="line">	longUrl := c.PostForm(<span class="string">"url"</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> longUrl == <span class="string">""</span> &#123;</div><div class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</div><div class="line">			<span class="string">"status"</span>:  <span class="number">500</span>,</div><div class="line">			<span class="string">"message"</span>: <span class="string">"请传入网址"</span>,</div><div class="line">		&#125;)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> !strings.HasPrefix(longUrl, <span class="string">"http"</span>) &#123;</div><div class="line">		longUrl = <span class="string">"http://"</span> + longUrl</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> hash, ok := insert(longUrl); ok &#123;</div><div class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</div><div class="line">			<span class="string">"status"</span>:  <span class="number">200</span>,</div><div class="line">			<span class="string">"message"</span>: <span class="string">"ok"</span>,</div><div class="line">			<span class="string">"short"</span>:   defaultDomain + hash,</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="根据HASH解析并跳转到对应的长URL，不存在则跳转到默认地址">根据HASH解析并跳转到对应的长URL，不存在则跳转到默认地址</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandUrl</span><span class="params">(c *gin.Context)</span></span> &#123;</div><div class="line">	hash := c.Param(<span class="string">"hash"</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> url, ok := findByHash(hash); ok &#123;</div><div class="line">		c.Redirect(http.StatusMovedPermanently, url)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 注意:</span></div><div class="line">	<span class="comment">// 	实际中，此应用的运行域名可能与默认域名不同，如a.com运行此程序，默认域名为b.com</span></div><div class="line">	<span class="comment">// 	当访问一个不存在的HASH或a.com时，可以跳转到任意域名，即defaultDomain</span></div><div class="line">	c.Redirect(http.StatusMovedPermanently, defaultDomain)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="根据HASH在redis中查找并返回结果，不存在则返回404状态">根据HASH在redis中查找并返回结果，不存在则返回404状态</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandUrlApi</span><span class="params">(c *gin.Context)</span></span> &#123;</div><div class="line">	hash := c.Param(<span class="string">"hash"</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> url, ok := findByHash(hash); ok &#123;</div><div class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</div><div class="line">			<span class="string">"status"</span>:  <span class="number">200</span>,</div><div class="line">			<span class="string">"message"</span>: <span class="string">"ok"</span>,</div><div class="line">			<span class="string">"data"</span>:    url,</div><div class="line">		&#125;)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 此处可以尝试在MySQL中再次查询</span></div><div class="line">	c.JSON(<span class="number">200</span>, gin.H&#123;</div><div class="line">		<span class="string">"status"</span>:  <span class="number">404</span>,</div><div class="line">		<span class="string">"message"</span>: <span class="string">"url of hash is not exist"</span>,</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="将ID转换成对应的HASH值，hdSalt与hdMinLength_会影响生成结果，确定后不要改动">将ID转换成对应的HASH值，hdSalt与hdMinLength 会影响生成结果，确定后不要改动</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">shortenURL</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	hd := hashids.NewData()</div><div class="line">	hd.Salt = hdSalt</div><div class="line">	hd.MinLength = hdMinLength</div><div class="line"></div><div class="line">	h := hashids.NewWithData(hd)</div><div class="line">	e, _ := h.Encode([]<span class="keyword">int</span>&#123;id&#125;)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> e</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="根据HASH解析出对应的ID值,_hdSalt与hdMinLength_会影响生成结果，确定后不要改动">根据HASH解析出对应的ID值, hdSalt与hdMinLength 会影响生成结果，确定后不要改动</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">expand</span><span class="params">(hash <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">	hd := hashids.NewData()</div><div class="line">	hd.Salt = hdSalt</div><div class="line">	hd.MinLength = hdMinLength</div><div class="line"></div><div class="line">	h := hashids.NewWithData(hd)</div><div class="line">	d, _ := h.DecodeWithError(hash)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> d[<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="数据库中根据ID查找">数据库中根据ID查找</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> url <span class="keyword">string</span></div><div class="line">	err := db.QueryRow(<span class="string">"SELECT url FROM url WHERE id = ?"</span>, id).Scan(&amp;url)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> url, <span class="literal">true</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>, <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="在redis中根据HASH查找">在redis中根据HASH查找</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findByHash</span><span class="params">(h <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	rc := RedisClient.Get()</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> rc.Close()</div><div class="line">	url, _ := redis.String(rc.Do(<span class="string">"GET"</span>, <span class="string">"URL:"</span>+h))</div><div class="line"></div><div class="line">	<span class="keyword">if</span> url != <span class="string">""</span> &#123;</div><div class="line">		<span class="keyword">return</span> url, <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	id := expand(h)</div><div class="line">	<span class="keyword">if</span> urldb, ok := find(id); ok &#123;</div><div class="line">		<span class="keyword">return</span> urldb, <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>, <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="将长网址插入到数据库中，并把返回的ID生成HASH和长网址存入redis">将长网址插入到数据库中，并把返回的ID生成HASH和长网址存入redis</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	stmt, _ := db.Prepare(<span class="string">`INSERT INTO url (url) values (?)`</span>)</div><div class="line">	res, err := stmt.Exec(url)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	id, _ := res.LastInsertId()</div><div class="line"></div><div class="line">	rc := RedisClient.Get()</div><div class="line">	<span class="keyword">defer</span> rc.Close()</div><div class="line"></div><div class="line">	hash := shortenURL(<span class="keyword">int</span>(id))</div><div class="line">	rc.Do(<span class="string">"SET"</span>, <span class="string">"URL:"</span>+hash, url)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> hash, <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印方法，和检查错误的方法">打印方法，和检查错误的方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Log</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	fmt.Println(v...)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkErr</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有些地方还需修改，就算是抛砖引玉吧。</p>
<p>感谢<a href="http://hashids.org/" target="_blank" rel="external">hashids</a></p>
<h4 id="Github地址_：_shortme">Github地址 ： <a href="https://github.com/qichengzx/shortme" target="_blank" rel="external">shortme</a></h4><p>相关资料：</p>
<p><a href="http://mashable.com/2008/01/08/url-shortening-services/#CgEzOrfnzPqb" target="_blank" rel="external">URL Toolbox: 90+ URL Shortening Services</a><br><a href="http://tinyurl.com/" target="_blank" rel="external">TinyURL</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/go/best-url-shortener-to-make-earn-money.png" alt=""></p>
<center>题图来自<a href="http://www.dwtricks.com/2015/05/best-10-]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="短网址" scheme="https://www.qichengzx.com/tags/%E7%9F%AD%E7%BD%91%E5%9D%80/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 福利小爬虫 爬取今日头条美女图]]></title>
    <link href="https://www.qichengzx.com/2016/12/14/toutiao-images-spider-by-golang.html"/>
    <id>https://www.qichengzx.com/2016/12/14/toutiao-images-spider-by-golang.html</id>
    <published>2016-12-14T08:28:36.000Z</published>
    <updated>2016-12-16T13:38:03.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/go/toutiao.gif" alt=""></p>
<p>写完爬取糗百热门后没几天，又开始写了爬取今日头条图片的<a href="https://github.com/qichengzx/toutiaoSpider" target="_blank" rel="external">工具</a>。</p>
<p>灵感来源于<a href="http://www.jianshu.com/p/d67b1d4b99ad" target="_blank" rel="external">Python 福利小爬虫，爬取今日头条街拍美女图</a>，作者很详细的分析了今日头条一个搜索接口，并列出了步骤。</p>
<p>而我用Go写的，稍稍做了改动，加入了可以自定义爬取标签的功能，并在写本文前完成了以 “标签/文章名/图片名” 结构存储图片的功能。</p>
<p>分析网页依然使用<a href="https://github.com/PuerkitoBio/goquery" target="_blank" rel="external">goquery</a>。</p>
<h3 id="分析接口返回结构">分析接口返回结构</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"count"</span>: <span class="number">30</span>,</div><div class="line">	<span class="attr">"action_label"</span>: <span class="string">"click_search"</span>,</div><div class="line">	<span class="attr">"return_count"</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">"has_more"</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">"page_id"</span>: <span class="string">"/search/"</span>,</div><div class="line">	<span class="attr">"cur_tab"</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">"offset"</span>: <span class="number">150</span>,</div><div class="line">	<span class="attr">"action_label_web"</span>: <span class="string">"click_search"</span>,</div><div class="line">	<span class="attr">"show_tabs"</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">"data"</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"play_effective_count"</span>: <span class="string">"6412"</span>,</div><div class="line">			<span class="attr">"media_name"</span>: <span class="string">"开物志"</span>,</div><div class="line">			<span class="attr">"repin_count"</span>: <span class="number">49</span>,</div><div class="line">			<span class="attr">"ban_comment"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"show_play_effective_count"</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">"abstract"</span>: <span class="string">""</span>,</div><div class="line">			<span class="attr">"display_title"</span>: <span class="string">""</span>,</div><div class="line">			<span class="attr">"datetime"</span>: <span class="string">"2016-12-13 21:35"</span>,</div><div class="line">			<span class="attr">"article_type"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"more_mode"</span>: <span class="literal">false</span>,</div><div class="line">			<span class="attr">"create_time"</span>: <span class="number">1481636117</span>,</div><div class="line">			<span class="attr">"has_m3u8_video"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"keywords"</span>: <span class="string">""</span>,</div><div class="line">			<span class="attr">"video_duration"</span>: <span class="number">161</span>,</div><div class="line">			<span class="attr">"has_mp4_video"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"favorite_count"</span>: <span class="number">49</span>,</div><div class="line">			<span class="attr">"aggr_type"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"article_sub_type"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"bury_count"</span>: <span class="number">2</span>,</div><div class="line">			<span class="attr">"title"</span>: <span class="string">"沃尔沃Tier 4 Final大型引擎的工作原理揭秘"</span>,</div><div class="line">			<span class="attr">"has_video"</span>: <span class="literal">true</span>,</div><div class="line">			<span class="attr">"share_url"</span>: <span class="string">"http://toutiao.com/group/6363577276176531969/?iid=0&amp;app=news_article"</span>,</div><div class="line">			<span class="attr">"id"</span>: <span class="number">6363577276176532000</span>,</div><div class="line">			<span class="attr">"source"</span>: <span class="string">"开物志"</span>,</div><div class="line">			<span class="attr">"comment_count"</span>: <span class="number">4</span>,</div><div class="line">			<span class="attr">"article_url"</span>: <span class="string">"http://toutiao.com/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"image_url"</span>: <span class="string">"http://p3.pstatp.com/list/12f0000909de79ceeabc"</span>,</div><div class="line">			<span class="attr">"middle_mode"</span>: <span class="literal">true</span>,</div><div class="line">			<span class="attr">"large_mode"</span>: <span class="literal">false</span>,</div><div class="line">			<span class="attr">"item_source_url"</span>: <span class="string">"/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"media_url"</span>: <span class="string">"http://toutiao.com/m6643043415/"</span>,</div><div class="line">			<span class="attr">"display_time"</span>: <span class="number">1481635793</span>,</div><div class="line">			<span class="attr">"publish_time"</span>: <span class="number">1481635793</span>,</div><div class="line">			<span class="attr">"go_detail_count"</span>: <span class="number">2290</span>,</div><div class="line">			<span class="attr">"image_list"</span>: [],</div><div class="line">			<span class="attr">"item_seo_url"</span>: <span class="string">"/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"video_duration_str"</span>: <span class="string">"02:41"</span>,</div><div class="line">			<span class="attr">"source_url"</span>: <span class="string">"/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"tag_id"</span>: <span class="number">6363577276176532000</span>,</div><div class="line">			<span class="attr">"natant_level"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"seo_url"</span>: <span class="string">"/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"display_url"</span>: <span class="string">"http://toutiao.com/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"url"</span>: <span class="string">"http://toutiao.com/group/6363577276176531969/"</span>,</div><div class="line">			<span class="attr">"level"</span>: <span class="number">0</span>,</div><div class="line">			<span class="attr">"digg_count"</span>: <span class="number">4</span>,</div><div class="line">			<span class="attr">"behot_time"</span>: <span class="number">1481635793</span>,</div><div class="line">			<span class="attr">"tag"</span>: <span class="string">"news_car"</span>,</div><div class="line">			<span class="attr">"has_gallery"</span>: <span class="literal">false</span>,</div><div class="line">			<span class="attr">"has_image"</span>: <span class="literal">false</span>,</div><div class="line">			<span class="attr">"highlight"</span>: &#123;</div><div class="line">			<span class="attr">"source"</span>: [],</div><div class="line">			<span class="attr">"abstract"</span>: [],</div><div class="line">			<span class="attr">"title"</span>: []</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">"group_id"</span>: <span class="number">6363577276176532000</span>,</div><div class="line">			<span class="attr">"middle_image"</span>: <span class="string">"http://p3.pstatp.com/list/12f0000909de79ceeabc"</span></div><div class="line">		&#125;,</div><div class="line">	],</div><div class="line">	<span class="attr">"message"</span>: <span class="string">"success"</span>,</div><div class="line">	<span class="attr">"action_label_pgc"</span>: <span class="string">"click_search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嗯，特别多，其实只需要 data 里的内容就可以了。</p>
<p>所以</p>
<h4 id="构造一个请求结果的struct。">构造一个请求结果的struct。</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ApiData <span class="keyword">struct</span> &#123;</div><div class="line">	Has_more <span class="keyword">int</span>    <span class="string">`json:"has_more"`</span></div><div class="line">	Data     []Data <span class="string">`json:"data"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看下data里，嗯，没用的又一大堆。</p>
<h4 id="只需要文章链接就够了。">只需要文章链接就够了。</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</div><div class="line">	Article_url <span class="keyword">string</span> <span class="string">`json:"article_url"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了文章链接，那就好说了，啥都好商量。</p>
<h4 id="分析文章结构">分析文章结构</h4><p>id=”J_content” 下是文章的主要内容，class=”article-title”是文章标题，class=”article-content”里是文章内容，只需要article-content里所有img元素就可以了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Img <span class="keyword">struct</span> &#123;</div><div class="line">	Src <span class="keyword">string</span> <span class="string">`json:"src"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于需要一直更改查询接口的offset参数，所以直接把接口地址拿到外边做了全局变量。并且默认存在下一页。tag用来表示当前爬取的标签的名称。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">	host    <span class="keyword">string</span> = <span class="string">"http://www.toutiao.com/search_content/?format=json&amp;keyword=%s&amp;count=30&amp;offset=%d"</span></div><div class="line">	hasmore <span class="keyword">bool</span>   = <span class="literal">true</span></div><div class="line">	tag     <span class="keyword">string</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="正菜">正菜</h3><h4 id="0-_接收参数">0. 接收参数</h4><p>首先，接收并遍历命令行中传入的标签。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> _, tag = <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</div><div class="line">		hasmore = <span class="literal">true</span></div><div class="line">		getByTag()</div><div class="line">	&#125;</div><div class="line">	log.Println(<span class="string">"全部抓取完毕"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个循环开始时重置 hasmore 。</p>
<h4 id="1-_循环请求接口">1. 循环请求接口</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getByTag</span><span class="params">()</span></span> &#123;</div><div class="line">	i, offset := <span class="number">1</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">if</span> hasmore &#123;</div><div class="line">			log.Printf(<span class="string">"标签: '%s'，第 '%d' 页, OFFSET: '%d' \n"</span>, tag, i, offset)</div><div class="line">			tmpUrl := fmt.Sprintf(host, tag, offset)</div><div class="line">			getResFromApi(tmpUrl)</div><div class="line">			offset += <span class="number">30</span></div><div class="line">			i++</div><div class="line"></div><div class="line">			time.Sleep(<span class="number">500</span> * time.Millisecond)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	log.Printf(<span class="string">"标签: '%s', 共 %v 页，爬取完毕\n"</span>, tag, i<span class="number">-1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重置当前页，和当前offset。页数从第一页开始，主要是显示进度看起来更人性化一些。但是程序员的世界是从0开始。。。想改成0就改成0吧。</p>
<p>hasmore = true 表示存在下一页，使用fmt包的Sprintf方法格式化请求链接。然后对offset+30，对当前页i+1。再之后停顿了500毫秒。</p>
<p>这里其实有个问题，如果实际内容以每页30请求，可能恰好有150条，即每页数量的整数倍，但是这个时候接口返回的has_more依然等于1，即服务端认为还有下一页。。。但是其实没有了，所以会有一次空循环。</p>
<h4 id="2-_处理请求结果">2. 处理请求结果</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getResFromApi</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	resp, err := http.Get(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line">	body, err := ioutil.ReadAll(resp.Body)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> res ApiData</div><div class="line">	json.Unmarshal([]<span class="keyword">byte</span>(<span class="keyword">string</span>(body)), &amp;res)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> res.Data &#123;</div><div class="line">		getImgByPage(item.Article_url)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> res.Has_more == <span class="number">0</span> &#123;</div><div class="line">		hasmore = <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没啥说的，拿到每一个请求接口的链接后打开，把结果数组中的data解析到ApiData中，于是就拿到了文章链接，然后遍历处理。</p>
<p>遍历完后要看下has_more的值，如果为0表示没有下一页了，修改全局变量hasmore的值，结束最外层的循环。</p>
<h4 id="3-_处理文章">3. 处理文章</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImgByPage</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	<span class="comment">//部分请求结果中包含其他网站的链接，会导致下面的query出现问题</span></div><div class="line">	<span class="keyword">if</span> strings.Contains(url, <span class="string">"toutiao.com"</span>) &#123;</div><div class="line">		doc, err := goquery.NewDocument(url)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		title := doc.Find(<span class="string">"#article-main .article-title"</span>).Text()</div><div class="line">		title = strings.Replace(title, <span class="string">"/"</span>, <span class="string">""</span>, <span class="number">-1</span>)</div><div class="line">		os.MkdirAll(tag+<span class="string">"/"</span>+title, <span class="number">0777</span>)</div><div class="line"></div><div class="line">		doc.Find(<span class="string">"#J_content .article-content img"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</div><div class="line">			src, _ := s.Attr(<span class="string">"src"</span>)</div><div class="line">			log.Println(title, src)</div><div class="line">			getImgAndSave(src, title)</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最外层加了判断，是因为有一部分结果的链接是其他网站的。。。。</p>
<p>虽然这个判断很low，但是也够用了。</p>
<p>然后终于该用上goquery了，拿到标题，然后遍历文章内容中的img标签，就拿到了每一篇文章的每一张图片。</p>
<h4 id="4-_保存图片">4. 保存图片</h4><p>在上一步把图片地址和文章名称传递给了getImgAndSave。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImgAndSave</span><span class="params">(url <span class="keyword">string</span>, dirname <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	path := strings.Split(url, <span class="string">"/"</span>)</div><div class="line">	<span class="keyword">var</span> name <span class="keyword">string</span></div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">1</span> &#123;</div><div class="line">		name = path[<span class="built_in">len</span>(path)<span class="number">-1</span>]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	resp, err := http.Get(url)</div><div class="line">	<span class="keyword">defer</span> resp.Body.Close()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</div><div class="line">		log.Fatal(<span class="string">"请求失败"</span>, err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	contents, err := ioutil.ReadAll(resp.Body)</div><div class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> x := <span class="built_in">recover</span>(); x != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	err = ioutil.WriteFile(<span class="string">"./"</span>+tag+<span class="string">"/"</span>+dirname+<span class="string">"/"</span>+name+<span class="string">".jpg"</span>, contents, <span class="number">0644</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"写入文件失败"</span>, err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先分割图片链接，把最后一个”/“后的内容当成文件名。</p>
<p>后边get图片内容，但是有时候会出现对方服务器出错的情况，http状态码为500，所以加了判断请求是否成功的判断。</p>
<p>然后就是读取内容，保存到文件中了。</p>
<p>这里使用了WriteFile方式，查资料的时候还看到有闲Create文件，然后io.Copy写入的。</p>
<h4 id="到这里就结束了。">到这里就结束了。</h4><h3 id="RUN">RUN</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go <span class="keyword">run</span><span class="bash"> main.go 美女 模特</span></div></pre></td></tr></table></figure>
<p>等着看图吧。</p>
<p>github地址：<a href="https://github.com/qichengzx/toutiaoSpider" target="_blank" rel="external">toutiaoSpider</a>，欢迎star。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/go/toutiao.gif" alt=""></p>
<p>写完爬取糗百热门后没几天，又开始写了爬取今日头条图片的<a href="https://github.com/qichengzx/toutiaoSpider" target="]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="goquery" scheme="https://www.qichengzx.com/tags/goquery/"/>
    
      <category term="今日头条" scheme="https://www.qichengzx.com/tags/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言写爬取糗百热门帖子]]></title>
    <link href="https://www.qichengzx.com/2016/12/04/go-qiubai.html"/>
    <id>https://www.qichengzx.com/2016/12/04/go-qiubai.html</id>
    <published>2016-12-04T07:49:04.000Z</published>
    <updated>2016-12-07T12:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>闲来无事，想着也用Go来写个爬虫之类的东西，我并不知道这算不算严格意义上的爬虫。</p>
<p>思前想后，觉得写个爬糗百热门的脚本吧，一来足够简单，二来大概熟悉下流程。</p>
<p>首先，选了<a href="https://github.com/PuerkitoBio/goquery" target="_blank" rel="external">goquery</a>这个包来解析HTML，声称与jquery相似的用法，事实上也确实是这样，非常方便。</p>
<p>定个目标，只爬取列表页的帖子内容，作者和回帖都不管。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"github.com/PuerkitoBio/goquery"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//定义结构体</span></div><div class="line"><span class="keyword">type</span> Qb <span class="keyword">struct</span> &#123;</div><div class="line">	Id <span class="keyword">int</span> <span class="string">`json:"id"`</span></div><div class="line">	Content <span class="keyword">string</span> <span class="string">`json:"content"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> url = <span class="string">"http://www.qiushibaike.com/hot"</span></div><div class="line"></div><div class="line">	doc, err := goquery.NewDocument(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> qb []Qb</div><div class="line">	doc.Find(<span class="string">"#content-left .article"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</div><div class="line">		<span class="comment">//s即为当前的 .article 元素，查找下级中的span元素的内容。</span></div><div class="line">		content := s.Find(<span class="string">".content span"</span>).Text()</div><div class="line">		qb = <span class="built_in">append</span>(qb, Qb&#123;Id: i, Content: content&#125;)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	log.Println(qb)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“#content-left .article” 即每一条帖子作为元素的class。</p>
<p>将会输出：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;<span class="number">0</span> 结婚十三周年那天，老婆望着一大桌子菜不禁泪流满面。我帮她拭去泪水:瞧你，都激动的哭了!老婆却说:我激动个屁!想想这十三年跟着你受的罪，我实在忍不住啊!&#125; </div><div class="line">	&#123;<span class="number">1</span> 前几天天冷，就给妹妹买了条围巾，然后她说谢谢哥，本人本着组织精神说你应该谢谢你嫂子，她惊讶的对我说:哥，你谈女朋友了。我说:没有，你应该感谢她一直到现在都没出现，哥才有钱给你买东西&#125; </div><div class="line">	&#123;<span class="number">2</span> 跟哥们去理发，剪头的是个妹纸。。妹纸:“你有女朋友么？”哥们一听，突然兴奋的说:“没有！”妹纸:“我是个实习生，本来想给你换大工的，看你没有女朋友，我就随意剪了！”哥们你别看我，我就是一口水没忍住，喷你脸上了而已！&#125; </div><div class="line">	&#123;<span class="number">3</span> 老妈比较胖，小时候每次打我我都是撒腿就跑，老妈没一次抓到我的。直到老妈学会骑自行车以后，那鞭子挥得………真像套马杆的汉子，威武雄壮……&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>那么如何展示到页面中呢。</p>
<p>我选择了 <a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a> 框架。</p>
<p>修改一下代码。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	r := gin.Default()</div><div class="line">	r.LoadHTMLGlob(<span class="string">"public/*"</span>)</div><div class="line">	r.GET(<span class="string">"/"</span>, Index)</div><div class="line">	r.Run()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> url = <span class="string">"http://www.qiushibaike.com/hot"</span></div><div class="line"></div><div class="line">	doc, err := goquery.NewDocument(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> result []Qb</div><div class="line">	doc.Find(<span class="string">"#content-left .article"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</div><div class="line">		content := s.Find(<span class="string">".content span"</span>).Text()</div><div class="line">		result = <span class="built_in">append</span>(result, Qb&#123;Id: i, Content: content&#125;)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	c.HTML(http.StatusOK, <span class="string">"index.html"</span>, gin.H&#123;</div><div class="line">		<span class="string">"items"</span>: result,</div><div class="line">		<span class="string">"title"</span>: <span class="string">"糗百热门"</span></div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r := gin.Default()</div><div class="line">r.LoadHTMLGlob(<span class="string">"public/*"</span>)</div><div class="line">r.GET(<span class="string">"/"</span>, Index)</div></pre></td></tr></table></figure></p>
<p>这里加载了public目录中的模板，然后下一行，表示，接收到 “/“ 的请求时，调用Index方法去处理。</p>
<p>到这里，文档的抓取，解析，构造数据就已经完成，下一步，看一下怎么显示到页面中。</p>
<figure class="highlight twig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="template-variable">&#123;&#123; .title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered table-hover"</span>&gt;</span></div><div class="line">        <span class="template-variable">&#123;&#123; <span class="name">range</span> $item := .items &#125;&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="template-variable">&#123;&#123; $item.Content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="template-variable">&#123;&#123; end &#125;&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>使用 “{{ }}“ 输出后端发送过来的数据。使用 range 迭代数据。与</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> pos, <span class="keyword">char</span> := range <span class="keyword">str</span> &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一样。</p>
<p>完整的模板代码：</p>
<figure class="highlight twig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="comment">&lt;!-- public/index.html --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>糗百<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>  <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="template-variable">&#123;&#123; .title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-bordered table-hover"</span>&gt;</span></div><div class="line">                        <span class="template-variable">&#123;&#123; <span class="name">range</span> $item := .items &#125;&#125;</span><span class="xml"></span></div><div class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="template-variable">&#123;&#123; $item.Content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                        <span class="template-variable">&#123;&#123; end &#125;&#125;</span><span class="xml"></span></div><div class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>这样，运行一下，就可以了。</p>
<p>gin框架默认使用8080端口，打开<a href="http://localhost:8080就可以看到一个极简版的糗百热门了。" target="_blank" rel="external">http://localhost:8080就可以看到一个极简版的糗百热门了。</a></p>
<p>问题来了，怎么增加一个分页呢？</p>
<p>完整代码见:</p>
<p><a href="https://github.com/qichengzx/goqiubai" target="_blank" rel="external">Github地址</a></p>
<h4 id="后记">后记</h4><p>其实早就写完了这篇，但是hexo生成的时候由于 <a href="https://hexo.io/docs/troubleshooting.html#Escape-Contents" target="_blank" rel="external">“{{“的问题</a>，生成一直失败，一直拖到现在。</p>
<p>实际代码中需要去掉 “{ % raw % }” 相关部分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>闲来无事，想着也用Go来写个爬虫之类的东西，我并不知道这算不算严格意义上的爬虫。</p>
<p>思前想后，觉得写个爬糗百热门的脚本吧，一来足够简单，二来大概熟悉下流程。</p>
<p>首先，选了<a href="https://github.com/PuerkitoBio/]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="糗百" scheme="https://www.qichengzx.com/tags/%E7%B3%97%E7%99%BE/"/>
    
      <category term="goquery" scheme="https://www.qichengzx.com/tags/goquery/"/>
    
      <category term="gin" scheme="https://www.qichengzx.com/tags/gin/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac brew php7.1环境下安装Yaf]]></title>
    <link href="https://www.qichengzx.com/2016/11/02/install-yaf-on-mac.html"/>
    <id>https://www.qichengzx.com/2016/11/02/install-yaf-on-mac.html</id>
    <published>2016-11-02T09:57:38.000Z</published>
    <updated>2016-11-30T13:16:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/php/think201-emergence-of-php7.jpg" alt=""></p>
<p>开发机一直使用brew来安装PHP及其他的环境，今天把PHP升到7.1，由于7.1版本下还没有<a href="http://www.laruence.com/manual/" target="_blank" rel="external">yaf</a>的源，所以无法使用brew安装，只能编译安装了。</p>
<p>首先下载yaf，解压，进入目录。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone git<span class="meta">@github</span>.<span class="string">com:</span>laruence/yaf.git</div><div class="line"></div><div class="line">$(brew --prefix homebrew<span class="regexp">/php/</span>php71)<span class="regexp">/bin/</span>phpize</div><div class="line"></div><div class="line">.<span class="regexp">/configure --with-php-config=$(brew --prefix homebrew/</span>php<span class="regexp">/php71)/</span>bin/php-config</div><div class="line"></div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line">make test</div></pre></td></tr></table></figure>
<p>$(brew –prefix homebrew/php/php71) 即 brew info php71结果中的path值。</p>
<p>由于brew安装PHP会在php.ini同级目录创建conf.d目录，并把扩展的配置文件写在这里，一目了然知道都安装了哪些扩展，所以也以同样方式在此目录创建ext-yaf.ini。</p>
<p>make install 后会显示，具体路径可能会不一样。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Installing shared <span class="symbol">extensions:</span>     /usr/local/Cellar/php71/<span class="number">7.1</span>.<span class="number">0</span>-rc.<span class="number">5_9</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">php</span>/<span class="title">extensions</span>/<span class="title">no</span>-<span class="title">debug</span>-<span class="title">non</span>-<span class="title">zts</span>-20160303/</span></div></pre></td></tr></table></figure>
<p>这个目录即扩展.so的存放目录。下边会用到。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yaf]</div><div class="line"><span class="attribute">extension</span>=<span class="string">"/usr/local/opt/php71/lib/php/extensions/no-debug-non-zts-20160303/yaf.so"</span></div><div class="line">yaf.environ=<span class="string">"dev"</span></div><div class="line"><span class="comment">;yaf.use_namespace = 1</span></div></pre></td></tr></table></figure>
<p>至此，重启php-fpm就可以了。</p>
<p>####<br>图片来自：<a href="https://think201.com/blog/2016/emergence-of-php7/" target="_blank" rel="external">Emergence of PHP7</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/php/think201-emergence-of-php7.jpg" alt=""></p>
<p>开发机一直使用brew来安装PHP及其他的环境，今天把PHP升到7.1，由于7.1版本下还没有<a href="http://www.l]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Docker部署Golang Beego框架应用]]></title>
    <link href="https://www.qichengzx.com/2016/10/21/beego-in-docker.html"/>
    <id>https://www.qichengzx.com/2016/10/21/beego-in-docker.html</id>
    <published>2016-10-21T02:02:02.000Z</published>
    <updated>2016-10-30T02:49:27.000Z</updated>
    <content type="html"><![CDATA[<p>Docker是什么就不说了。<br>Golang是什么也不说了。<br>Beego是什么就更不用说了。</p>
<p>最近Beego项目完成，研究怎么部署。因为Docker部署起来更简单更快速，所以就说下怎么在docker里部署beego应用。</p>
<h4 id="写在前面">写在前面</h4><p>假设你的应用路径为 /go/app；<br>假设已配置好docker的相关东西。<br>假设使用 <a href="https://github.com/tools/godep" target="_blank" rel="external">godep</a> 作为依赖管理工具<br>示例中开放端口为80，需要与app.conf中的端口一致，可以自行修改。</p>
<h4 id="配置">配置</h4><p>在 /go/app 目录新建Dockerfile。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">FROM golan<span class="variable">g:1</span>.<span class="number">7.1</span>-alpine</div><div class="line"></div><div class="line">MAINTAINER youremail &lt;youremail@xxx.<span class="keyword">com</span>&gt;</div><div class="line"></div><div class="line">RUN apk <span class="built_in">add</span> --<span class="keyword">update</span> <span class="keyword">go</span> git</div><div class="line"></div><div class="line">ADD ./ /<span class="keyword">go</span>/src/app</div><div class="line"></div><div class="line">RUN <span class="keyword">cd</span> /<span class="keyword">go</span>/src/app \</div><div class="line">	&amp;&amp; <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/astaxie/beego \</div><div class="line">	&amp;&amp; <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/tools/godep \</div><div class="line">	&amp;&amp; godep <span class="keyword">update</span> -goversion \</div><div class="line">	&amp;&amp; godep <span class="built_in">get</span> \</div><div class="line">	&amp;&amp; godep save \</div><div class="line">	&amp;&amp; <span class="keyword">go</span> build</div><div class="line"></div><div class="line">EXPOSE <span class="number">80</span></div><div class="line"></div><div class="line">EXTRYPOINT /<span class="keyword">go</span>/src/app/app</div></pre></td></tr></table></figure>
<p>本例使用 golang:1.7.1-alpine 作为基础镜像。golang的所有镜像见<a href="https://hub.docker.com/_/golang/" target="_blank" rel="external">这里</a>。</p>
<h4 id="构建">构建</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t app .</div></pre></td></tr></table></figure>
<h4 id="运行">运行</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 8080:80 app</span></div></pre></td></tr></table></figure>
<h4 id="访问">访问</h4><p>使用nginx反向代理访问docker中的go应用。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  <span class="keyword">app</span>.com;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line">    access_log  logs/<span class="keyword">app</span>.access.<span class="keyword">log</span>;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files /_not_exists_ @backend;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!-<span class="keyword">e</span> <span class="variable">$request_filename</span>) &#123;</div><div class="line">        <span class="keyword">return</span> 404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location @backend &#123;</div><div class="line">        proxy_set_header X-Forwarded-<span class="keyword">For</span> <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header Host            <span class="variable">$http_host</span>;</div><div class="line"></div><div class="line">        proxy_pass http:<span class="comment">//192.168.99.100:8080; // 192.168.99.100为docker machine的ip,8080为 docker run 时指定的本地端口。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="相关资料">相关资料</h4><p><a href="https://yq.aliyun.com/articles/57247" target="_blank" rel="external">如何使用Docker快速部署go-web应用程序</a><br><a href="https://blog.golang.org/docker" target="_blank" rel="external">Deploying Go servers with Docker</a><br><a href="http://www.infoq.com/cn/articles/how-to-deploy-a-go-web-application-with-docker?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk" target="_blank" rel="external">如何使用Docker部署Go Web应用程序</a><br><a href="https://www.iron.io/the-easiest-way-to-develop-with-go%E2%80%8A-%E2%80%8Aintroducing-a-docker-based-go-tool/" target="_blank" rel="external">The Easiest Way to Develop with Go — Introducing a Docker Based Go Tool</a><br><a href="https://semaphoreci.com/community/tutorials/how-to-deploy-a-go-web-application-with-docker" target="_blank" rel="external">How To Deploy a Go Web Application with Docker</a><br><a href="https://beego.me/docs/deploy/nginx.md" target="_blank" rel="external">nginx 部署</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Docker是什么就不说了。<br>Golang是什么也不说了。<br>Beego是什么就更不用说了。</p>
<p>最近Beego项目完成，研究怎么部署。因为Docker部署起来更简单更快速，所以就说下怎么在docker里部署beego应用。</p>
<h4 id="写在]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel 手动创建分页]]></title>
    <link href="https://www.qichengzx.com/2016/09/28/custom-data-pagination-in-laravel-with-arrays.html"/>
    <id>https://www.qichengzx.com/2016/09/28/custom-data-pagination-in-laravel-with-arrays.html</id>
    <published>2016-09-28T07:43:13.000Z</published>
    <updated>2016-10-30T02:43:04.000Z</updated>
    <content type="html"><![CDATA[<p>有些情况下会从接口读取数据，数据较多时会用到分页，Laravel为这种需求提供了很方便的方法。</p>
<p><a href="https://laravel.com/docs/5.2/pagination" target="_blank" rel="external">官方文档</a>里几句略过，并没有详细说明，经过查找资料，发现如下方法可行。</p>
<h3 id="首先use_LengthAwarePaginator">首先use LengthAwarePaginator</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Pagination</span>\<span class="title">LengthAwarePaginator</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</div></pre></td></tr></table></figure>
<p>假设原内容是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$result = [</div><div class="line">    <span class="string">'item1'</span>,</div><div class="line">    <span class="string">'item2'</span>,</div><div class="line">    <span class="string">'item3'</span>,</div><div class="line">    <span class="string">'item4'</span>,</div><div class="line">    <span class="string">'item5'</span>,</div><div class="line">    <span class="string">'item6'</span>,</div><div class="line">];</div></pre></td></tr></table></figure>
<p>对于一个列表来说，item一般会是个array，这里忽略。</p>
<h3 id="情况1，已知总数，只有部分数据">情况1，已知总数，只有部分数据</h3><p>由于本人所使用的接口有页码和每页数量的参数，所以每次查询返回的其实就是每一页的内容了，而接口又返回了符合条件的总数count，所以使用如下方式即可：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$perPage = <span class="number">10</span>;</div><div class="line">$count = <span class="number">100</span>;<span class="comment">//假设这里是接口返回的总数</span></div><div class="line"><span class="comment">//创建collection</span></div><div class="line">$collection = <span class="keyword">new</span> Collection($data);</div><div class="line"></div><div class="line">$currentPageResults = $collection-&gt;all();</div><div class="line"></div><div class="line"><span class="comment">//生成分页</span></div><div class="line">$data = <span class="keyword">new</span> LengthAwarePaginator($currentPageResults, $count, $perPage);</div><div class="line"><span class="comment">//设置分页的链接</span></div><div class="line">$data-&gt;setPath($request-&gt;url());</div></pre></td></tr></table></figure>
<h3 id="情况2，未知总数，有全部数据">情况2，未知总数，有全部数据</h3><p>而如果$data是全部数据呢，比如100条数据全部返回，然后要生成一个每页10条记录的分页，可以这样做：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取当前页码</span></div><div class="line">$currentPage = LengthAwarePaginator::resolveCurrentPage();</div><div class="line"></div><div class="line"><span class="comment">//从数组创建一个laravel collection</span></div><div class="line">$collection = <span class="keyword">new</span> Collection($searchResults);</div><div class="line"></div><div class="line"><span class="comment">//设置每页数量</span></div><div class="line">$perPage = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">//从collection分割数据</span></div><div class="line">$currentPageSearchResults = $collection-&gt;slice($currentPage * $perPage, $perPage)-&gt;all();</div><div class="line"></div><div class="line"><span class="comment">//生成分页</span></div><div class="line">$paginatedSearchResults= <span class="keyword">new</span> LengthAwarePaginator($currentPageSearchResults, count($collection), $perPage);</div><div class="line"><span class="comment">//设置分页的链接</span></div><div class="line">$data-&gt;setPath($request-&gt;url());</div></pre></td></tr></table></figure>
<h3 id="区别">区别</h3><p>其实两者只是相差了一次分割数据。</p>
<h3 id="最后">最后</h3><p>在视图里依然使用</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;!! $data-&gt;render() !!&#125;</div></pre></td></tr></table></figure>
<p>输出分页组件。</p>
<p>看起来还挺简单的。</p>
<h3 id="参考链接：">参考链接：</h3><p><a href="https://laravel.com/docs/5.2/pagination" target="_blank" rel="external">官方文档pagination</a></p>
<p><a href="http://psampaz.github.io/custom-data-pagination-with-laravel-5/" target="_blank" rel="external">Custom data pagination with Laravel 5</a></p>
<p><a href="http://www.acekyd.com/2016/02/28/custom-pagination-view-in-laravel-5-with-arrays/" target="_blank" rel="external">CUSTOM PAGINATION VIEW IN LARAVEL 5 WITH ARRAYS</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有些情况下会从接口读取数据，数据较多时会用到分页，Laravel为这种需求提供了很方便的方法。</p>
<p><a href="https://laravel.com/docs/5.2/pagination" target="_blank" rel="external">官]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="laravel" scheme="https://www.qichengzx.com/tags/laravel/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang XMl 转 JSON]]></title>
    <link href="https://www.qichengzx.com/2016/09/16/convert-xml-to-json-in-golang.html"/>
    <id>https://www.qichengzx.com/2016/09/16/convert-xml-to-json-in-golang.html</id>
    <published>2016-09-16T03:28:20.000Z</published>
    <updated>2016-09-18T13:19:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/golang.png" alt=""></p>
<h4 id="起因">起因</h4><p>某个上古时代的API，依然在返回XML格式的数据，更奇葩的是，GBK格式的。</p>
<p>用Go顺利的写到了发送数据，接收数据，然后取值有点麻烦啊。。。。</p>
<p>各种Google后，终于解决，但是不保证是唯一，正确，最合适的答案。</p>
<h4 id="说在前边">说在前边</h4><p>本文假设要解析的XMl数据为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"GBK"</span> <span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">response</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">status</span>&gt;</span>200<span class="tag">&lt;/<span class="name">status</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">response</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要解决的问题是取出“200”这个状态值。</p>
<h4 id="导入包">导入包</h4><p>解析XML使用了”encoding/xml”这个包。</p>
<p>所以先导入这个包。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"encoding/xml"</span></div></pre></td></tr></table></figure>
<h4 id="定义struct">定义struct</h4><p>定义一个自定义类型的Response</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</div><div class="line">    Status <span class="keyword">int</span> <span class="string">`xml:"status" json:"status"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个Response类型的变量</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result Response</div></pre></td></tr></table></figure>
<h4 id="偷懒转格式">偷懒转格式</h4><p>因为”encoding/xml”不支持GBK格式的XML，而返回的内容又固定标明了编码是GBK，所以这里偷懒，直接把GBK替换成UTF-8，本例中不影响结果。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xmlstr := <span class="string">`?xml version="1.0" encoding="GBK" ?&gt;</span></div><div class="line">&lt;response&gt;</div><div class="line">    &lt;status&gt;200&lt;/status&gt;</div><div class="line">&lt;/response&gt;</div><div class="line">`</div><div class="line">xmlstr = strings.Replace(xmlstr, <span class="string">"GBK"</span>, <span class="string">"UTF-8"</span>, <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<p>使用strings包，替换“GBK”，相信根据参数顺序能看出各个参数的意义，最后一个参数：-1，为替换全部，即字符串中所有出现的第二个参数全部替换。</p>
<h4 id="解析，转换，取值">解析，转换，取值</h4><p>使用encoding/jon，go-simplejson包</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//解析XML</span></div><div class="line">err := xml.Unmarshal([]<span class="keyword">byte</span>(xmlstr), &amp;result)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">  log.Fatal(err)</div><div class="line">&#125;</div><div class="line">log.Printf(<span class="string">"XML:%v \n"</span>, result) </div><div class="line"></div><div class="line"><span class="comment">//转换成JSON</span></div><div class="line">res, err := json.Marshal(result)</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">  log.Fatal(err)</div><div class="line">&#125;</div><div class="line">log.Printf(<span class="string">"JSON:%s \n"</span>, res)</div><div class="line"></div><div class="line">js, err := simplejson.NewJson([]<span class="keyword">byte</span>(res))</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">  log.Fatal(err)</div><div class="line">&#125;</div><div class="line">status, err := js.Get(<span class="string">"status"</span>).Int()</div><div class="line"></div><div class="line">log.Printf(<span class="string">"STATUS:%v \n"</span>, status)</div></pre></td></tr></table></figure>
<p>以上是本人在处理XML 转 JSON 时的解决办法，应该还有更简单更合适的方案。仅供参考。</p>
<h4 id="完整代码：">完整代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"encoding/xml"</span></div><div class="line">    <span class="string">"encoding/json"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">    simplejson <span class="string">"github.com/bitly/go-simplejson"</span></div><div class="line">)</div><div class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</div><div class="line">    Status <span class="keyword">int</span> <span class="string">`xml:"status" json:"status"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> result Response</div><div class="line"></div><div class="line">    <span class="comment">//多行字符串，使用反引号`</span></div><div class="line">    xmlstr := <span class="string">`&lt;?xml version="1.0" encoding="GBK" ?&gt;</span></div><div class="line">&lt;response&gt;</div><div class="line">    &lt;status&gt;200&lt;/status&gt;</div><div class="line">&lt;/response&gt;`</div><div class="line"></div><div class="line">    xmlstr = strings.Replace(xmlstr, <span class="string">"GBK"</span>, <span class="string">"UTF-8"</span>, <span class="number">-1</span>)</div><div class="line"></div><div class="line">    err := xml.Unmarshal([]<span class="keyword">byte</span>(xmlstr), &amp;result)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">    log.Printf(<span class="string">"XML:%v"</span>,result)</div><div class="line"></div><div class="line">    r, err := json.Marshal(result)</div><div class="line">    <span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    log.Printf(<span class="string">"JSON:%s"</span>, r)</div><div class="line"></div><div class="line">    js, err := simplejson.NewJson([]<span class="keyword">byte</span>(r))</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">    status, err := js.Get(<span class="string">"status"</span>).Int()</div><div class="line">    log.Printf(<span class="string">"VALUE:%v"</span>,status)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="发现问题：">发现问题：</h4><p>今天（2016-09-18），再看这段代码，发现跟另一个程序里有些不一样。</p>
<p>另一个程序里是这样的：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Response</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    Status <span class="keyword">int</span> `xml:<span class="string">"status"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以正常返回值，但是在本文中的示例却不能正常输出status值，而是会输出空，看了半天发现，使用 log 时：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">log</span>.Printf(<span class="string">"VALUE:%v"</span>,<span class="built_in">status</span>)</div></pre></td></tr></table></figure></p>
<p>如果struct没有写<br>“json:”status””，就不能输出，如果换成fmt，struct就可以不写“json:”status”。结果是一样的，其中的原因还要再查资料研究下。</p>
<p>参考文章：</p>
<p><a href="http://blog.studygolang.com/2012/12/%e6%a0%87%e5%87%86%e5%ba%93-xml%e5%a4%84%e7%90%86%ef%bc%88%e4%b8%80%ef%bc%89/" target="_blank" rel="external">标准库—XML处理（一）</a></p>
<p><a href="https://play.golang.org/p/7HNLEUnX-m" target="_blank" rel="external">https://play.golang.org/p/7HNLEUnX-m</a></p>
<p><a href="https://play.golang.org/p/m99B12RaLe" target="_blank" rel="external">https://play.golang.org/p/m99B12RaLe</a></p>
<p><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/07.1.html" target="_blank" rel="external">XML处理</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/golang.png" alt=""></p>
<h4 id="起因">起因</h4><p>某个上古时代的API，依然在返回XML格式的数据，更奇葩的是，GBK格式的。</p>
<p>用Go顺利的写到了发送数据，接收数据，然后取值有点麻烦]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Go]]></title>
    <link href="https://www.qichengzx.com/2016/09/11/Hello-Go.html"/>
    <id>https://www.qichengzx.com/2016/09/11/Hello-Go.html</id>
    <published>2016-09-11T09:21:03.000Z</published>
    <updated>2016-09-11T09:21:09.000Z</updated>
    <content type="html"><![CDATA[<h5 id="Mac_安装_GO">Mac 安装 GO</h5><p>本人使用了Brew来安装。</p>
<h5 id="安装前首先更新Brew。">安装前首先更新Brew。</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update &amp;&amp; <span class="keyword">brew </span>upgrade</div></pre></td></tr></table></figure>
<h5 id="安装Go">安装Go</h5><p>使用brew安装go</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>go</div></pre></td></tr></table></figure>
<h5 id="设置$GOPATH">设置$GOPATH</h5><p>Go从1.1版本开始必须设置这个变量，也就是说通过以上方式安装后就必须要设置$GOPATH了。</p>
<p>这个目录用来存放Go源码，可运行文件，和编译之后的包文件。</p>
<p>Mac系统设置</p>
<p>在bash中加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export GOPATH=/your/path</div></pre></td></tr></table></figure>
<p>以上目录需要存在，不存在就自己手动创建一个。</p>
<p>然后运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>替换成你自己使用的shell，如.bashrc等。</p>
<p>然后，需要在/your/path目录下，新建 pkg，bin，src目录。</p>
<p>​    src目录存放源代码，如hello.go</p>
<p>​    pkg目录存放编译后的文件，如hello.a</p>
<p>​    bin目录存放生成后的可执行文件</p>
<p>src目录就是主要开发目录。如hello项目，则在src下新建hello目录。</p>
<p>到这里，就可以开始Go之旅了。</p>
<h5 id="Hello_Go">Hello Go</h5><p>需要注意的是，在Go中，包名和文件名是可以不同的，包名为main的时候即为可以独立运行的包。</p>
<p>在src目录新建hello目录，创建hello.go文件。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main <span class="comment">//包名</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> <span class="comment">//导入一个系统级别的fmt包</span></div><div class="line"></div><div class="line"><span class="comment">//使用func定义函数</span></div><div class="line"><span class="comment">//main函数没有参数，没有返回值</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  fmt.Println(<span class="string">"Hello Go"</span>) <span class="comment">//调用包函数的方法为 pkgName.funcName</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个hello.go就写好了，在命令行输入</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> run hello.<span class="keyword">go</span></div></pre></td></tr></table></figure>
<p>就可以看到输出Hello Go了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="Mac_安装_GO">Mac 安装 GO</h5><p>本人使用了Brew来安装。</p>
<h5 id="安装前首先更新Brew。">安装前首先更新Brew。</h5><figure class="highlight armasm"><table><tr><td]]>
    </summary>
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP Curl 上传文件]]></title>
    <link href="https://www.qichengzx.com/2016/07/02/php-post-file-with-curl.html"/>
    <id>https://www.qichengzx.com/2016/07/02/php-post-file-with-curl.html</id>
    <published>2016-07-02T15:11:30.000Z</published>
    <updated>2016-07-03T01:14:00.000Z</updated>
    <content type="html"><![CDATA[<p>有时候会遇到上传文件给第三方服务的情况，比如本身程序并不需要存储附件，而是把附件发送给一个公共的服务。</p>
<p>最近正好碰到这个问题，记录一下。</p>
<p>上代码。</p>
<h4 id="发送端：">发送端：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="comment">// 接口地址</span></div><div class="line">$api = <span class="string">'http://api.example.com/uploadfile'</span>;</div><div class="line">$file = $_FILES[<span class="string">'file'</span>];<span class="comment">//保存$_FILES到变量中。</span></div><div class="line"></div><div class="line"><span class="comment">// 此处可能存在上传失败等问题，需验证$_FILES["file"]["error"]。</span></div><div class="line"><span class="comment">// 做业务对应的规则验证，如文件格式，文件大小等。</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个 cURL 句柄</span></div><div class="line">$ch = curl_init($api);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个 CURLFile 对象</span></div><div class="line"><span class="comment">// 上传文件的路径，文件的Mimetype，文件名</span></div><div class="line">$cfile = curl_file_create($file[<span class="string">'tmp_name'</span>],$file[<span class="string">'type'</span>],$file[<span class="string">'name'</span>]);</div><div class="line"></div><div class="line">$data = [</div><div class="line">	<span class="string">'type'</span>=&gt;<span class="string">'image'</span>,</div><div class="line">	<span class="string">'data'</span>=&gt;$cfile</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// 设置 POST 数据</span></div><div class="line">curl_setopt($ch, CURLOPT_POST,<span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</div><div class="line"></div><div class="line">$resp = curl_exec($ch);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!$resp) &#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'Error: "'</span> . curl_error($ch) . <span class="string">'" - Code: '</span> . curl_errno($ch));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Response HTTP Status Code : "</span> . curl_getinfo($ch, CURLINFO_HTTP_CODE);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"\nResponse HTTP Body : "</span> . $resp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Close request to clear up some resources</span></div><div class="line">curl_close($ch);</div></pre></td></tr></table></figure>
<h4 id="接收端：">接收端：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">var_dump($_FILES);<span class="comment">// 接收文件内容</span></div><div class="line">va_dump($_POST);<span class="comment">// 接收type</span></div></pre></td></tr></table></figure>
<h4 id="前端：">前端：</h4><p>前端可使用Form或其他Ajax方式上传。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候会遇到上传文件给第三方服务的情况，比如本身程序并不需要存储附件，而是把附件发送给一个公共的服务。</p>
<p>最近正好碰到这个问题，记录一下。</p>
<p>上代码。</p>
<h4 id="发送端：">发送端：</h4><figure class="highlig]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单的php+redis队列示例]]></title>
    <link href="https://www.qichengzx.com/2016/05/15/a-sample-redis-queue.html"/>
    <id>https://www.qichengzx.com/2016/05/15/a-sample-redis-queue.html</id>
    <published>2016-05-15T06:19:52.000Z</published>
    <updated>2016-05-15T06:25:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/redis/redis-300dpi.png" alt=""></p>
<p>虽然RabbitMQ的坑年前就开始填了，但是并没有机会在项目中实际使用，机缘巧合，换工作后第一个比较重要的事就是做一个直播的页面，如果数据直接插入或读取自数据库，数据库端的压力就太大了，当时RabbitMQ还没看完，而其他的队列程序更是没有用过，只是稍微对Redis熟悉些，于是就使用了Redis做。</p>
<p><a href="http://redis.io/" target="_blank" rel="external">Redis</a>比较常见的是作为数据缓存工具使用，数据存储在内存中，减少了数据库的连接和查询，效率高，又方便。</p>
<p>而其实Redis也可以用来做消息队列。</p>
<h3 id="发送">发送</h3><p>发送端首先当然是做好数据的接收和检测，比如为空的情况下给个默认值或返回错误。</p>
<p>特殊的情况下可能还要正则处理。</p>
<p>处理完插入到Redis的list(<a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="external">列表</a>)中。如果插入失败抛出异常。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$redis = <span class="keyword">new</span> Redis();</div><div class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>);</div><div class="line"></div><div class="line"><span class="comment">//如果redis需要认证</span></div><div class="line">$redis-&gt;auth(<span class="string">'redispasswd'</span>);</div><div class="line"></div><div class="line"><span class="comment">//命令行中使用，可以使用把信息作为参数的方式</span></div><div class="line">$data = $argv[<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) $data = <span class="string">"Hello World..!"</span>:</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	<span class="comment">//便于调试，在信息后边加上当前时间</span></div><div class="line">	$data .= <span class="string">'-at-'</span>.date(<span class="string">'Y-m-d H:i:s'</span>);</div><div class="line">	$redis-&gt;LPUSH(<span class="string">'redis_queue_1'</span>,json_encode($data));</div><div class="line">&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</div><div class="line">	<span class="keyword">echo</span> $e-&gt;getMessage().<span class="string">"\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="执行">执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php push.php &quot;testinfo&quot;</div></pre></td></tr></table></figure>
<h3 id="接收">接收</h3><p>由于消息是源源不断发送到队列中，所以接收端程序一般会以后台进程的方式运行。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$redis = <span class="keyword">new</span> Redis();</div><div class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>);</div><div class="line"></div><div class="line">$redis-&gt;auth(<span class="string">'redispasswd'</span>);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		$data = $redis-&gt;rPopLPush(<span class="string">'redis_queue_1'</span>,<span class="string">'redis_queue_1_bak'</span>).<span class="string">"\n"</span>;</div><div class="line">		<span class="keyword">if</span>($data)&#123;</div><div class="line">			<span class="keyword">echo</span> $data;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">"没有数据\n"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">		<span class="keyword">echo</span> $e-&gt;getMessage().<span class="string">"\n"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//每秒读取1次</span></div><div class="line">	sleep(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="执行-1">执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php get.php</div></pre></td></tr></table></figure>
<h3 id="更进一步">更进一步</h3><p>如果想把数据写入到MySQL中，该怎么办？</p>
<p>大多数情况下数据最终是需要持久化的，仅仅存在于redis中，也许内存会不够呢。</p>
<p>改造一下get.php。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$redis = <span class="keyword">new</span> Redis();</div><div class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>);</div><div class="line"></div><div class="line">$redis-&gt;auth(<span class="string">'redispasswd'</span>);</div><div class="line"></div><div class="line">$dsn = <span class="string">'mysql:dbname=test;host=127.0.0.1'</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	$pdo = <span class="keyword">new</span> PDO($dsn,<span class="string">'root'</span>,<span class="string">'mysqlpasswd'</span>,<span class="keyword">array</span>(PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">'SET NAMES utf8'</span>));</div><div class="line">&#125;<span class="keyword">catch</span>(PDOExcetion $e)&#123;</div><div class="line">	<span class="keyword">echo</span> $e-&gt;getMessage().<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">	$data = $redis-&gt;rPopLPush(<span class="string">'redis_queue_1'</span>,<span class="string">'redis_queue_1_bak'</span>);</div><div class="line">	<span class="keyword">if</span>($data)&#123;</div><div class="line">		$sth = $pdo-&gt;prepare(<span class="string">"INSERT INTO tb_test(msg,time) VALUES (:msg,:time)"</span>);</div><div class="line">		</div><div class="line">		$time = time();</div><div class="line">		</div><div class="line">		$sth-&gt;bindParam(<span class="string">':msg'</span>,$data,PDO::PARAM_STR);</div><div class="line">		$sth-&gt;bindParam(<span class="string">':time'</span>,$time,PDO::PARAM_INT);</div><div class="line">		</div><div class="line">		$sth-&gt;execute();</div><div class="line">		$id = $pdo-&gt;lastInsertId();</div><div class="line">      </div><div class="line">		<span class="keyword">echo</span> <span class="string">"插入成功，ID=$id \n"</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"没有数据 \n"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//实际任务中可能需要尽可能快的把数据导入到MySQL中</span></div><div class="line">	sleep(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注意">注意</h4><p>​    这里使用了<a href="http://php.net/manual/zh/book.pdo.php" target="_blank" rel="external">PDO</a>;</p>
<p>​    <a href="http://php.net/manual/zh/pdostatement.bindparam.php" target="_blank" rel="external">bindParam</a>方法的第一个参数对应insert语句中的对应顺序的值，如第一个bindParam方法对应第一个value值。</p>
<p>​    bindParam方法第二个参数为实际的值，传入变量或固定值，传入方法调用时如time()会提示：</p>
<p>Strict standards: Only variables should be passed by reference in /www/get.php on line 24。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/redis/redis-300dpi.png" alt=""></p>
<p>虽然RabbitMQ的坑年前就开始填了，但是并没有机会在项目中实际使用，机缘巧合，换工作后第一个比较重要的事就是做一个直播的页面，如果数据直接插入或读取自数据库]]>
    </summary>
    
      <category term="redis" scheme="https://www.qichengzx.com/tags/redis/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="队列" scheme="https://www.qichengzx.com/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Discuz无法发布爱奇艺视频的问题]]></title>
    <link href="https://www.qichengzx.com/2016/05/08/cant-post-iqiyi-video-to-discuz.html"/>
    <id>https://www.qichengzx.com/2016/05/08/cant-post-iqiyi-video-to-discuz.html</id>
    <published>2016-05-08T10:57:24.000Z</published>
    <updated>2016-05-08T10:57:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/discuz/201510148054_136.jpg" alt=""></p>
<p>最近碰到需要在Discuz论坛中插入爱奇艺视频的问题，之前没关注过，搜索后有些答案说DZ不支持爱奇艺，有些说爱奇艺不支持DZ，并没有真正能解决问题的。</p>
<p>下午突然想到也许是DZ根据粘贴进来的flash地址生成的标签代码不对，试验后发现果然是这个原因。</p>
<p>打卡/static/js/editor.js 文件第1299行查看这段代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'vid'</span>:</div><div class="line">	<span class="keyword">var</span> mediaUrl = $(ctrlid + <span class="string">'_param_1'</span>).value;</div><div class="line">	<span class="keyword">var</span> auto = <span class="string">''</span>;</div><div class="line">	<span class="keyword">var</span> posque = mediaUrl.lastIndexOf(<span class="string">'?'</span>);</div><div class="line">	posque = posque === <span class="number">-1</span> ? mb_strlen(mediaUrl) : posque;</div><div class="line">	<span class="keyword">var</span> ext = mediaUrl.lastIndexOf(<span class="string">'.'</span>) === <span class="number">-1</span> ? <span class="string">''</span> : mediaUrl.substring(mediaUrl.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>, posque).toLowerCase();</div><div class="line">	ext = in_array(ext, [<span class="string">'mp3'</span>, <span class="string">'wma'</span>, <span class="string">'ra'</span>, <span class="string">'rm'</span>, <span class="string">'ram'</span>, <span class="string">'mid'</span>, <span class="string">'asx'</span>, <span class="string">'wmv'</span>, <span class="string">'avi'</span>, <span class="string">'mpg'</span>, <span class="string">'mpeg'</span>, <span class="string">'rmvb'</span>, <span class="string">'asf'</span>, <span class="string">'mov'</span>, <span class="string">'flv'</span>, <span class="string">'swf'</span>]) ? ext : <span class="string">'x'</span>;</div><div class="line">	<span class="keyword">if</span>(ext == <span class="string">'x'</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="regexp">/^mms:\/\//</span>.test(mediaUrl)) &#123;</div><div class="line">			ext = <span class="string">'mms'</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/^(rtsp|pnm):\/\//</span>.test(mediaUrl)) &#123;</div><div class="line">			ext = <span class="string">'rtsp'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> str = <span class="string">'[media='</span> + ext + <span class="string">','</span> + $(ctrlid + <span class="string">'_param_2'</span>).value + <span class="string">','</span> + $(ctrlid + <span class="string">'_param_3'</span>).value + <span class="string">']'</span> + squarestrip(mediaUrl) + <span class="string">'[/media]'</span>;</div><div class="line">	insertText(str, str.length, <span class="number">0</span>, <span class="literal">false</span>, sel);</div><div class="line">	<span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>Discuz根据主流的视频网站的视频地址格式写的规则，生成discuz专用的[media]标签，在前台输出的时候再解析成embed这样的HTML代码。</p>
<p>解析之后的差不多就是这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"http://player.video.qiyi.com/7b42a1a27ff121c201ee5e6c6d757817/0/0/v_19rrklq2bs.swf-albumId=406283300-tvId=406283300-isPurchase=2-cnId=1"</span> <span class="attr">allowFullScreen</span>=<span class="string">"true"</span> <span class="attr">quality</span>=<span class="string">"high"</span> <span class="attr">width</span>=<span class="string">"480"</span> <span class="attr">height</span>=<span class="string">"350"</span> <span class="attr">align</span>=<span class="string">"middle"</span> <span class="attr">allowScriptAccess</span>=<span class="string">"always"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></div></pre></td></tr></table></figure>
<p>而不那么主流的爱奇艺的flash地址则是：”<a href="http://player.video.qiyi.com/7b42a1a27ff121c201ee5e6c6d757817/0/0/v_19rrklq2bs.swf-albumId=406283300-tvId=406283300-isPurchase=2-cnId=1”，查看上一段代码可以看到，discuz会用正则去看粘贴的地址最后一个&quot;.&quot;后的后缀，如果这个后缀不在自己的已知flash格式数组中，就把类型设为&quot;x&quot;，也就是生成的标签成了[media=x,500,350]。" target="_blank" rel="external">http://player.video.qiyi.com/7b42a1a27ff121c201ee5e6c6d757817/0/0/v_19rrklq2bs.swf-albumId=406283300-tvId=406283300-isPurchase=2-cnId=1”，查看上一段代码可以看到，discuz会用正则去看粘贴的地址最后一个&quot;.&quot;后的后缀，如果这个后缀不在自己的已知flash格式数组中，就把类型设为&quot;x&quot;，也就是生成的标签成了[media=x,500,350]。</a></p>
<p>再到了前台解析，不认识，直接生成一个a标签。</p>
<p>所以，我的解决办法是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(ext == <span class="string">'x'</span>) &#123;</div><div class="line">	<span class="keyword">if</span>(<span class="regexp">/^mms:\/\//</span>.test(mediaUrl)) &#123;</div><div class="line">		ext = <span class="string">'mms'</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/^(rtsp|pnm):\/\//</span>.test(mediaUrl)) &#123;</div><div class="line">		ext = <span class="string">'rtsp'</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mediaUrl.indexOf(<span class="string">'player.video.qiyi.com'</span>)) &#123;</div><div class="line">  		ext = <span class="string">'swf'</span>;	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加一个else if 判断是否包含爱奇艺播放器的域名，当用户粘贴的flash地址包含这个字符串时，就认为是粘贴了一个爱奇艺的视频，存储的格式也就成了[media=swf]。</p>
<p>但是这里其实不是十分严谨，如果一个非法的flash地址很巧合的包含了这个字符串，也会认为是flash了，那这种情况下就会出错了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/discuz/201510148054_136.jpg" alt=""></p>
<p>最近碰到需要在Discuz论坛中插入爱奇艺视频的问题，之前没关注过，搜索后有些答案说DZ不支持爱奇艺，有些说爱奇艺不支持DZ，并没有真正能解决问题的。]]>
    </summary>
    
      <category term="js" scheme="https://www.qichengzx.com/tags/js/"/>
    
      <category term="discuz" scheme="https://www.qichengzx.com/tags/discuz/"/>
    
      <category term="爱奇艺" scheme="https://www.qichengzx.com/tags/%E7%88%B1%E5%A5%87%E8%89%BA/"/>
    
      <category term="javascript" scheme="https://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（六） - 远程调用]]></title>
    <link href="https://www.qichengzx.com/2016/05/03/php-rabbitmq-tutorial-six.html"/>
    <id>https://www.qichengzx.com/2016/05/03/php-rabbitmq-tutorial-six.html</id>
    <published>2016-05-03T06:35:20.000Z</published>
    <updated>2016-05-07T14:08:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="远程调用">远程调用</h3><p>在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">第二节</a>中，我们学习了如何使用工作队列在多个worker中分发耗时任务。</p>
<p>但是如果我们需要在远程运行一个函数并等待返回结果怎么办？这是两码事，这个模式通常被称为远程过程调用（Remote Procedure Call，RPC）。</p>
<p>在本节中我们准备使用RabbitMQ构建一个RPC系统：一个客户端和一个可扩展的RPC服务端。由于我们没有值得分发的耗时任务，我们准备创建一个假的返回<a href="https://en.wikipedia.org/wiki/Fibonacci_number" target="_blank" rel="external">斐波那契数列</a>的RPC服务。</p>
<h3 id="客户端接口">客户端接口</h3><p>我们创建一个简单的客户端类来说明RPC服务如何使用。这个类会展示call方法如何发送一个RPC请求并且阻塞，直到接收到返回值。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$fibonacci_rpc = <span class="keyword">new</span> FibonacciRpcClient();</div><div class="line">$response = $fibonacci_rpc-&gt;call(<span class="number">30</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"[.] Got "</span>, $response, <span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
<h4 id="RPC注意事项">RPC注意事项</h4><p>尽管RPC在计算机学中很常见，但它十分挑剔。当程序员不知道是否是调用一个本地的方法还是一个很慢的RPC会出现这个问题。这样的困惑便导致不可预测的系统并增加不必要的调试复杂性。比起简化的软件，误用RPC会导致不可维护的无头绪代码。</p>
<p>记住刚才的内容，考虑下面的建议：</p>
<p>​    确保可以明显的看出哪个方法调用的是本地的哪个是远程的。</p>
<p>​    系统文档化。让组件之间的依赖变得清晰可见。</p>
<p>​    错误处理。当RPC服务长时间关闭客户端该作何反应？</p>
<p>如果有疑问，则尽量避免使用RPC。如果可以话，你应该使用异步管道——而不是RPC——像阻塞，结果被异步推送到下个计算阶段。</p>
<h3 id="回调队列">回调队列</h3><p>通常在RabbitMQ上做RPC很简单。客户端发送请求消息，服务端回复消息。为了接收响应消息，我们需要在请求中附带一个”callback”队列地址，我们可以使用默认的队列。来试一试：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage(</div><div class="line">	$payload,</div><div class="line">	<span class="keyword">array</span>(<span class="string">'reply_to'</span> =&gt; $queue_name));</div><div class="line"></div><div class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'rpc_queue'</span>);</div><div class="line"></div><div class="line"><span class="comment"># ... then code to read a response message from the callback_queue</span></div></pre></td></tr></table></figure>
<h4 id="消息属性">消息属性</h4><p>AMQP协议定义了14个消息属性。大部分不常用，下面的除外：</p>
<p>​    delivery_mode：值为2时表示持久化，1为临时的。也许你还记得这个属性来自第二节。</p>
<p>​    content_type：编码格式，比如经常用的JSON格式，良好的做法是设置为：application/json。</p>
<p>​    reply_to：通常用来定义回调队列名称。</p>
<p>​    correlation_id：用来关联RPC的响应和请求。</p>
<h3 id="Correlation_Id">Correlation Id</h3><p>在上面的方法中我们建议为每一个RPC请求创建一个回调队列。这样非常低效，但是幸运的是有更好的办法 - 我们可以为每一个客户端创建一个单独的回调队列。</p>
<p>这样又带来一个新的问题，在队列接收到响应时，并不知道属于哪个请求。这也正是correlation_id属性要发挥的作用。我们为每一个请求的设定一个唯一的correlation_id值，然后，当在回调队列接收到消息时会查看它的属性，基于此，我们就可以把响应和请求进行匹配。如果发现一个未知的correlation_id值，可以安全的忽略掉这条消息 - 因为它不属于任何请求。</p>
<p>也许你会问，为什么应该忽略回调队列里的未知消息，而不是返回一个错误？因为服务可能会出现紊乱的情况，虽然不太可能，但是如果发生这种情况，RPC服务会在发送完响应后挂掉，但是还没有进行消息确认。如果发生了，重启RPC服务后会再次处理这个请求。这就是为什么在客户端我们必须适当的处理重复请求，而RPC服务最好的幂等的。</p>
<h3 id="总结">总结</h3><p><img src="/images/rabbitmq/python-six.png" alt=""></p>
<p>RPC工作流程：</p>
<p>​    当客户端开始运行时会创建一个匿名独有回调队列。</p>
<p>​    RPC请求中，客户端消息带有两个属性：reply_to用来设置回调队列，correlation_id用来唯一标识每一个请求。</p>
<p>​    请求被发送到rpc_queue队列。</p>
<p>​    RPC worker（又称worker）在队列中守护，等待新请求。当请求到达，它会进行处理，然后把结果以消息的形式发送回客户端的队列，队列名便是客户端消息带有的reply_to的值。</p>
<p>​    客户端等待回调队列中的数据。当消息到达，检查它的correlation_id的值。如果符合客户端发送给RPC服务器中请求的值，客户端会返回响应内容到应用中。</p>
<h3 id="整合">整合</h3><p>斐波那契方法：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span><span class="params">($n)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>($n == <span class="number">0</span>)</div><div class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>($n == <span class="number">1</span>)</div><div class="line">  	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> fib($n<span class="number">-1</span>) + fib($n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义完斐波那契方法。假定它仅接受数字类型的输入。（别期望它能处理大的数字，它很可能非常慢的处理完。）</p>
<p>RPC服务处理程序rpc_server.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;queue_declare(<span class="string">'rpc_queue'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">fuction fib($n)&#123;</div><div class="line">  <span class="keyword">if</span>($n == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>($n == <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> fib($n<span class="number">-1</span>) + fib($n<span class="number">-2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">" [x] Awaiting RPC requests\n"</span>;</div><div class="line"></div><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($req)</span></span>&#123;</div><div class="line">  $n = intval($req-&gt;body);</div><div class="line">  <span class="keyword">echo</span> <span class="string">" [.] fib("</span>,$n,<span class="string">")\n"</span>;</div><div class="line">  </div><div class="line">  $msg = <span class="keyword">new</span> AMQPMessage(</div><div class="line">  	(string)fib($n),</div><div class="line">    <span class="keyword">array</span>(<span class="string">'correlation_id'</span> =&gt; $req-&gt;get(<span class="string">'correlation_id'</span>))</div><div class="line">  );</div><div class="line">  </div><div class="line">  $req-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_publish($msg, <span class="string">''</span>, $req-&gt;get(<span class="string">'reply_to'</span>));</div><div class="line">  $req-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack($req-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">$channel-&gt;basic_consume(<span class="string">'rpc_queue'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks))&#123;</div><div class="line">  $channel-&gt;wait();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>服务端代码相当简单：</p>
<p>​    和以往一样我们会从创建连接，频道，和声明队列开始</p>
<p>​    也许我们想要运行更多的进程。为了在多个服务器之间负载均衡，需要在$channel.basic_qos中设置prefech_count；</p>
<p>​    我们使用basic_consume访问队列。然后进入while循环等待请求消息，处理，然后返回响应消息。</p>
<p>RPC客户端 rpc_client.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciRpcClient</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> $connection;</div><div class="line">	<span class="keyword">private</span> $channel;</div><div class="line">	<span class="keyword">private</span> $callback_queue;</div><div class="line">	<span class="keyword">private</span> $response;</div><div class="line">	<span class="keyword">private</span> $corr_id;</div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;connection = <span class="keyword">new</span> AMQPStreamConnection(</div><div class="line">		  <span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span></div><div class="line">		);</div><div class="line">		<span class="keyword">$this</span>-&gt;channel = <span class="keyword">$this</span>-&gt;connection-&gt;channel();</div><div class="line">		<span class="keyword">list</span>(<span class="keyword">$this</span>-&gt;callback_queue, ,) = <span class="keyword">$this</span>-&gt;channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">$this</span>-&gt;channel-&gt;basic_consume(</div><div class="line">			<span class="keyword">$this</span>-&gt;callback_queue, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</div><div class="line">			<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'on_response'</span>));</div><div class="line">	&#125;</div><div class="line">  </div><div class="line"> 	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on_response</span><span class="params">($req)</span></span>&#123;</div><div class="line"> 		<span class="keyword">if</span>($req-&gt;get(<span class="string">'correlation_id'</span>) == <span class="keyword">$this</span>-&gt;corr_id)&#123;</div><div class="line"> 			<span class="keyword">$this</span>-&gt;response = $req-&gt;body;</div><div class="line"> 		&#125;</div><div class="line"> 	&#125;</div><div class="line">  	</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">($n)</span></span>&#123;</div><div class="line">		<span class="keyword">$this</span>-&gt;response = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">$this</span>-&gt;corr_id = uniqid();</div><div class="line"></div><div class="line">		$msg = <span class="keyword">new</span> AMQPMessage(</div><div class="line">  		(string) $n,</div><div class="line">  		<span class="keyword">array</span>(</div><div class="line">  			<span class="string">'correlation_id'</span> =&gt; <span class="keyword">$this</span>-&gt;corr_id,</div><div class="line">  			<span class="string">'reply_to'</span> =&gt; <span class="keyword">$this</span>-&gt;callback_queue)</div><div class="line">  		);</div><div class="line">    )</div><div class="line">      </div><div class="line">    <span class="keyword">$this</span>-&gt;channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'rpc_queue'</span>);</div><div class="line">    <span class="keyword">while</span>(!<span class="keyword">$this</span>-&gt;response)&#123;</div><div class="line">    	<span class="keyword">$this</span>-&gt;channel-&gt;wait();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> intval(<span class="keyword">$this</span>-&gt;response);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$fibonacci_rpc = <span class="keyword">new</span> FibonacciRpcClient();</div><div class="line">$response = $fibonacci_rpc-&gt;call(<span class="number">30</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">" [.] Got "</span>, $response, <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>现在可以查看示例的完整代码了。<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/rpc_client.php" target="_blank" rel="external">rpc_client.php</a> 和 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/rpc_server.php" target="_blank" rel="external">rpc_server.php</a>。</p>
<p>现在RPC服务端可以运行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php rpc_server.php</div><div class="line">[x] Awiting RPC resquests</div></pre></td></tr></table></figure>
<p>接收斐波那契数列运行：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">rpc_client</span><span class="selector-class">.php</span></div><div class="line"><span class="selector-attr">[x]</span> <span class="selector-tag">Requesting</span> <span class="selector-tag">fib</span>(30)</div></pre></td></tr></table></figure>
<p>这里展现的并不是RPC服务的唯一可能实现，但它有一些重要的优势：</p>
<p>​    如果RPC服务太慢，可以按比例增加运行数量。试试在新控制台裕兴第二个rpc_server.php服务。</p>
<p>​    在客户端，RPC要求只发送和接收一条消息。不能有像队列声明一样的异步调用。结果就是，对于单一的RPC请求，客户端仅需要一个网络往返。</p>
<p>现在的代码还是过于简单，并没有想解决更复杂（更重要）的问题，比如：</p>
<p>​    要是没有服务端守护运行，客户端作何反应？</p>
<p>​    RPC客户端是否需要设置超时？</p>
<p>​    如果服务端引发异常，是否该把它发送到客户端？</p>
<p>​    处理前阻止无效消息（如检查范围，类型）进入？</p>
<p>如果想尝试，可以在<a href="https://www.rabbitmq.com/plugins.html" target="_blank" rel="external">rabbitmq-management</a> 里找到一些有用的查看队列的插件。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-six-php.html" target="_blank" rel="external">Remote procedure call (RPC)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="远程调用">远程调用</h3><p>在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">第二节</a>中，我们学习了如何使用工作队列在多个worker中分发耗时任务。</p>
<p>但是如果我们需要在远程运行]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（五） - 主题]]></title>
    <link href="https://www.qichengzx.com/2016/04/27/php-rabbitmq-tutorial-five.html"/>
    <id>https://www.qichengzx.com/2016/04/27/php-rabbitmq-tutorial-five.html</id>
    <published>2016-04-27T10:27:03.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="主题">主题</h3><p>(<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">使用php-amqplib</a>)</p>
<p>在<a href="/2016/04/24/php-rabbitmq-tutorial-four.html">上一节</a>我们改善了日志系统(logging system，以下简称日志系统)，为了替代fanout类型的交换器，我们使用了一个direct类型的交换器，带来的好处是可以有选择的接收日志。</p>
<p>虽然使用direct交换器改善了系统，但是仍然有局限性 - 它不能根据多个条件进行路由。</p>
<p>在日志系统中，我们也许不仅仅想订阅严重等级的日志，也想订阅基于消息发布源的内容。也许你已经知道这个概念来自于UNIX的<a href="http://en.wikipedia.org/wiki/Syslog" target="_blank" rel="external">syslog</a>工具，基于严重性(info/warn/crit…)和设备路由日志(auth/cron/kern…)的工具。</p>
<p>这可以提高灵活性 - 我们也许只想要监听来自’cron’的关键错误而不是来自’kern’的全部日志。</p>
<p>为了在我们的日志系统上实现这个功能，需要学习一个更复杂的 topic 交换器。</p>
<h3 id="Topic_交换器">Topic 交换器</h3><p>发送到 topic 交换器的消息不能随意设置 routing_key - 它必须是一个单词列表，以’.’分隔。单词可以是任何内容，但是通常会具体说明消息的功能。一些有效的routing key示例：样：”stock.usd.nyse”，”nyse.vmw”，”quick.orange.rabbit”。routing key 可以是任何长度的你喜欢的单词，最大255个字节。</p>
<p>binding key 也必须是同样的格式，topic交换器的逻辑和direct交换器类似 - 带有特定routing key的消息会被派发到所有绑定了binding key的队列，然而对于binding key依然有两个重要的特殊情况：</p>
<pre><code>*可以代替一个单词

<span class="preprocessor">#可以代替<span class="number">0</span>个或多个单词</span>
</code></pre><p>下图比较好的解释了这个情况：</p>
<p><img src="/images/rabbitmq/python-five.png" alt="">    </p>
<p>在这个例子中，我们准备全部发送描述动物的消息。这些消息带有由三个单词(两个点号分隔)组成的routing key，其中第一个单词表示速度，第二个表示颜色，第三个表示种类：”<speed>.<colour>.<species>“。</species></colour></speed></p>
<p>我们创建三个绑定：Q1的binding key为”*.orange”，Q2的binding key为”*.*.rabbit”和”lazy.#“。</p>
<p>这些绑定可以概括为：</p>
<pre><code>Q1 关注所有orange的动物

Q2 想知道所有关于兔子（rabbits）和懒惰动物（<span class="keyword">lazy</span> animals）的消息。
</code></pre><p>routing key为”quick.orange.rabbit”的消息会被发送到两个队列，”lazy.orange.elephant”也会被发送到这两个队列。而”quick.orange.fox”则只会发送到第一个队列，”lazy.brown.fox”会被只发送到第二个队列。”lazy.pink.rabbit”会只被发送到第二个队列一次，即使它匹配两个绑定。”quick.brown.fox”不匹配任何绑定，所以会被丢弃。</p>
<p>如果打破规则，发送一条带有一个或四个单词，如”orange”或”quick.orange.male.rabbit”会怎么样？好吧，消息会丢失，因为它不匹配任何一个绑定。</p>
<p>但是，”lazy.orange.male.rabbit”这种消息，即使它有4个单词，依然会匹配最后一个绑定，然后被发送到第二个队列。</p>
<h4 id="topic_交换器">topic 交换器</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">topic 交换器非常强大，可以表现得跟其他交换器一样。</div><div class="line"></div><div class="line">当一个队列的binding <span class="built_in">key</span>为<span class="string">"#"</span>时，它会接收所有消息，忽略routing <span class="built_in">key</span>，像fanout交换器一样。</div><div class="line"></div><div class="line">当绑定中不存在<span class="string">"*"</span>和<span class="string">"#"</span>时，topic交换器会表现的跟<span class="built_in">direct</span>交换器一样。</div></pre></td></tr></table></figure>
<h3 id="整合">整合</h3><p>我们准备在日志系统中使用topic交换器。假定日志的routing key由两个单词：”<facility>.<severity>“组成。</severity></facility></p>
<p>代码与上一节的几乎一致。</p>
<p>emit_log_topic.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">$routing_key = <span class="keyword">isset</span>($argv[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>($argv[<span class="number">1</span>]) ? $argv[<span class="number">1</span>] : <span class="string">'anonymous.info'</span>;</div><div class="line">$data = implode(<span class="string">' '</span>, array_slice($agrv, <span class="number">2</span>));</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) $data = <span class="string">"Hello Wrold!"</span>;</div><div class="line"></div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</div><div class="line"></div><div class="line">$channel-&gt;basic_publish($msg, <span class="string">'topic_logs'</span>, $routing_key);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">" [x] Sent "</span>,$routing_key,<span class="string">':'</span>,$data,<span class="string">" \n"</span>;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>receive_logs_topic.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">$binding_keys = array_slice($argv, <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>( <span class="keyword">empty</span>($binding_keys) )&#123;</div><div class="line">  file_put_contents(<span class="string">'php://stderr'</span>, <span class="string">"Usage: $argv[0] [binding_key]\n"</span>);</div><div class="line">  <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>($binding_keys <span class="keyword">as</span> $binding_key)&#123;</div><div class="line">  $channel-&gt;queue_bind($queue_name, <span class="string">'topic_logs'</span>, $binding_key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span></span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">' [*] '</span>,$msg-&gt;delivery_info[<span class="string">'routing_key'</span>], <span class="string">':'</span>, $msg-&gt;body, <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;basic_consume($queue_name, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks))&#123;</div><div class="line">  $channel-&gt;wait();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>接收所有日志：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php receive_logs_topic<span class="selector-class">.php</span> <span class="string">'#'</span></div></pre></td></tr></table></figure>
<p>接收所有来自”kern”的日志：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php receive_logs_topic<span class="selector-class">.php</span> <span class="string">"kern.*"</span></div></pre></td></tr></table></figure>
<p>只接收”致命(critical)”日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php receive_logs_topic.php &quot;*.critical&quot;</div></pre></td></tr></table></figure>
<p>创建多个绑定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php receive_logs_topic.php &quot;kern.*&quot; &quot;*.critical&quot;</div></pre></td></tr></table></figure>
<p>发布routing key为”kern.critical”的日志就输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php emit_log_topic.php &quot;kern.critical&quot; &quot;A critical kernel error&quot;</div></pre></td></tr></table></figure>
<p>注意此代码并没有做路由或捆绑的例子，也许你想试一下两个以上的routing key参数。</p>
<p>一些问题：</p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_1" target="_blank" rel="external">“*”会匹配routing key为空的消息吗？</a></p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_2" target="_blank" rel="external">“#.*”会匹配内容为”..”的消息吗？会匹配一个单词的消息吗？</a></p>
<p>​    <a href="http://www.rabbitmq.com/tutorials/tutorial-five-php.html#teaser_answer_3" target="_blank" rel="external">“a.*.#”和”a.#”的区别是什么？</a></p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log_topic.php" target="_blank" rel="external">emit_log_topic.php完整代码</a> <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs_topic.php" target="_blank" rel="external">receive_logs_topic.php完整代码</a></p>
<p>下一步，在第六节中学习像远程过程调用一样完成消息往返。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-five-php.html" target="_blank" rel="external">Topics</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="主题">主题</h3><p>(<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">使用php-amqplib</a>)</p>
<p>在<a hre]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（四） - 路由]]></title>
    <link href="https://www.qichengzx.com/2016/04/24/php-rabbitmq-tutorial-four.html"/>
    <id>https://www.qichengzx.com/2016/04/24/php-rabbitmq-tutorial-four.html</id>
    <published>2016-04-24T06:16:41.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="路由">路由</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>）<br>在<a href="/2016/04/23/php-rabbitmq-tutorial-three.html">上一节</a>中，我们创建了一个简单的日志系统（logging system）。我们已经可以广播日志消息到多个接收者了。</p>
<p>在本节中，我们要给它增加一个功能-使它能够只订阅消息的一个子集。比如，只把严重的错误信息写入到日志文件（存储到磁盘）中，但同时仍然会把所有日志信息输出到控制台中。</p>
<h3 id="绑定">绑定</h3><p>在上一节中我们已经创建了绑定（bindings），代码如下：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>,<span class="string">'logs'</span>);</div></pre></td></tr></table></figure>
<p>绑定（bindings）是指交换器（exchange）和队列（queue）的关系。可以简单的理解为：这个队列对这个交换器中的消息感兴趣。</p>
<p>绑定的时候可以带一个额外的 routing_key 参数。为了避免与$channel::basic_publish的参数混淆，我们把它叫做 binding_key，所以我们这样使用key创建一个绑定：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$binding_key</span> = <span class="string">'black'</span>;</div><div class="line"><span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>,<span class="variable">$exchange_name</span>,<span class="variable">$binding_key</span>);</div></pre></td></tr></table></figure>
<p>binding key的意义取决于交换器的类型。我们之前使用过的fanout类型的交换器，会忽略这个值。</p>
<h3 id="Direct_交换器">Direct 交换器</h3><p>之前创建的日志系统分发所有消息到所有的消费者。我们打算扩展一下，使它可以过滤严重的消息。比如，我们只想在接收到严重错误的时候才写入到磁盘中，不在警告或普通的消息上浪费磁盘空间。</p>
<p>我们使用的是没有太多扩展性的fanout交换器，它仅能够简单的广播消息。</p>
<p>我们将要使用一个direct交换器代替fanout交换器。路由算法很简单-只有binding key完全匹配routing key的消息会进入队列。</p>
<p>为了说明，考虑如下的场景：</p>
<p><img src="/images/rabbitmq/direct-exchange.png" alt=""></p>
<p>在这个场景中，我们可以看到direct类型的交换器X有两个队列，第一个队列使用orange作为binding key，第二个队列有两个绑定，一个是black另一个是green。</p>
<p>在这个场景中，当routing key为orange的消息发送到交换器，将会被路由到队列Q1。routing key为black或green的消息将会发送到Q2。其他的消息则会被丢弃。</p>
<h3 id="多个绑定">多个绑定</h3><p><img src="/images/rabbitmq/direct-exchange-multiple.png" alt=""></p>
<p>使用相同的binding key绑定多个队列是合法的。在这个例子中，我们会使用black作为binding key为X和Q1之间添加一个绑定。这样一来，direct 交换器就表现得跟fanout交换器一样，分发消息到匹配的队列。routing key为black的消息就会被分发到Q1和Q2。</p>
<h3 id="发送日志">发送日志</h3><p>我们将要对日志系统使用这个模型，我们将要发送消息到一个direct交换器。将日志级别作为routing key。这样一来接收端程序就可以选择它想要接收的消息了。首先来看看发送日志。</p>
<p>和以往一样，需要创建一个交换器：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>然后准备发送消息：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">'direct_logs'</span>,<span class="variable">$severity</span>);</div></pre></td></tr></table></figure>
<p>为了简化，我们可以假定’severity’的值可以是’info’,’warning’,’error’中的一个。</p>
<h3 id="订阅">订阅</h3><p>接收消息的脚本会跟之前一样正常工作，但是我们准备为每一个我们感兴趣的日志级别创建一个新的绑定。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span>($severities <span class="keyword">as</span> $severity)&#123;</div><div class="line">	$channel-&gt;queue_bind($queue_name,<span class="string">'direct_logs'</span>,$severity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="整合">整合</h3><p><img src="/images/rabbitmq/python-four.png" alt=""></p>
<p>emit_log_direct.php类的代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStremConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">$severity = <span class="keyword">isset</span>($argv[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>($argv[<span class="number">1</span>]) ? $argv[<span class="number">1</span>] : <span class="string">'info'</span>;</div><div class="line"></div><div class="line">$data = implode(<span class="string">' '</span>,array_slice($argv,<span class="number">2</span>));</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) $data = “Hello World!”;</div><div class="line"></div><div class="line">$msg = “[x] Sent ”,$severity,<span class="string">':'</span>,$data,” \n”;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>receive_logs_direct.php的代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>,<span class="string">'direct'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(“”,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">$severities = array_slice($argv,<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($severities))&#123;</div><div class="line">	file_put_contents(<span class="string">'php://stderr'</span>,”Usage:$argv[<span class="number">0</span>][info][warning][error]\n”);</div><div class="line">	<span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>($severities <span class="keyword">as</span> $severity)&#123;</div><div class="line">	$channel-&gt;queue_bind($queue_name,<span class="string">'direct_logs'</span>,$severity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'[*]Waiting for logs.To exit press CTRL+C'</span>,”\n”;</div><div class="line"></div><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span></span>&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'[*]'</span>,$msg-&gt;delivery_info[<span class="string">'routing_key'</span>],<span class="string">':'</span>,$msg-&gt;body,”\n”;	</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$channel-&gt;basic_consume($queue_name,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,$callback);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks))&#123;</div><div class="line">	$channel-&gt;wait();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>如果你想只保存’warning’或’error’（而不是’info’）级别的消息，只需要打开命令行输入：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php receive_logs_direct.php <span class="keyword">warning</span> <span class="keyword">error</span> &gt; logs_from_rabbit.<span class="keyword">log</span></div></pre></td></tr></table></figure>
<p>如果你想在屏幕上输出所有的消息，打开一个新的终端，输入：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php receive_logs_direct.php info warning error</div><div class="line">[*]Waiting <span class="keyword">for</span> logs.To <span class="keyword">exit</span> press CTRL+C</div></pre></td></tr></table></figure>
<p>例如，发送error消息，输入：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php emit_log_direct.php <span class="built_in">error</span> <span class="string">"Run. Run. Or it will explode."</span></div><div class="line">[x] Sent '<span class="built_in">error</span>':'<span class="keyword">Run</span>. <span class="keyword">Run</span>. <span class="keyword">Or</span> it will explode.'</div></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log_direct.php" target="_blank" rel="external">emit_log_direct.php源码</a>  <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs_direct.php" target="_blank" rel="external">receive_logs_direct.php源码</a></p>
<p>转到第五节，查看如何监听基于模式的消息。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-php.html" target="_blank" rel="external">Routing</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="路由">路由</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>）<br>在<a href="/]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（三） - 发布/订阅]]></title>
    <link href="https://www.qichengzx.com/2016/04/23/php-rabbitmq-tutorial-three.html"/>
    <id>https://www.qichengzx.com/2016/04/23/php-rabbitmq-tutorial-three.html</id>
    <published>2016-04-23T11:58:17.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="发布/订阅">发布/订阅</h3><p>我们在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">上一节</a>创建了一个工作队列，并假定队列对应的任务传送给了某个客户端。在这一章节我们会做一些完全不一样的东西–我们会发送一条消息到多个消费者，也称之为“发布/订阅”模式。</p>
<p>为了说明这个模式，我们会创建一个简单的日志系统（logging system，以下简称日志系统），它由两个程序组成–第一个是发送日志信息，第二个是接收日志并打印。</p>
<p>日志系统的每一个运行的接收端程序都会接收信息，这样就可以运行一个接收端就把日志保存到硬盘里，同时运行另一个接收端去实时显示日志到屏幕。</p>
<p>本质上，日志内容是广播给所有的接收端的。</p>
<h3 id="交换器">交换器</h3><p>在之前的章节中我们从一个队列里发送和接收消息，现在该把完整的RabbitMQ消息模型介绍给大家了。</p>
<p>让我们快速的回看一遍在之前的章节中的内容：</p>
<pre><code>&gt;生产者是一个用来发送消息的程序

&gt;队列是一个存储消息的缓冲区

&gt;消费者是一个接收消息的程序
</code></pre><p>RabbitMQ消息模型的核心思想是，生产者永远不会直接发送给任何消息队列，实际上，生产者一般情况下甚至不知道消息应该发送给哪个队列。</p>
<p>生产者只能发送消息到交换器中，交换器非常简单。一方面从生产者接收消息，另一方面把消息推送到队列中。交换器必须知道如何处理接收到的消息，是推送到某个队列？推送到多个队列？还是丢弃这条消息。这个规则通过交换器类型(exchange type)来指定。</p>
<p><img src="/images/rabbitmq/exchanges.png" alt=""></p>
<p>这里是交换器的几个类型：direct,topic,headers,fanout。这里我们主要关注最后一个–fanout，创建一个类型为 fanout 的交换器，命名为 logs。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>fanout交换器非常简单，你可以从名称中猜出它的功能，它把所有接收到的消息广播给所有它知道的队列，这也正是我们的日志系统需要的功能。</p>
<h4 id="列出交换器">列出交换器</h4><p>可以使用rabbitmqctl 命令列出服务器上的所有交换器：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sudo rabbitmqctl list_exchanges</div><div class="line"></div><div class="line">Listing exchanges ...</div><div class="line">        direct</div><div class="line">amq<span class="selector-class">.direct</span>      direct</div><div class="line">amq<span class="selector-class">.fanout</span>      fanout</div><div class="line">amq<span class="selector-class">.headers</span>     headers</div><div class="line">amq<span class="selector-class">.match</span>       headers</div><div class="line">amq<span class="selector-class">.rabbitmq</span><span class="selector-class">.log</span>        topic</div><div class="line">amq<span class="selector-class">.rabbitmq</span><span class="selector-class">.trace</span>      topic</div><div class="line">amq<span class="selector-class">.topic</span>       topic</div><div class="line">logs    fanout</div><div class="line">..<span class="selector-class">.done</span>.</div></pre></td></tr></table></figure>
<p>结果中有一些amq.*和一些未命名的交换器，这是一些默认创建的交换器，它们不太可能是现在需要用到的。</p>
<h4 id="未命名交换器">未命名交换器</h4><p>在之前的章节中我们对交换器一无所知，直到可以发送消息给队列。大概是因为我们当时正在使用一个以空字符串“”定义的默认的交换器。</p>
<p>回想一下之前怎么发布消息：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">''</span>,<span class="string">'hello'</span>);</div></pre></td></tr></table></figure>
<p>这里就是使用默认或者说未命名的交换器：消息被routing_key的值<br>Here we use the default or nameless exchange: messages are routed to the queue with the name specified by routing_key, if it exists. The routing key is the second argument to basic_publish</p>
<p>现在，可以发布消息到这个队列。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>,<span class="string">'logs'</span>);</div></pre></td></tr></table></figure>
<h3 id="临时队列">临时队列</h3><p>也许你还记得在之前我们使用了一个指定的队列（还记得 hello 队列 和 task_queue 队列吗？）。可以命名一个队列是至关重要的–我们需要指定一个worker到同一个队列。当想让生产者和消费者使用同一个队列时给队列命名是非常重要的。</p>
<p>但是在我们的日志系统中情况不同了，我们想要接收所有的消息，不仅仅是其中的一部分，我们关心的是最新的消息而不是旧的，因此需要做两件事。</p>
<p>首先，当连接到RabbitMQ时，需要一个空的队列，可以手动创建一个名字随机的队列，或者，更好的办法是，让服务器为我们随机选一个队列名字。</p>
<p>其次，一旦与消费者失去连接，队列需要自动删除。</p>
<p>在<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>中，当我们创建了一个名字为空的队列时，实际上是创建了一个被生成了名字的非持久化的队列。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>);</div></pre></td></tr></table></figure>
<p>方法执行后，$queue_name变量包含了一个RabbitMQ生成的字符串。比如也许是这样的：amq.gen-JzTY20BRgKO-HjmUJj0wLg。</p>
<p>当连接被关闭的时候，队列也会被删掉，因为队列是独有的。</p>
<h3 id="绑定(Bindlings)">绑定(Bindlings)</h3><p><img src="/images/rabbitmq/bindings.png" alt=""></p>
<p>我们已经创建了一个fanout类型的交换器和一个队列。现在需要让交换器发送消息给队列。交换器和队列之间的关系称之为绑定(binding)</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;queue_bind(<span class="variable">$queue_name</span>,<span class="string">'logs'</span>);</div></pre></td></tr></table></figure>
<p>现在开始，logs 交换器会把消息附加到队列中。</p>
<h4 id="列出绑定（Listing_bindings）">列出绑定（Listing bindings）</h4><p>可以使用 rabbitmqctl list_bindings列出所有存在的正在使用的绑定。</p>
<h3 id="整合">整合</h3><p><img src="/images/rabbitmq/python-three-overall.png" alt=""></p>
<p>发送日志消息的生产者，与之前的代码看起来没什么不同，最重要的变化是现在想要发送消息到我们的 logs 交换器中，需要在发送时提供一个routing_key，但是在 fanout类型的交换器中这个值是可以忽略的。下边是emit_log.php的代码。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/verdor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $channel-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;exchange_declare(<span class="string">'logs'</span>,<span class="string">'fanout'</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">$data = implode(<span class="string">' '</span>,array_slice($argv,<span class="number">1</span>));</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) $data = <span class="string">"info:Hello World"</span>;</div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</div><div class="line"></div><div class="line">$channel-&gt;basic_publish($msg,<span class="string">'logs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"[x]Sent "</span>,$data,<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/emit_log.php" target="_blank" rel="external">emit_log.php</a>)</p>
<p>如你所见，建立连接后声明了交换器，这一步是必须的，因为发送消息到一个不存在的交换器是被禁止的。</p>
<p>如果还没有队列绑定到交换器，信息会丢失，但是这对于我们是可以的，如果没有消费者监听，我们可以安全的丢弃消息。</p>
<p>receive_logs.php：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">QMAPStreamConnection</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;queue_bind($queue_name,<span class="string">'logs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'[*] Waiting for logs. To exit press CTRL+C'</span>,<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span></span>&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'[x]'</span>,$msg-&gt;body,<span class="string">"\n"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$channel-&gt;basic_consume($queue_name,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,$callback);</div><div class="line"></div><div class="line">whild(count($channel-&gt;callbacks))&#123;</div><div class="line">	$channel-&gt;wait();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive_logs.php" target="_blank" rel="external">receive_logs.php</a>)</p>
<p>如果想保存日志到文件中，可以在命令中输入</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">receive_logs</span><span class="selector-class">.php</span> &gt; <span class="selector-tag">logs_from_rabbit</span><span class="selector-class">.log</span></div></pre></td></tr></table></figure>
<p>如果想在屏幕上查看日志，新打开一个终端并运行：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">receive_logs</span><span class="selector-class">.php</span></div></pre></td></tr></table></figure>
<p>发送日志：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">emit_log</span><span class="selector-class">.php</span></div></pre></td></tr></table></figure>
<p>使用 rabbitmqctl list_bindings 可以确认代码确实创建了绑定和队列，当两个receive_logs.php在运行的时候会看到类似这样的：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo rabbitmqctl list_bindings</div><div class="line">Listing bindings ...</div><div class="line">logs    exchange        amq<span class="selector-class">.gen-JzTY20BRgKO-HjmUJj0wLg</span>  queue           []</div><div class="line">logs    exchange        amq<span class="selector-class">.gen-vso0PVvyiRIL2WoV3i48Yg</span>  queue           []</div><div class="line">..<span class="selector-class">.done</span>.</div></pre></td></tr></table></figure>
<p>对于结果的解释很简单，logs交换器中的数据发送到两个服务器指定的队列，而这正是我们要实现的。</p>
<p>想要弄明白怎样去监听部分消息，转到第四部分。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-php.html" target="_blank" rel="external">Publish/Subscribe</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="发布/订阅">发布/订阅</h3><p>我们在<a href="/2016/04/17/php-rabbitmq-tutorial-two.html">上一节</a>创建了一个工作队列，并假定队列对应的任务传送给了某个客户端。在这一章节我们会做一些完全不一样的东西]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（二） - 工作队列]]></title>
    <link href="https://www.qichengzx.com/2016/04/17/php-rabbitmq-tutorial-two.html"/>
    <id>https://www.qichengzx.com/2016/04/17/php-rabbitmq-tutorial-two.html</id>
    <published>2016-04-17T06:39:30.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="工作队列">工作队列</h3><h5 id="（使用php-amqplib库）">（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>库）</h5><p><img src="/images/rabbitmq/python-two.png" alt=""></p>
<p>在本教程<a href="/2016/02/28/php-rabbitmq-tutorial-one.html">第一部分</a> 我们已经写完了从一个指定队列发送和接收消息的程序。在这一章节中，我们会创建一个工作队列（Work Queue）来分发耗时的任务给多个工作者（worker）。</p>
<p>工作队列（也被称为 任务队列-task queue）主要是避免立即执行资源密集型任务并且还要等待它执行完毕。相反，需要让任务稍后执行，我们把一个任务当做一条信息发送给队列，后台运行的工作者（worker）会取出任务并执行，当运行多个worker时任务会在它们之间共享。</p>
<p>这个概念在web应用中非常有用，可以在短暂的HTTP请求期间处理一些复杂的任务。</p>
<h3 id="准备工作">准备工作</h3><p>在前面的部分我们发送了一条内容为“Hello World”的信息，现在我们会发送一些字符串，把这些字符串当做复杂的任务，我们并没有一个实际的任务，像是图片缩放，或者转换PDF文件，所以我们使用sleep方法来假设任务很繁忙。我们会在字符串中加入一些“.”来表示复杂复杂程度；每一个“.”表示需要耗时1秒，比如，“Hello …”代表需要耗时3秒。</p>
<p>我们从上一节的基础上稍微改动了一下send.php，来允许消息可以从命令行发送，这个程序会发送任务到队列中，把它命名为new_task.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$data = impllode(<span class="string">' '</span>,array_slice($argv,<span class="number">1</span>));</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data))$data = <span class="string">"Hello World"</span>;</div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage($data,</div><div class="line">	<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>)<span class="comment">#设置消息持久化，下边会讲到。</span></div><div class="line">);</div><div class="line">$channel-&gt;basic_publish($msg,<span class="string">''</span>,<span class="string">'task_queue'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"[x] Sent "</span>,$data,<span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
<p>上一节的receive.php也需要一些改动：需要为消息中的每一个“.”模拟1秒的工作。它会从队列中取出消息并运行，把它命名为worker.php：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$callback = function($msg)&#123;</div><div class="line">	<span class="function"><span class="title">echo</span> "[x] Received ",$msg-&gt;</span>body,<span class="string">"\n"</span>;</div><div class="line">	<span class="function"><span class="title">sleep</span>(substr_count($msg-&gt;</span>body,<span class="string">'.'</span>));</div><div class="line">	echo <span class="string">"[x] Done"</span>,<span class="string">"\n"</span>;</div><div class="line">	$<span class="function"><span class="title">msg</span>-&gt;</span><span class="function"><span class="title">delivery_info</span>['channel]-&gt;</span><span class="function"><span class="title">basic_ack</span>($msg-&gt;</span>delivery_info[<span class="string">'delivery_tag'</span>]);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$<span class="function"><span class="title">channel</span>-&gt;</span>basic_gos(null,<span class="number">1</span>,null);</div><div class="line">$<span class="function"><span class="title">channel</span>-&gt;</span>basic_consume(<span class="string">'task_queue'</span>,<span class="string">''</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,$callback);</div></pre></td></tr></table></figure>
<p>注意我们伪造的任务需要花费时间（即发送的字符串中要有一些”.”）</p>
<p>然后运行：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php <span class="string">"A very hard task which takes two seconds.."</span></div><div class="line">php wordker.php</div></pre></td></tr></table></figure>
<h3 id="轮询分发">轮询分发</h3><p>使用工作队列的一个好处就是它能够并行的处理队列。如果有太多工作需要处理，只需要添加新的worker就可以了。</p>
<p>首先，我们试着同时运行两个worker.php，它们都会从队列接收到消息，但是到底是不是这样呢？我们看一下。</p>
<p>此时需要打开3个终端，其中两个运行worker.php，这两个就是我们的消费者 - C1和C2。</p>
<p>shell1</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php worker.php</div><div class="line">[*] Waiting <span class="keyword">for</span> messages. To <span class="keyword">exit</span> press CTRL+C</div></pre></td></tr></table></figure>
<p>shell2</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php worker.php</div><div class="line">[*] Waiting <span class="keyword">for</span> messages. To <span class="keyword">exit</span> press CTRL+C</div></pre></td></tr></table></figure>
<p>在第三个终端中我们会发送新的任务，消费者程序开始运行后就可以发送一些消息了。</p>
<p>shell3</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php First message.</div><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php Second message..</div><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php Third message...</div><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php Fourth message....</div><div class="line">php <span class="keyword">new</span><span class="type">_task</span>.php Fifth message.....</div></pre></td></tr></table></figure>
<p>我们看一下发送给worker的是什么:</p>
<p>shell1</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">php worker.php</div><div class="line">[*] Waiting <span class="keyword">for</span> messages.To <span class="keyword">exit</span> press CTRL+C</div><div class="line">[x]Received <span class="string">'First message.'</span></div><div class="line">[x]Received <span class="string">'Third message...'</span></div><div class="line">[x]Received <span class="string">'Fifth message.....'</span></div></pre></td></tr></table></figure>
<p>shell2</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">php worker.php</div><div class="line">[*] Waiting <span class="keyword">for</span> messages.To <span class="keyword">exit</span> press CTRL+C</div><div class="line">[x]Received <span class="string">'Second message.'</span></div><div class="line">[x]Received <span class="string">'Fourth message...'</span></div></pre></td></tr></table></figure>
<p>RabbitMQ会默认按顺序把消息发送给下一个消费者，平均每个消费者都会得到一样多数量的消息，这种分发消息的方式叫做轮询。试着添加三个或更多个worker来运行。</p>
<h3 id="消息响应">消息响应</h3><p>执行一个任务会消耗一定的时间，也许你想知道如果一个消费者在执行一个耗时较长的任务时但是在执行一部分的时候挂掉会发生什么。在我们当前的代码中，一旦RabbitMQ把消息分发给消费者便会立即从内存中移除。这种情况下，如果停止一个worker，它正在处理的消息就会丢失。同时其他所有发送给这个worker的还没有处理的消息也会丢失。</p>
<p>但是我们不想丢失任何任务，如果一个worker挂掉，需要把任务发送到另一个worker。</p>
<p>为了确保消息永不丢失，RabbitMQ支持消息响应（message acknowledgements），消费者会发送一个响应告诉RabbitMQ已经收到了某条消息，并且已经处理，这样RabbitMQ就可以删掉它了。</p>
<p>如果一个消费者程序在未发送响应之前挂掉了（频道关闭，链接关闭，或者TCP连接丢失），RabbitMQ会认为消息没有完全处理然后会重新推送到队列中。如果此时有其他的消费者程序在运行，RabbitMQ会很快把消息发送给另一个消费者。这样就可以确保消息不会丢失，即使worker偶尔挂掉。</p>
<p>消息是没有超时的概念的，当worker断开连接的时候，RabbitMQ会重新发送消息，这样在处理一个耗时较长的消息任务时就不会出现问题了。</p>
<p>消息响应默认是关闭的。可以通过设置basic_consume的第四个参数为false(true表示不开启应答)，然后在处理完任务的时候从worker发送一个正确的响应内容。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span></span>&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"[x] Received "</span>,$msg-&gt;body,<span class="string">"\n"</span>;</div><div class="line">	sleep(substr_count($msg-&gt;body,<span class="string">'.'</span>));</div><div class="line">	<span class="keyword">echo</span> <span class="string">"[x] Done"</span>,<span class="string">"\n"</span>;</div><div class="line">	$msg-&gt;delivery_info[<span class="string">'channel]-&gt;basic_ack($msg-&gt;delivery_info['</span>delivery_tag]);</div><div class="line">&#125;;</div><div class="line">$channel-&gt;basic_consume(<span class="string">'task_queue'</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,$callback);</div></pre></td></tr></table></figure>
<p>这样我们就可以确保当你CTRL+C杀掉一个正在处理消息的worker的时候，消息并不会丢失。在这个worker挂掉之后，所有未响应的消息就会发送。</p>
<h3 id="忘了响应">忘了响应</h3><p>一个很容易犯的错误就是忘了basic_ack，后果很严重。消息会在程序退出后重新发送（可能看起来像是随机返还 原文：which may look like random redelivery），但是如果它不释放未响应的消息，RabbitMQ就会占用越来越多的内存。</p>
<p>为了排除这种错误可以使用rabbitmqctl来打印messages_unacknowledges字段：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</div><div class="line"></div><div class="line">Listing queues ...</div><div class="line">hello    <span class="number">0</span>       <span class="number">0</span></div><div class="line">...done.</div></pre></td></tr></table></figure>
<h3 id="消息持久化">消息持久化</h3><p>我们已经学习了确保即使消费者程序挂掉，任务也不会丢失。但是任务还是会在RabbitMQ服务停止的时候丢失。</p>
<p>当RabbitMQ退出或崩溃，它会丢失之前所有的队列和消息，除非你特意告诉它。所以我们必须把队列和消息设为持久化。</p>
<p>首先，为了队列不丢失，需要把它声明为<i>持久化（durable）</i>，所以修改queue_declare的第三个参数为true：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">'hello'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>尽管这行代码本身是正确的，但是仍然不会正确运行。因为在之前已经定义过一个非持久化的 hello 队列。RabbitＭＱ不允许使用不同参数重新定义一个已经存在的队列，它会返回一个错误。但是可以用一个快捷的方法去解决，定义一个不同名字的队列，比如 task_queue：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>需要把生产者和消费者程序都设置为 true。</p>
<p>这时候，我们就可以确保在RabbitMQ重启之后task_queue队列不会丢失。现在需要设置消息持久化了 - 通过设置AMQPMessage的属性数组中消息属性 delivery_mode = 2来达到。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$msg = <span class="keyword">new</span> AMQPMessage($data,</div><div class="line">		<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>) <span class="comment">//设置消息持久化</span></div><div class="line">	);</div></pre></td></tr></table></figure>
<h3 id="关于消息持久化的说明">关于消息持久化的说明</h3><p>设置消息持久化并不能完全保证消息不会丢失。这只是告诉让RabbitMQ要把消息保存到硬盘，但是从RabbitMQ接收到消息到保存完成仍然还有一个短暂的间隔时间。因为RabbitMQ并不是每一条消息都会使用fsync(2)，可能只是保存到缓存中而不是真正的写到磁盘里。并不能保证消息真正的持久化，但是对于简单的工作队列已经足够了。如果你需要更健壮的持久化，可以使用<a href="https://www.rabbitmq.com/confirms.html" target="_blank" rel="external">publisher confirms</a>机制。</p>
<h3 id="公平分发">公平分发</h3><p>也许你注意到它仍没有像我们想的那样去派发任务，比如在两个worker的情况下，处理奇数消息的比较繁忙，处理偶数消息的比较轻松，一个worker不断的忙碌而另一个几乎不需要工作，但是RabbitmQ并不知道这些，并且继续一如既往的派发消息。</p>
<p>这是因为RabbitMQ在消息进入队列的时候只管去派发，并不管消费者未做出响应的消息数。它只是把每第n条消息发送给第n个消费者。</p>
<p>我们可以使用basic_qos方法，并设置prefetch_count = 1。这样是告诉RabbitMQ在同一时刻不要发送超过1条消息给一个worker，或者说，不要发送新的消息给worker直到它已处理完上一条消息并作出了响应。这样，它就会把消息发送给下一个空闲的worker了。</p>
<p><img src="/images/rabbitmq/prefetch-count.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>,<span class="number">1</span>,<span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<h3 id="注意队列长度">注意队列长度</h3><p>如果所有的worker都处于忙碌状态，队列就会填满，你需要留意，添加更多的worker，或者使用其他的策略。</p>
<h3 id="整合">整合</h3><p>最终，new_task.php的代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/verdor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">$data = implode(<span class="string">' '</span>,array_slice($argv,<span class="number">1</span>));</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) $data = <span class="string">"Hello World!"</span>;</div><div class="line"></div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage($data,</div><div class="line">	<span class="keyword">array</span>(<span class="string">'delivery_mode'</span>=&gt;<span class="number">2</span>) <span class="comment">// 消息持久化</span></div><div class="line">);</div><div class="line">$channel-&gt;basic_publish($msg,<span class="string">''</span>,<span class="string">'task_queue'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"[x]Sent "</span>, $data, <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/new_task.php" target="_blank" rel="external">new_task.php源码</a></p>
<p>worker.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> .<span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"></div><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>,<span class="number">5672</span>,<span class="string">'guest'</span>,<span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;queue_declare(<span class="string">'task_queue'</span>,<span class="keyword">false</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'[*] Waiting for messages.To exit press CTRL+C'</span>,<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span></span>&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"[x]Received "</span>,$msg-&gt;body,<span class="string">"\n"</span>;</div><div class="line">	sleep(substr_count($msg-&gt;body,<span class="string">'.'</span>));</div><div class="line">	<span class="keyword">echo</span> <span class="string">"[x]Done"</span>,<span class="string">"\n"</span>;</div><div class="line">	$msg-&gt;delivery_info[<span class="string">'chennel'</span>]-&gt;basic_ack($msg-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>,<span class="number">1</span>,<span class="keyword">null</span>);</div><div class="line">$channel-&gt;basic_consume(<span class="string">'task_queue'</span>,<span class="string">''</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,$callback);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks))&#123;</div><div class="line">	$channel-&gt;wait();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$channel-&gt;close();</div><div class="line">$connection-&gt;close();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/worker.php" target="_blank" rel="external">worker.php</a></p>
<p>使用消息应答和prefetch_count=1后，就可以运行一个工作队列了，持久模式选项会在即使RabbitMQ重启的情况下保留任务。</p>
<p>现在我们可以继续学习第三部分的内容，学习如何发送相同的消息给多个消费者。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-two-php.html" target="_blank" rel="external">Work queues</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="工作队列">工作队列</h3><h5 id="（使用php-amqplib库）">（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP RabbitMQ 教程（一） - 介绍]]></title>
    <link href="https://www.qichengzx.com/2016/02/28/php-rabbitmq-tutorial-one.html"/>
    <id>https://www.qichengzx.com/2016/02/28/php-rabbitmq-tutorial-one.html</id>
    <published>2016-02-28T03:10:03.000Z</published>
    <updated>2016-05-07T14:06:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><h3 id="先决条件">先决条件</h3><p>本教程先决条件是RabbitMQ已经安装并正在以5672端口运行在 localhost，如果你使用了不同的域，端口，用户，密码，连接配置需要适当改变。</p>
<h3 id="获得帮助">获得帮助</h3><p>如果在本教程中遇到问题，可以通过邮件列表进行联系。</p>
<h3 id="介绍">介绍</h3><p>RabbitMQ是一个消息代理，它的本质是，从producers（生产者）接收消息，然后发送给consumers（消费者），在这个过程中，可以根据自己的配置规则使用路由，缓冲区，保存消息。</p>
<p>通常的，RabbitMQ，信息传送（messaging），使用一些专业术语。（RabbitMQ, and messaging in general, uses some jargon.）</p>
<pre><code>&gt;生产（Producing）仅仅意味着发送，发送信息的程序叫做生产者（producers），以下图表示：
</code></pre><p><img src="/images/rabbitmq/producer.png" alt=""></p>
<pre><code>&gt;队列就是一个信箱的名字，存在于RabbitMQ内部，虽然消息在RabbitMQ和你的应用之间传输，但是只能存在于队列里，队列没有大小限制，它可以存储尽可能多的消息，本质上它是一个无限大的缓冲区，多个producers（生产者）可以通过一个队列发送消息，多个consumers（消费者）也可以尝试从一个队列接收消息，队列以下图表示，队列的名字在图的上边：
</code></pre><p><img src="/images/rabbitmq/queue.png" alt="">    </p>
<pre><code>&gt;consumers（消费者）的意思与接收相似，消费者主要是等待接收消息的程序，以下图表示：
</code></pre><p><img src="/images/rabbitmq/consumer.png" alt="">    </p>
<p>需要注意的是，生产者，消费者，和代理，不需要一定在一台机器上，事实上在大多数情况下他们确实不在一台机器上。</p>
<h3 id="“Hello_World”">“Hello World”</h3><p>（使用<a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="external">php-amqplib</a>库）</p>
<p>在这一部分，我们使用PHP写两段程序，一个生产者发送一条消息，一个消费者接收消息并打印出来。我们会忽略一些php-amqplib API的细节，从简单的事情开始学习，这是一段内容为“Hello World”的消息。</p>
<p>在下边的示意图中，“P”是生产者，“C”是消费者，中间的盒子是队列 — 一个RabbitMQ代表消费者的消息缓冲区。</p>
<p><img src="/images/rabbitmq/python-one.png" alt=""></p>
<h4 id="php-amqplib库">php-amqplib库</h4><p>RabbitMQ支持很多协议，本教程包含AMQP 0-9-1，一个开放，通用信息协议，RabbitMQ支持Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等多种语言（详见<a href="http://www.rabbitmq.com/devtools.html" target="_blank" rel="external">这里</a>），在本教程中我们使用php-amqplib，使用<a href="https://getcomposer.org/doc/00-intro.md" target="_blank" rel="external">Composer</a> 管理依赖。</p>
<p>添加一个composer.json文件到你的项目目录。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"require"</span>: &#123;</div><div class="line">        <span class="attr">"php-amqplib/php-amqplib"</span>: <span class="string">"2.5.*"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你已经安装了 Composer ，可以运行如下的代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer<span class="selector-class">.phar</span> install</div></pre></td></tr></table></figure>
<p>这是一个Windows系统下的Composer安装文件。</p>
<p>现在我们已经安装了php-amqplib，可以写程序了。</p>
<h3 id="发送">发送</h3><p><img src="/images/rabbitmq/sending.png" alt=""></p>
<p>新建一个send.php作为发送端，receive.php作为接收端，发送端会连接RabbitMQ，发送一条信息，然后退出。</p>
<p>在send.php中，需要引用php-amqplib库，和使用其中的一些必要的类。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</div></pre></td></tr></table></figure>
<p>接下来，建立到RabbitMQ服务器的连接：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div></pre></td></tr></table></figure>
<p>这里我们使用socket进行连接，处理协议和鉴定，这样就已经连接到了本机的代理，如果想要连接不同的主机，只要更改localhost为该主机的名称或IP地址即可。</p>
<p>下一步，建立频道，大部分API的工作都在这完成。</p>
<p>要想发送信息，需要声明一个队列，之后可以向这个队列里发布消息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">$msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'Hello World!'</span>);</div><div class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'hello'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">" [x] Sent 'Hello World!'\n"</span>;</div></pre></td></tr></table></figure>
<p>声明队列是幂等的 — 它仅在不存在的时候才会被创建，如果存在也不会受影响。消息内容是一个字节数组（byte array），所以可以发送任何内容。</p>
<p>最后，关闭频道和连接。</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$channel</span>-&gt;<span class="keyword">close</span>()<span class="comment">;</span></div><div class="line"><span class="built_in">$connection</span>-&gt;<span class="keyword">close</span>()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/send.php" target="_blank" rel="external">这是send.php类的完整内容。</a></p>
<h3 id="发送失败">发送失败</h3><p>如果这是第一次使用RabbitMQ，并且没有看到“Sent”信息（即“ [x] Sent ‘Hello World!”），也许你抓耳挠腮的想知道为什么出错了，也许是代理没有足够的硬盘空间（默认情况下需要至少1G的空间）导致拒绝接收信息。检查日志文件，有必要的花调低限值。<a href="http://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="external">这个配置文件</a>文档将会展示给你如何设置disk_free_limit。</p>
<h3 id="接收">接收</h3><p>收件人，与发送者只发送一条消息不同，接收者会一直运行以监听信息并输出。</p>
<p><img src="/images/rabbitmq/receiving.png" alt=""></p>
<p>receive.php中与send.php中的 include和use 部分的代码一样。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</div></pre></td></tr></table></figure>
<p>设置连接与send.php一样，打开连接和频道，命名一个队列，需要注意的是，队列名需要与send.php所发布的队列的名字一致。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</div><div class="line">$channel = $connection-&gt;channel();</div><div class="line"></div><div class="line">$channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>, <span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
<p>注意，我们在此声明了一个队列，因为有可能会在send程序开启前先开启receive程序，我们想要确保在试着接收消息之前队列就已经存在了。</p>
<p>下一步，告诉服务器去从队列传送消息，我们会定义一个用于从服务器接收消息的函数，记住，消息会异步的从服务器发送到客户端。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$callback = <span class="function"><span class="keyword">function</span><span class="params">($msg)</span> </span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">" [x] Received "</span>, $msg-&gt;body, <span class="string">"\n"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$channel-&gt;basic_consume(<span class="string">'hello'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(count($channel-&gt;callbacks)) &#123;</div><div class="line">    $channel-&gt;wait();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处使用while方法，当收到消息时，会把收到的消息传入到$callback方法里。</p>
<p><a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive.php" target="_blank" rel="external">这是receive.php类的全部内容。</a></p>
<p>现在我们可以运行两段脚本了，在命令行里，执行sender程序。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php <span class="built_in">send</span>.php</div></pre></td></tr></table></figure>
<p>然后，执行receiver程序</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">receive</span><span class="selector-class">.php</span></div></pre></td></tr></table></figure>
<p>receiver程序会把通过sender程序发送的内容打印出来，receiver程序会一直运行，监听新消息（使用ctrl+c停止），所以试着运行sender程序从另一个命令行。</p>
<p>如果想查看队列，可以运行rabbitmqctl list_queues。</p>
<p>Hello World！</p>
<p>查看第二部分，建立一个简单的队列。</p>
<p>原文地址：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-php.html" target="_blank" rel="external">“Hello World!”</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="准备工作">准备工作</h2><h3 id="先决条件">先决条件</h3><p>本教程先决条件是RabbitMQ已经安装并正在以5672端口运行在 localhost，如果你使用了不同的域，端口，用户，密码，连接配置需要适当改变。</p>
<h3 id="获得帮]]>
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="rabbitmq" scheme="https://www.qichengzx.com/tags/rabbitmq/"/>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一段有意思的JS For循环代码]]></title>
    <link href="https://www.qichengzx.com/2016/02/25/a-piece-of-interesting-code-of-js-for-function.html"/>
    <id>https://www.qichengzx.com/2016/02/25/a-piece-of-interesting-code-of-js-for-function.html</id>
    <published>2016-02-25T09:10:43.000Z</published>
    <updated>2016-02-25T09:16:54.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a =<span class="number">0</span><span class="comment">;</span></div><div class="line">for (var i =<span class="number">0</span>,<span class="keyword">j </span>=<span class="number">0</span><span class="comment">; i &lt;10,j&lt;6;i++,j++) &#123;</span></div><div class="line">	a = i+<span class="keyword">j;</span></div><div class="line">	console.log(<span class="string">"i="</span>+i)<span class="comment">;</span></div><div class="line">	console.log(<span class="string">"j="</span>+<span class="keyword">j);</span></div><div class="line">	console.log(<span class="string">"a="</span>+a)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>朋友面试，遇到的面试题，电话跟我说完就回来写下来试了一下，结果与自己预想的一样。</p>
<p>没写之前，电话里说的思路是，因为 j 限制了 小于 6，那么应该只循环6次，实际上也确实是这样。</p>
<p>所以最终结果，a = 10。</p>
<h6 id="但是想不明白为什么会有这样的面试题，或者说，什么样的情况会需要写这样的代码呢？">但是想不明白为什么会有这样的面试题，或者说，什么样的情况会需要写这样的代码呢？</h6>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</]]>
    </summary>
    
      <category term="js" scheme="https://www.qichengzx.com/tags/js/"/>
    
      <category term="javascript" scheme="https://www.qichengzx.com/categories/javascript/"/>
    
  </entry>
  
</feed>
