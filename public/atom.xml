<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[启程]]></title>
  <subtitle><![CDATA[PHP是最好的语言]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.qichengzx.com/"/>
  <updated>2015-11-07T15:46:30.065Z</updated>
  <id>http://www.qichengzx.com/</id>
  
  <author>
    <name><![CDATA[qichengzx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[vps 搭建个人git服务器]]></title>
    <link href="http://www.qichengzx.com/2015/11/08/vps%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.qichengzx.com/2015/11/08/vps 搭建个人git服务器/</id>
    <published>2015-11-08T04:34:10.000Z</published>
    <updated>2015-11-07T15:46:30.065Z</updated>
    <content type="html"><![CDATA[<p>以下内容主要来自<br>    <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps" target="_blank" rel="external">How To Set Up a Private Git Server on a VPS</a></p>
<p>之前在DigitalOcean买了个5刀的vps，本来是想搞VPN的，但是没成功，后来把个人博客放这了，后来又觉得有点浪费，索性重新启用这个域名来写技术文章。</p>
<p>本来是用的WP的但是也一直没写，后来又想折腾别的程序试一下，就选了现在的<a href="https://hexo.io" target="_blank" rel="external">hexo</a>，昨天在自己电脑上安装了，也可以写文章页可以默认 <code>hexo server</code> 运行，然后，我愉快的把命令行关掉之后，就傻了。</p>
<p>后来也在官方文档和Google里看有什么办法能让它在后台运行，官方说可以 <code>hexo s &amp;</code>，然并卵，官方和Google都说可以用 <code>forever</code> <code>pm2</code> ，一样然并卵，今天早晨起来继续弄的时候，觉得还是放弃吧，既然有public文件夹，还是用nginx去解析吧。这个都是后话了。</p>
<p>下边说怎么在vps上安装git服务器，昨天和今天上午也看了一些资料一直也不成功。晚上从DigitalOcean社区里看到这篇文章，然后就成功了。</p>
<h4 id="0_在本地生成ssh_key">0 在本地生成ssh key</h4><pre><code>ssh-keygen -C <span class="string">"youremail@mailprovider.com"</span>

Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.

Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/home/flynn/.ssh/id_rsa):

Enter passphrase (empty <span class="keyword">for</span> no passphrase):

Enter same passphrase again: 

Your identification has been saved <span class="keyword">in</span> foo_rsa.

Your <span class="keyword">public</span> <span class="keyword">key</span> has been saved <span class="keyword">in</span> foo_rsa.pub.
</code></pre><p>注意替换成自己的邮箱，可以一路回车，也可以在 Enter passphrase 的时候输入一个密码保护一下。如果已经生成过了可以 <strong>略过这步</strong>。</p>
<h4 id="1_在服务器添加git用户">1 在服务器添加git用户</h4><p>首先切换到root用户，<code>su -</code> 。<br>然后添加git用户。（用户名不一定是git，但是习惯上用这个名）</p>
<p><code>useradd git</code></p>
<p>设置密码</p>
<p><code>passwd git</code></p>
<p>输入两次密码即可，用户创建完毕。我在操作的时候并没有在/home/下创建git用户的目录。</p>
<p>所以可能需要自己手动创建</p>
<p><code>cd /home/</code></p>
<p><code>mkdir git</code></p>
<p><code>sudo chown -R -v git:git git/</code></p>
<p>现在可以安装git服务了。</p>
<pre><code><span class="attribute">CentOS/Fedora</span>: <span class="string">yum install git</span>
<span class="attribute">Ubuntu/Debian</span>: <span class="string">apt-get install git</span>
</code></pre><p>DO文档说可以这样，但是部分资料里写要 install git-core，但是因为之前安装过git-core，所以不确定是不是DO文档上是正确的，<strong>所以此处DO的文档可能不准确。</strong>（不确定）</p>
<h4 id="2_把本地的ssh_key添加到服务器的允许访问列表里">2 把本地的ssh key添加到服务器的允许访问列表里</h4><p>登录进服务器，切换到git用户。</p>
<p><code>su git</code></p>
<p>然后创建git用户的.ssh文件夹及authorized_keys文件，</p>
<p><code>mkdir ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys</code></p>
<p>&amp;&amp;的意思是执行完第一个命令后紧接着执行第二个命令，分开写一样可以，连着写逼格更高。</p>
<p>然后回到本地的命令行里，</p>
<p><code>cat .ssh/id_rsa.pub | ssh git@123.45.56.78 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></p>
<p>第一个cat 后的文件地址取决于你电脑上这个文件的路径，后边是说把前边你本地的id_rsa.pub的内容写到远程服务器上git 这个用户的.ssh/authorized_keys文件里，也就是前边创建的那个文件。</p>
<p>所以，不出意外的话，此时可以在服务器上运行</p>
<p><code>cat ~/.ssh/authorized_keys</code> 就可以看到你本地电脑生成的key了，不出意外的话结尾应该是你生成key填写的邮箱。</p>
<h4 id="3_初始化本地仓库">3 初始化本地仓库</h4><p>在服务器上任何一个位置，执行</p>
<p><code>git init --bare project.git</code>，这样，在你的开发机和服务器环境是就可以用到这个project.git了。</p>
<p>（为已存在的git项目）设置远程仓库的URL</p>
<p><code>git remote set-url origin git@git.droplet.com:project.git</code></p>
<p>git@git.droplet.com:project.git 替换成你的git用户名，你的ip或域名，及你的服务器上git的文件夹</p>
<p>如果是一个新的仓库，是这样</p>
<p><code>git init &amp;&amp; git remote add origin git@git.droplet.com:project.git</code></p>
<p>git@git.droplet.com:my-project.gi 只是服务器上</p>
<h3 id="总结：">总结：</h3><pre><code>所以实际上上边的流程是

<span class="number">0</span>. 在服务器上比如home/git 目录里git init --bare project<span class="class">.git</span>
<span class="number">1</span>. 在自己电脑，某个目录，git init 或者git clone git@git<span class="class">.droplet</span><span class="class">.com</span>:project<span class="class">.git</span>
<span class="number">2</span>. 在服务器上比如www目录，git init 或git clone git@git<span class="class">.droplet</span><span class="class">.com</span>:project<span class="class">.git</span>

不出意外，这样就可以了。

本地添加一个新文件，git add . , git commit -m <span class="string">"test"</span> ,git push origin master，登录服务器，切换到www目录，git pull origin master，就可以了。
</code></pre><p>参考资料:</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps" target="_blank" rel="external">How To Set Up a Private Git Server on a VPS</a></p>
<p><a href="https://git-scm.com/book/it/v2/Git-on-the-Server-Setting-Up-the-Server" target="_blank" rel="external">Git on the Server - Setting Up the Server</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下内容主要来自<br>    <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-git-server-on-a-vps" target="_blank" re]]>
    </summary>
    
      <category term="vps,git" scheme="http://www.qichengzx.com/tags/vps-git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fetch方法发送网络请求]]></title>
    <link href="http://www.qichengzx.com/2015/11/06/Fetch%E6%96%B9%E6%B3%95%E5%8F%91%E9%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <id>http://www.qichengzx.com/2015/11/06/Fetch方法发送网络请求/</id>
    <published>2015-11-06T14:54:22.000Z</published>
    <updated>2015-11-08T02:41:30.000Z</updated>
    <content type="html"><![CDATA[<p>先贴一个官方文档。<br><a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">Network</a></p>
<pre><code>fetch<span class="list">(<span class="quoted">'https</span><span class="keyword">://mywebsite</span>.com/endpoint/', {
    method: <span class="quoted">'POST</span>',
    headers: {
        <span class="quoted">'Accept</span>': <span class="quoted">'application/json</span>',
        <span class="quoted">'Content-Type</span>': <span class="quoted">'application/json</span>',
    },
    body: JSON.stringify<span class="list">({
        firstParam: <span class="quoted">'yourValue</span>',
        secondParam: <span class="quoted">'yourOtherValue</span>',
    })</span>
})</span>
</code></pre><p>一开始我就是单纯的这么写的，愉快的把URL替换掉，把参数替换掉，然后。。。<br>我愉快的敲下 <code>var_dump($_POST[&#39;firstParam&#39;])</code> 的时候，后台没接到任何东西，后来在stackoverflow上看到回答，说之所以接收不到，是因为这不属于form data，想要这么写，需要在接收前添加 <code>file_get_contents(&#39;php://input&#39;)</code>,然后果然就可以了。</p>
<pre><code><span class="variable">$json</span> = json_decode(file_get_contents(<span class="string">'php://input'</span>), <span class="literal">true</span>);
var_dump(<span class="variable">$json</span>[<span class="string">'firstParam'</span>]);
</code></pre><p>但是这样会影响到现有的web应用，所以又继续查资料，发现可以改成下边这样的方法。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">toQueryString</span>(<span class="params">obj</span>) </span>{
    <span class="keyword">return</span> obj ? <span class="built_in">Object</span>.keys(obj).sort().map(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>{
        <span class="keyword">var</span> val = obj[key];
        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) {
            <span class="keyword">return</span> val.sort().map(<span class="function"><span class="keyword">function</span> (<span class="params">val2</span>) </span>{
                <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(val2);
            }).join(<span class="string">'&amp;'</span>);
        }

        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(val);
    }).join(<span class="string">'&amp;'</span>) : <span class="string">''</span>;
}


fetch(url, {
    method: <span class="string">'post'</span>,
    body: toQueryString({ 
        <span class="string">'firstParam'</span>: <span class="string">'yourValue'</span>,
        <span class="string">'secondParam'</span>:<span class="string">'yourOtherValue'</span> 
    })
}) 
</code></pre><p>这样，在后台就可以正常的用$_POST[‘firstParam’];接收了。</p>
<p><a href="http://stackoverflow.com/questions/32448862/how-can-i-use-react-native-with-php-with-fetch-return-data-is-always-null" target="_blank" rel="external">Sending data as key-value pair using fetch polyfill in react-native</a></p>
<p><a href="http://stackoverflow.com/questions/31201940/sending-data-as-key-value-pair-using-fetch-polyfill-in-react-native" target="_blank" rel="external">How can I use react-native with php with fetch return data is always null</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先贴一个官方文档。<br><a href="https://facebook.github.io/react-native/docs/network.html#content" target="_blank" rel="external">Network</a></p>
<]]>
    </summary>
    
      <category term="fetch" scheme="http://www.qichengzx.com/tags/fetch/"/>
    
      <category term="react-native" scheme="http://www.qichengzx.com/tags/react-native/"/>
    
      <category term="网络请求" scheme="http://www.qichengzx.com/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.qichengzx.com/2015/11/06/hello-world/"/>
    <id>http://www.qichengzx.com/2015/11/06/hello-world/</id>
    <published>2015-11-06T13:54:22.000Z</published>
    <updated>2015-11-08T02:35:08.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
