<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>启程</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qichengzx.com/"/>
  <updated>2019-01-27T11:29:22.165Z</updated>
  <id>https://www.qichengzx.com/</id>
  
  <author>
    <name>qichengzx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】Go和WebAssembly：在浏览器中运行Go程序</title>
    <link href="https://www.qichengzx.com/2019/01/01/go-in-the-browser.html"/>
    <id>https://www.qichengzx.com/2019/01/01/go-in-the-browser.html</id>
    <published>2019-01-01T07:53:01.000Z</published>
    <updated>2019-01-27T11:29:22.165Z</updated>
    
    <content type="html"><![CDATA[<p>在过去很长一段时间里，Javascript是Web开发人员中的通用语言。如果你想写一个稳定成熟的 Web 应用程序，用javascript几乎是唯一的方法。</p><p>WebAssembly（也称为wasm）将很快改变这种情况。使用WebAssembly可以用任何语言编写Web应用程序。在本文中，我们将了解如何编写Go程序并使用wasm在浏览器中运行它们。</p><h2 id="但首先，什么是WebAssembly"><a href="#但首先，什么是WebAssembly" class="headerlink" title="但首先，什么是WebAssembly"></a>但首先，什么是WebAssembly</h2><p><a href="https://webassembly.org/" target="_blank" rel="external">webassembly.org</a> 将其定义为“基于堆栈的虚拟机的二进制指令格式”。这是一个很好的定义，但让我们将其分解为我们可以轻松理解的内容。</p><p>从本质上讲，wasm是一种二进制格式; 就像ELF，Mach和PE一样。唯一的区别是它适用于虚拟编译目标，而不是实际的物理机器。为何虚拟？因为不同于 C/C++ 二进制文件，wasm二进制文件不针对特定平台。因此，您可以在Linux，Windows和Mac中使用相同的二进制文件而无需进行任何更改。 因此，我们需要另一个“代理”，它将二进制文件中的wasm指令转换为特定于平台的指令并运行它们。通常，这个“代理”是一个浏览器，但从理论上讲，它也可以是其他任何东西。</p><p>这为我们提供了一个通用的编译目标，可以使用我们选择的任何编程语言构建Web应用程序！只要我们编译为wasm格式，我们就不必担心目标平台。就像我们编写一个Web应用程序一样，但是现在我们有了用我们选择的任何语言编写它的优势。</p><h2 id="你好-WASM"><a href="#你好-WASM" class="headerlink" title="你好 WASM"></a>你好 WASM</h2><p>让我们从一个简单的“hello world”程序开始，但是要确保您的Go版本至少为1.11。我们可以这样写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"hello wasm"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>保存为<code>test.go</code>。看起来像是一个普通的Go程序。现在让我们将它编译为wasm平台程序。我们需要设置<code>GOOS</code>和<code>GOARCH</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$GOOS=js GOARCH=wasm <span class="keyword">go</span> build -o test.wasm test.<span class="keyword">go</span></div></pre></td></tr></table></figure><p>现在我们生成了 wasm 二进制文件。但与原生系统不同，我们需要在浏览器中运行它。为此，还需要再做一点工作来实现这一目标：</p><ul><li>Web服务器来运行应用</li><li>一个index.html文件，其中包含加载wasm二进制文件所需的一些js代码。</li><li>还有一个js文件，它作为浏览器和我们的wasm二进制文件之间的通信接口。</li></ul><p>我喜欢把它想象成制作The PowerPuff Girls所需要的东西。</p><p><img src="/images/go/powerpuff.jpg" alt=""></p><p>然后，BOOM，我们有了一个WebAssembly应用程序！</p><p>现在Go目录中已经包含了html和js文件，因此我们将其复制过来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">cp <span class="string">"<span class="variable">$(go env GOROOT)</span>/misc/wasm/wasm_exec.js"</span> .</span></div><div class="line"><span class="meta">$</span><span class="bash">cp <span class="string">"<span class="variable">$(go env GOROOT)</span>/misc/wasm/wasm_exec.html"</span> .</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="comment"># we rename the html file to index.html for convenience.</span></span></div><div class="line"><span class="meta">$</span><span class="bash">mv wasm_exec.html index.html</span></div><div class="line"><span class="meta">$</span><span class="bash">ls -l</span></div><div class="line">total 8960</div><div class="line">-rw-r--r-- 1 agniva agniva    1258 Dec  6 12:16 index.html</div><div class="line">-rwxrwxr-x 1 agniva agniva 6721905 Sep 24 12:28 serve</div><div class="line">-rw-rw-r-- 1 agniva agniva      76 Dec  6 12:08 test.go</div><div class="line">-rwxrwxr-x 1 agniva agniva 2425246 Dec  6 12:09 test.wasm</div><div class="line">-rw-r--r-- 1 agniva agniva   11905 Dec  6 12:16 wasm_exec.js</div></pre></td></tr></table></figure><p><code>serve</code>是Go二进制文件，是一个Web服务器。但几乎任何Web服务器都可以。（译者注:原文并没有提供serve二进制文件的源代码，相信聪明的你一定知道怎样编写。）</p><p>一旦运行它，并打开浏览器。可以看到一个<code>Run</code>按钮，点击它，将执行我们的应用程序。然后我们点击它并检查控制台：</p><p><img src="/images/go/hellowasm.png" alt=""></p><p>真牛，我们刚刚在Go中编写了一个程序并在浏览器中运行它。</p><p>到现在为止一切顺利。但这是一个简单的“hello world”程序。真实的Web应用程序需要与DOM交互。我们需要响应按钮单击事件，从文本框中获取输入数据，并将数据发送回DOM。现在我们将构建一个最小的图像编辑器，它将使用所有这些功能。</p><h2 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h2><p>但首先，要使Go代码与浏览器进行交互，我们需要一个DOM API。我们有<code>syscall/js</code>库来帮助我们解决这个问题。它是一个非常简单却功能强大的DOM API形式，我们可以在其上构建我们的应用程序。在我们制作应用程序之前，让我们快速了解它的一些功能。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>为了响应DOM事件，我们声明了回调并用这样的事件将它们连接起来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> “syscall/js”</div><div class="line"></div><div class="line"><span class="comment">// Declare callback</span></div><div class="line">cb := js.NewEventCallback(js.PreventDefault, <span class="function"><span class="keyword">func</span><span class="params">(ev js.Value)</span></span> &#123;</div><div class="line"><span class="comment">// handle event</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Hook it up with a DOM event</span></div><div class="line">js.Global().Get(<span class="string">"document"</span>).</div><div class="line">Call(<span class="string">"getElementById"</span>, <span class="string">"myBtn"</span>).</div><div class="line">Call(<span class="string">"addEventListener"</span>, <span class="string">"click"</span>, cb)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Call cb.Release() on your way out.</span></div></pre></td></tr></table></figure><h3 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h3><p>要从Go中更新DOM，我们可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> “syscall/js”</div><div class="line"></div><div class="line">js.Global().Get(<span class="string">"document"</span>).</div><div class="line">Call(<span class="string">"getElementById"</span>, <span class="string">"myTextBox"</span>).</div><div class="line">Set(<span class="string">"value"</span>, <span class="string">"hello wasm"</span>)</div></pre></td></tr></table></figure><p>您甚至可以调用JS函数并操作本机JS对象，如 <code>FileReader</code>或<code>Canvas</code>。查看<a href="https://golang.org/pkg/syscall/js/" target="_blank" rel="external"><code>syscall/js</code></a>文档以获取更多详细信息。</p><h2 id="正确的-Web-应用程序"><a href="#正确的-Web-应用程序" class="headerlink" title="正确的 Web 应用程序"></a>正确的 Web 应用程序</h2><p>接下来我们将构建一个小应用程序，它将获取输入的图像，然后对图像执行一些操作，如亮度，对比度，色调，饱和度，最后将输出图像发送回浏览器。 每个效果都会有滑块，用户可以更改这些效果并实时查看目标图像的变化。</p><p>首先，我们需要从浏览器获取输入的图像给到我们的Go代码，以便可以处理它。为了有效地做到这一点，我们需要采取一些<code>不安全</code>的技巧，这里跳过具体细节。拥有图像后，它完全在我们的控制之下，我们可以自由地做任何事情。下面是图像加载器回调的简短片段，为简洁起见略有简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">onImgLoadCb = js.NewCallback(<span class="function"><span class="keyword">func</span><span class="params">(args []js.Value)</span></span> &#123;</div><div class="line">reader := bytes.NewReader(inBuf) <span class="comment">// inBuf is a []uint8 slice where our image is loaded</span></div><div class="line">sourceImg, _, err := image.Decode(reader)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="comment">// handle error</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Now the sourceImg is an image.Image with which we are free to do anything!</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">js.Global().Set(<span class="string">"loadImage"</span>, onImgLoadCb)</div></pre></td></tr></table></figure><p>然后我们从效果滑块中获取用户值，并操纵图像。我们使用了很棒的<a href="https://github.com/anthonynsimon/bild" target="_blank" rel="external"><code>bild</code></a>库。下面是回调的一小部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/anthonynsimon/bild/adjust"</span></div><div class="line"></div><div class="line">contrastCb = js.NewEventCallback(js.PreventDefault, <span class="function"><span class="keyword">func</span><span class="params">(ev js.Value)</span></span> &#123;</div><div class="line">delta := ev.Get(<span class="string">"target"</span>).Get(<span class="string">"valueAsNumber"</span>).Float()</div><div class="line">res := adjust.Contrast(sourceImg, delta)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">js.Global().Get(<span class="string">"document"</span>).</div><div class="line">Call(<span class="string">"getElementById"</span>, <span class="string">"contrast"</span>).</div><div class="line">Call(<span class="string">"addEventListener"</span>, <span class="string">"change"</span>, contrastCb)</div></pre></td></tr></table></figure><p>在此之后，我们将目标图像编码为jpeg并将其发送回浏览器。这是完整的应用程序：</p><p>加载图片：</p><p><img src="/images/go/initial.png" alt=""></p><p>改变对比：</p><p><img src="/images/go/contrast.png" alt=""></p><p>改变色调：</p><p><img src="/images/go/hue.png" alt=""></p><p>太棒了，我们可以在浏览器中本地操作图像而无需编写一行Javascript！ 源代码可以在<a href="https://github.com/agnivade/shimmer" target="_blank" rel="external">这里</a>找到。</p><p>请注意，所有这些都是在浏览器本身中完成的。这里没有Flash插件，Java Applet或Silverlight。而是使用浏览器本身支持的开箱即用的WebAssembly。</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>我的一些结束语：</p><ul><li><p>由于Go是一种垃圾收集语言，因此整个运行时都在wasm二进制文件中。因此，二进制文件通常有几MB的大小。与C/Rust等其他语言相比，这仍然是一个痛点; 因为向浏览器发送MB级数据并不理想。但是，如果wasm规范本身支持GC，那么这可能会改变。</p></li><li><p>Go中的Wasm支持正式进行试验。<code>syscall/js</code> API本身也在不断变化，未来可能会发生变化。如果您发现错误，请随时在我们<a href="https://github.com/golang/go/issues" target="_blank" rel="external">issues</a>报告问题。</p></li><li><p>与所有技术一样，WebAssembly也不是一颗银弹。有时，简单的JS更快更容易编写。然而，wasm规范本身正在开发中，并且即将推出更多功能。线程支持就是这样一个特性。</p></li></ul><p>希望这篇文章展示了WebAssembly的一些很酷的方面，以及如何使用Go编写功能齐全的Web应用程序。如果您发现错误，请尝试一下，并提出问题。如果您需要任何帮助，请随时访问 <a href="https://gophers.slack.com/" target="_blank" rel="external">#webassembly</a>频道。</p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://blog.gopheracademy.com/advent-2018/go-in-the-browser/" target="_blank" rel="external">Go and WebAssembly: running Go programs in your browser</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在过去很长一段时间里，Javascript是Web开发人员中的通用语言。如果你想写一个稳定成熟的 Web 应用程序，用javascript几乎是唯一的方法。&lt;/p&gt;
&lt;p&gt;WebAssembly（也称为wasm）将很快改变这种情况。使用WebAssembly可以用任何语言编
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>腾讯防水墙验证码使用</title>
    <link href="https://www.qichengzx.com/2018/06/15/qq-007-captcha.html"/>
    <id>https://www.qichengzx.com/2018/06/15/qq-007-captcha.html</id>
    <published>2018-06-15T08:56:24.000Z</published>
    <updated>2019-01-08T13:15:32.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/WX20180615-172557.png" alt=""></p><p>前阵子腾讯出了个<a href="https://007.qq.com/" target="_blank" rel="external">验证码产品</a>，宣称“告别传统验证码的单点防御，十道安全栅栏打造立体全面的安全验证，将黑产拒之门外”。看起来很不错的样子，正好之前使用过另外一家类似的产品，但是当时没有试用，今天特地注册了解了一下。</p><p>注册很简单，填写手机号邮箱和域名等即可。由于是在本地环境测试，似乎填写的域名并没有什么影响。而且填写时可以选择适用场景，应该是针对不同的场景有不同的策略。</p><p>功能也比较丰富，支持：</p><ul><li><p>2000次/小时安全防护</p></li><li><p>支持免验证+分级验证</p></li><li><p>三分钟快速接入</p></li><li><p>全功能配置后台</p></li><li><p>支持HTTPS</p></li><li><p>阈值内流量无广告</p></li></ul><p>注册完之后会分配一个 <code>appid</code> 和 <code>App Secret Key</code>，<code>App Secret Key</code> 需要妥善保存，不可暴露出来。</p><p>下面就简单的记录下普通场景下如何使用。（此场景指简单使用，非验证码配置的场景）</p><h4 id="0-前端页面"><a href="#0-前端页面" class="headerlink" title="0.前端页面"></a>0.前端页面</h4><p>在 HTML 中引入js文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ssl.captcha.qq.com/TCaptcha.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>然后在需要激活的位置加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"TencentCaptcha"</span></span></div><div class="line"><span class="tag">  <span class="attr">data-appid</span>=<span class="string">"200700xxxx"</span></span></div><div class="line"><span class="tag">  <span class="attr">data-cbfn</span>=<span class="string">"callback"</span></span></div><div class="line"><span class="tag">&gt;</span>验证<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>官方文档表示可以使用其他标签，只需有 <code>id</code> 及 <code>cbfn</code> 属性即可。</p><p>然后注册回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.callback = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">  <span class="comment">// res（未通过验证）= &#123;ret: 1, ticket: null&#125;</span></div><div class="line">  <span class="comment">// res（验证成功） = &#123;ret: 0, ticket: "String", randstr: "String"&#125;</span></div><div class="line">  <span class="keyword">if</span>(res.ret === <span class="number">0</span>)&#123;</div><div class="line">      alert(res.ticket)   <span class="comment">// 票据</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>前端的 callback 如果验证成功后，就可以在提交信息的同时把腾讯返回的内容提交给后端，主要是验证票据：<code>ticket</code> 和随机字符串：<code>randstr</code>。</p><p>我测试的例子中是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/verify"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"appid"</span> <span class="attr">value</span>=<span class="string">"200700xxxx"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"ticket"</span> <span class="attr">name</span>=<span class="string">"ticket"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"randstr"</span> <span class="attr">name</span>=<span class="string">"randstr"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">disabled</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>修改回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.callback = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">  <span class="keyword">if</span>(res.ret === <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'ticket'</span>).value = res.ticket</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'randstr'</span>).value = res.randstr</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'ticket'</span>).value = res.ticket</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).disabled = <span class="literal">false</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'验证失败'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>前端验证成功后，把 <code>ticket</code> 和 <code>randstr</code> 填充到表单中去。</p><p>此时页面就可以使用这个验证服务了。</p><h4 id="1-后端"><a href="#1-后端" class="headerlink" title="1.后端"></a>1.后端</h4><p>后端拿到提交的表单后，需要再去请求腾讯的接口验证是否成功。</p><p>如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveVerify</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</div><div class="line">        http.Error(w, <span class="string">"Method not allowed"</span>, <span class="number">405</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    r.ParseForm()</div><div class="line"></div><div class="line">    aid := r.Form[<span class="string">"appid"</span>][<span class="number">0</span>]</div><div class="line">    AppSecretKey := <span class="string">"yourSecretKey"</span></div><div class="line">    UserIP := r.RemoteAddr</div><div class="line">    Ticket :=  r.Form[<span class="string">"ticket"</span>][<span class="number">0</span>]</div><div class="line">    Randstr := r.Form[<span class="string">"randstr"</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    req, err := http.NewRequest(<span class="string">"GET"</span>, API, <span class="literal">nil</span>)</div><div class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line"></div><div class="line">    q := req.URL.Query()</div><div class="line">    q.Add(<span class="string">"aid"</span>, aid)</div><div class="line">    q.Add(<span class="string">"AppSecretKey"</span>, AppSecretKey)</div><div class="line">    q.Add(<span class="string">"UserIP"</span>, UserIP)</div><div class="line">    q.Add(<span class="string">"Ticket"</span>, Ticket)</div><div class="line">    q.Add(<span class="string">"Randstr"</span>, Randstr)</div><div class="line">    req.URL.RawQuery = q.Encode()</div><div class="line"></div><div class="line">    httpClient := &amp;http.Client&#123;</div><div class="line">        Timeout: <span class="number">10</span>*time.Second,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"going to check :"</span>,req.URL.String())</div><div class="line"></div><div class="line">    resp, err := httpClient.Do(req)</div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        w.Write([]<span class="keyword">byte</span>(<span class="string">"got error"</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        w.Write([]<span class="keyword">byte</span>(<span class="string">"got error"</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    w.Write(body)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>腾讯服务器将返回 <code>{response:1, evil_level:70, err_msg:&quot;&quot;}</code> 类似的内容。其中：</p><p>response = 1 表示验证成功。</p><p>evil_level 是恶意等级，范围为0-100。</p><p>response = 1 即表示此次请求是“正常”的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>确实很容易接入，而且还提供了验证数据的请求统计等，包括通过与拦截的数据，日请求量，通过量，拦截量。</p><p>后台还提供了对场景更改的操作，也可以定制外观。</p><p>整体还不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/WX20180615-172557.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前阵子腾讯出了个&lt;a href=&quot;https://007.qq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;验证码产品&lt;/a&gt;，宣称
      
    
    </summary>
    
      <category term="javascript" scheme="https://www.qichengzx.com/categories/javascript/"/>
    
    
      <category term="qq" scheme="https://www.qichengzx.com/tags/qq/"/>
    
      <category term="captcha" scheme="https://www.qichengzx.com/tags/captcha/"/>
    
  </entry>
  
  <entry>
    <title>Git 同步上游源更改</title>
    <link href="https://www.qichengzx.com/2018/05/29/git-pull-upstream.html"/>
    <id>https://www.qichengzx.com/2018/05/29/git-pull-upstream.html</id>
    <published>2018-05-29T09:45:12.000Z</published>
    <updated>2019-01-08T13:15:32.453Z</updated>
    
    <content type="html"><![CDATA[<p>在 Git 上 fork 了一个项目后，如果没有经常合并上游的更改，或者 fork 后的项目提交代码后没有提交到上游，就会出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This branch is X commits ahead, Y commits behind”</div></pre></td></tr></table></figure><p>可以通过如下的方式同步上游项目。</p><p>在本地添加上游项目:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add upstream git@github:upstream/repo.git</div></pre></td></tr></table></figure><p>当需要同步时，执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git pull --rebase upstream master</div><div class="line">git push --force-with-lease origin master</div></pre></td></tr></table></figure><p>–rebase 和 –force-with-lease 选项在没有合并到上游提交时才有必要。</p><p>以下还有几个可以用到的命令:</p><p>重置本地的更改到上游的状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard upstream/master</div></pre></td></tr></table></figure><p>其实通常使用中，建议为 功能/错误修复 创建一个新的分支。这样可以在等待 PR 被合并时，开始另一个 功能/错误修复 的开发。如果从不直接提交给 master，那么可以不用使用 –rebase 或 –force-with-lease 进行同步:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git pull upstream master</div><div class="line">git push origin master</div></pre></td></tr></table></figure><p>在更新主分支后更新功能分支:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout myfeature</div><div class="line">git rebase master</div><div class="line">git push --force-with-lease origin myfeature</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Git 上 fork 了一个项目后，如果没有经常合并上游的更改，或者 fork 后的项目提交代码后没有提交到上游，就会出现&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
      <category term="git" scheme="https://www.qichengzx.com/categories/git/"/>
    
    
      <category term="git" scheme="https://www.qichengzx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用 Go，Echo 和 Vue 创建单页 TODO 应用</title>
    <link href="https://www.qichengzx.com/2018/05/13/create-a-single-page-app-with-go-echo-and-vue.html"/>
    <id>https://www.qichengzx.com/2018/05/13/create-a-single-page-app-with-go-echo-and-vue.html</id>
    <published>2018-05-13T03:19:27.000Z</published>
    <updated>2019-01-08T13:15:32.449Z</updated>
    
    <content type="html"><![CDATA[<p>本教程中我们将会创建一个 “todo” 应用。完成后可以实现创建任务，展示新创建的任务和删除它们。</p><p>此程序后端使用 Go 语言。Go 由 Google 开发。虽然不是最流行的语言，但是正在逐步得到认可。Go 非常轻量级，易于学习，运行快。此教程假设你已经对于这门语言有了一些了解，并且已经安装和配置好了开发环境。</p><p>我们将会使用 Echo 框架，Echo 框架相当于 PHP 语言的 Slim PHP 或 Lumen 框架，你应该有点熟悉使用微框架和使用路由处理 http 请求的概念。</p><p>任务数据将会储存在 SQLite 数据库中，SQLite 是一个轻量级的可替代 MySQL 或 PostgreSQL 的数据库。数据会存在一个独立的文件中，与应用在同一目录而不是存在服务器上。</p><p>最后，前端使用 HTML5 和流行的 VueJS JavaScript 框架，需要对 VueJS 有一定的了解。</p><p>我们的应用程序将分解成四个基本部分。我们将拥有我们的主包，用来设置路由和数据库。接下来，我们将有几个处理程序用来处理不同的路由。 当然，我们也会有一个 Task 模型，它将使用 SQLite 进行持久化。最后，应用程序将有一个简单的 index.html 文件，其中包含我们的 HTML5 和 VueJS 客户端代码。 让我们深入挖掘！</p><h2 id="路由和数据库"><a href="#路由和数据库" class="headerlink" title="路由和数据库"></a>路由和数据库</h2><p>在入口文件中会引入几个包。”database/sql” 是Go标准包，但是 Echo 和 SQLite 需要从 Github 下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go get github.com/labstack/<span class="built_in">echo</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> go get github.com/mattn/go-sqlite3</span></div></pre></td></tr></table></figure><p>然后创建应用的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir go-echo-vue &amp;&amp; <span class="built_in">cd</span> go-echo-vue</span></div></pre></td></tr></table></figure><p>现在开始写路由，在 go-echo-vue 目录创建一个文件并命名为 “todo.go” ，然后引入 Echo 框架。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"github.com/labstack/echo"</span></div><div class="line"><span class="string">"github.com/labstack/echo/engine/standard"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>下一步，创建go程序必需的 “main” 方法。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; &#125;</div></pre></td></tr></table></figure><p>为了使前端的 VueJS 可以和后端通信，创建任务，需要设置一些基本的路由。第一件事就是实例化一个 Echo 。然后使用內建方法定义几个路由。如果使用过其他框架，应该会熟悉这个概念。</p><p>路由使用一个正则作为第一个参数，然后使用一个处理方法作为第二个参数。在此教程中必须使用 Echo.HandlerFunc 接口。</p><p>现在可以在 “main” 方法中创建几个给前端通信使用的路由了。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Create a new instance of Echo</span></div><div class="line">    e := echo.New()</div><div class="line"></div><div class="line">    e.GET(<span class="string">"/tasks"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> c.JSON(<span class="number">200</span>, <span class="string">"GET Tasks"</span>) &#125;)</div><div class="line">    e.PUT(<span class="string">"/tasks"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> c.JSON(<span class="number">200</span>, <span class="string">"PUT Tasks"</span>) &#125;)</div><div class="line">    e.DELETE(<span class="string">"/tasks/:id"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> c.JSON(<span class="number">200</span>, <span class="string">"DELETE Task "</span>+c.Param(<span class="string">"id"</span>)) &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Start as a web server</span></div><div class="line">    e.Run(standard.New(<span class="string">":8000"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上路由只输出了固定的文本内容，将会在接下来改进。</p><p>可以使用 Postman 测试以上接口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go build todo.go</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./todo</span></div></pre></td></tr></table></figure><p>运行后，打开 Postman，输入 localhost:8000，选择 GET 来测试 “/tasks” 路由，正常可以看到 “GET Tasks”。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/o2AE4E3lRzmGDo9I4Uqv_get_tasks.png" alt=""></p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/Et8CnQzSZihek28dvsoL_put_tasks.png" alt=""></p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/L2MH4UkDTQG6tBjW492c_delete_tasks.png" alt=""></p><p>然后是配置数据库，指定存储文件为 “storage.db” ，如果不存在程序会自动创建。数据库创建后需要运行数据迁移。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"database/sql"</span></div><div class="line"></div><div class="line"><span class="string">"github.com/labstack/echo"</span></div><div class="line"><span class="string">"github.com/labstack/echo/engine/standard"</span></div><div class="line">_ <span class="string">"github.com/mattn/go-sqlite3"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>在 main 方法里增加</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">db := initDB(<span class="string">"storage.db"</span>)</div><div class="line">migrate(db)</div></pre></td></tr></table></figure><p>然后需要定义 initDB 和 migrate 方法。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">(filepath <span class="keyword">string</span>)</span> *<span class="title">sql</span>.<span class="title">DB</span></span> &#123;</div><div class="line">db, err := sql.Open(<span class="string">"sqlite3"</span>, filepath)</div><div class="line"></div><div class="line"><span class="comment">//检查错误</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果open没有报错，但是仍然没有数据库连接，一样要退出</span></div><div class="line"><span class="keyword">if</span> db == <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"db nil"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> db</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">migrate</span><span class="params">(db *sql.DB)</span></span> &#123;</div><div class="line">sql := <span class="string">`</span></div><div class="line"><span class="string">CREATE TABLE IF NOT EXISTS tasks(</span></div><div class="line"><span class="string">id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></div><div class="line"><span class="string">name VARCHAR NOT NULL</span></div><div class="line"><span class="string">);</span></div><div class="line"><span class="string">`</span></div><div class="line"></div><div class="line">_, err := db.Exec(sql)</div><div class="line"></div><div class="line"><span class="comment">//出错退出</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两个方法用于连接数据库，建表。”initDB” 会打开一个 db 文件或者创建它。如果失败程序会退出。</p><p>“migrate” 方法运行创建表的 SQL 。如果失败程序退出。</p><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go build todo.go</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./todo</span></div></pre></td></tr></table></figure><p>查看效果。</p><p>如果打开另一个终端，列出当前目录内容时会发现已经创建了 “storage.db” ,执行以下命令来确认它确实是个 SQLite 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sqlite3 storage.db</span></div></pre></td></tr></table></figure><p>需要安装 <a href="https://www.sqlite.org/download.html" target="_blank" rel="external">SQLite</a> 才可以执行此命令。</p><p>此命令会给出提示，输入 “.tables” ，可以列出所有的表，输入 “.quit” 退出。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/pDLs76QxRVuxllrUPOqV_sqlite3.png" alt=""></p><h2 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h2><p>之前已经创建了与前端交互的接口，现在需要创建或删除任务时给客户端真实的结果。这需要几个方法去完成。</p><p>在 “todo.go” 中需要引入新的包。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"database/sql"</span></div><div class="line">    <span class="string">"go-echo-vue/handlers"</span></div><div class="line"></div><div class="line">    <span class="string">"github.com/labstack/echo"</span></div><div class="line">    <span class="string">"github.com/labstack/echo/engine/standard"</span></div><div class="line">    _ <span class="string">"github.com/mattn/go-sqlite3"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>然后修改路由，使用刚刚创建的 handlers 包去处理。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// todo.go</span></div><div class="line">    e := echo.New()</div><div class="line"></div><div class="line">    e.File(<span class="string">"/"</span>, <span class="string">"public/index.html"</span>)</div><div class="line">    e.GET(<span class="string">"/tasks"</span>, handlers.GetTasks(db))</div><div class="line">    e.PUT(<span class="string">"/tasks"</span>, handlers.PutTask(db))</div><div class="line">    e.DELETE(<span class="string">"/tasks/:id"</span>, handlers.DeleteTask(db))</div><div class="line"></div><div class="line">    e.Run(standard.New(<span class="string">":8000"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>查看这段代码，你可能会注意到列出的处理程序实际上并不遵循 Echo 所要求的函数签名。相反，这些函数返回一个满足该接口的函数。这是我用过的一个技巧，所以我们可以将 db 实例从 handler 传递到 handler ，而不必在每次我们要使用数据库时创建一个新实例。稍后会更清楚。</p><p>我们还增加了一条额外的路由。这是一个包含我们的 VueJS 客户端代码的静态 html 文件。我们可以使用 “File” 功能提供静态文件。在这种情况下，将在访问 “/“ 的时候输出我们的客户端代码。</p><p>然后创建一个名为 “handlers” 的目录，并在该目录中创建一个名为 “tasks.go” 的文件。接下来，我们需要导入一些我们需要的软件包。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// handlers/tasks.go</span></div><div class="line"><span class="keyword">package</span> handlers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"database/sql"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"strconv"</span></div><div class="line"></div><div class="line">    <span class="string">"github.com/labstack/echo"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>接下来的这一行代码，它允许我们在响应中返回任意的 JSON ，就像你稍后会看到的一样。这是一个以字符串作为 key ，任意类型作为值的 map 结构。 在Go中，”interface” 关键字表示从原始数据类型到用户定义类型或结构的任何内容。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hanlers/tasks.go</span></div><div class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div></pre></td></tr></table></figure><p>这个文件主要是处理函数。它们都以 db 连接作为参数，但要记住， Echo 路由的正确处理程序，需要实现 Echo.HandlerFunc 接口。 我们通过返回与接口签名匹配的匿名函数来实现此目标。该函数现在可以使用数据库连接并将其传递给我们的模型。</p><p>为了能正常工作，暂时我们不会处理数据库。只会返回一些假数据。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// handlers/tasks.go</span></div><div class="line"></div><div class="line"><span class="comment">// GetTasks endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTasks</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="keyword">return</span> c.JSON(http.StatusOK, <span class="string">"tasks"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PutTask endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutTask</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="keyword">return</span> c.JSON(http.StatusCreated, H&#123;</div><div class="line">            <span class="string">"created"</span>: <span class="number">123</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// DeleteTask endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteTask</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        id, _ := strconv.Atoi(c.Param(<span class="string">"id"</span>))</div><div class="line">        <span class="keyword">return</span> c.JSON(http.StatusOK, H&#123;</div><div class="line">            <span class="string">"deleted"</span>: id,</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Go http 软件包为我们提供了一些便利的常量来表示 HTTP 状态代码。例如，我们使用 http.StatusCreated 作为我们的 PUT 响应。 这些处理程序中的每一个现在都会返回 JSON 格式的响应。最后一个函数 “DeleteTask” 需要一个 id 参数。我们使用 strconv 包和 Atoi（alpha to integer）函数来确保 id 被转换为整数。 保证在通过数据库中的 id 查询任务时正确使用它。</p><p>要测试这些处理程序，要重新编译并运行应用程序。我们可以使用 Postman 再次测试。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/yxMJc9YQQgWA9HhbComc_get_tasks_handler.webp" alt=""></p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/fWkK9dmFS8eR6CxZfXCA_put_tasks_handler.webp" alt=""></p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/SGWxvMXS3m4s10NjBMKQ_delete_tasks_handler.webp" alt=""></p><h2 id="MODEL"><a href="#MODEL" class="headerlink" title="MODEL"></a>MODEL</h2><p>现在我们已经有了一部分处理程序，我们的应用程序需要使用数据库。但是我们不是直接从处理程序进行数据库调用，而是通过将数据库逻辑抽象为模型来保持代码的整洁。</p><p>首先让我们在新创建的处理程序文件中引用我们的新模型。</p><p>导入我们即将创建的模型包。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// handlers/tasks.go</span></div><div class="line"><span class="keyword">package</span> handlers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"database/sql"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"strconv"</span></div><div class="line"></div><div class="line">    <span class="string">"go-echo-vue/models"</span></div><div class="line"></div><div class="line">    <span class="string">"github.com/labstack/echo"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>然后将调用添加到我们的处理函数中。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// handlers/tasks.go</span></div><div class="line"></div><div class="line"><span class="comment">// GetTasks endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTasks</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="comment">// Fetch tasks using our new model</span></div><div class="line">        <span class="keyword">return</span> c.JSON(http.StatusOK, models.GetTasks(db))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PutTask endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutTask</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="comment">// Instantiate a new task</span></div><div class="line">        <span class="keyword">var</span> task models.Task</div><div class="line">        <span class="comment">// Map imcoming JSON body to the new Task</span></div><div class="line">        c.Bind(&amp;task)</div><div class="line">        <span class="comment">// Add a task using our new model</span></div><div class="line">        id, err := models.PutTask(db, task.Name)</div><div class="line">        <span class="comment">// Return a JSON response if successful</span></div><div class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span> c.JSON(http.StatusCreated, H&#123;</div><div class="line">                <span class="string">"created"</span>: id,</div><div class="line">            &#125;)</div><div class="line">        <span class="comment">// Handle any errors</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// DeleteTask endpoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteTask</span><span class="params">(db *sql.DB)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        id, _ := strconv.Atoi(c.Param(<span class="string">"id"</span>))</div><div class="line">        <span class="comment">// Use our new model to delete a task</span></div><div class="line">        _, err := models.DeleteTask(db, id)</div><div class="line">        <span class="comment">// Return a JSON response on success</span></div><div class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span> c.JSON(http.StatusOK, H&#123;</div><div class="line">                <span class="string">"deleted"</span>: id,</div><div class="line">            &#125;)</div><div class="line">        <span class="comment">// Handle errors</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在在 “PutTask” 函数中，你会看到 “c.Bind”。 将会在 PUT 请求中发送 JSON 格式的响应内容，并将其映射到 Task 结构。 Task 结构将在我们的模型包中定义。</p><p>这里还需要注意一些错误检查。 Tasks Model 具有根据操作是否成功返回数据或错误的函数。我们的处理程序需要做出相应的处理。</p><p>现在我们可以创建我们的模型。 这是实际与数据库进行交互的。 创建一个名为 “models” 的目录，并在该目录中创建一个名为 “tasks.go” 的文件。</p><p>然后引入需要的包。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/tasks.go</span></div><div class="line"><span class="keyword">package</span> models</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"database/sql"</span></div><div class="line"></div><div class="line">    _ <span class="string">"github.com/mattn/go-sqlite3"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>接下来，我们需要创建一个 Task 类型，包含两个字段 ID 和 Name。 Go 允许使用反引号将元数据添加到变量。在这种情况下，我们只是定义了每个字段在转换为 JSON 后的样子。 “c.Bind” 函数在填充新 Task 时知道在如何映射 JSON 数据。</p><p>另外还需要一个表示 Task 的集合的模型。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/tasks.go</span></div><div class="line"></div><div class="line"><span class="comment">// Task is a struct containing Task data</span></div><div class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</div><div class="line">    ID   <span class="keyword">int</span>    <span class="string">`json:"id"`</span></div><div class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// TaskCollection is collection of Tasks</span></div><div class="line"><span class="keyword">type</span> TaskCollection <span class="keyword">struct</span> &#123;</div><div class="line">    Tasks []Task <span class="string">`json:"items"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取任务只需从数据库中查询所有 Task，将其放到 TaskCollection 并返回。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/tasks.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTasks</span><span class="params">(db *sql.DB)</span> <span class="title">TaskCollection</span></span> &#123;</div><div class="line">    sql := <span class="string">"SELECT * FROM tasks"</span></div><div class="line">    rows, err := db.Query(sql)</div><div class="line">    <span class="comment">// Exit if the SQL doesn't work for some reason</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// make sure to cleanup when the program exits</span></div><div class="line">    <span class="keyword">defer</span> rows.Close()</div><div class="line"></div><div class="line">    result := TaskCollection&#123;&#125;</div><div class="line">    <span class="keyword">for</span> rows.Next() &#123;</div><div class="line">        task := Task&#123;&#125;</div><div class="line">        err2 := rows.Scan(&amp;task.ID, &amp;task.Name)</div><div class="line">        <span class="comment">// Exit if we get an error</span></div><div class="line">        <span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="built_in">panic</span>(err2)</div><div class="line">        &#125;</div><div class="line">        result.Tasks = <span class="built_in">append</span>(result.Tasks, task)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PutTask 将新 Task 插入数据库，并在成功时返回新的ID，并在失败时 panic。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/tasks.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutTask</span><span class="params">(db *sql.DB, name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</div><div class="line">    sql := <span class="string">"INSERT INTO tasks(name) VALUES(?)"</span></div><div class="line"></div><div class="line">    <span class="comment">// Create a prepared SQL statement</span></div><div class="line">    stmt, err := db.Prepare(sql)</div><div class="line">    <span class="comment">// Exit if we get an error</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Make sure to cleanup after the program exits</span></div><div class="line">    <span class="keyword">defer</span> stmt.Close()</div><div class="line"></div><div class="line">    <span class="comment">// Replace the '?' in our prepared statement with 'name'</span></div><div class="line">    result, err2 := stmt.Exec(name)</div><div class="line">    <span class="comment">// Exit if we get an error</span></div><div class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(err2)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result.LastInsertId()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DeleteTask 用来删除 Task。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/tasks.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteTask</span><span class="params">(db *sql.DB, id <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</div><div class="line">    sql := <span class="string">"DELETE FROM tasks WHERE id = ?"</span></div><div class="line"></div><div class="line">    <span class="comment">// Create a prepared SQL statement</span></div><div class="line">    stmt, err := db.Prepare(sql)</div><div class="line">    <span class="comment">// Exit if we get an error</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Replace the '?' in our prepared statement with 'id'</span></div><div class="line">    result, err2 := stmt.Exec(id)</div><div class="line">    <span class="comment">// Exit if we get an error</span></div><div class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="built_in">panic</span>(err2)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result.RowsAffected()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请注意，我们通过 “db.Prepare” 在我们的模型函数中使用准备好的 SQL 语句。有两个原因。首先，一个准备好的语句可以被编译和缓存，所以执行多次更快。 其次，最重要的是准备好的语句可以防止 SQL 注入攻击。</p><p>现在再次使用 Postman 。 首先，我们将检查 “GET /tasks “ 。正常应该看到 Tasks 为空的 JSON。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/50DVGi4aQYqctZ14LzMp_get_tasks_null.png" alt=""></p><p>现在来添加一个 Task 。 在 Postman 中，将 HTTP请求方式切换到 “PUT”，然后单击 “Body” 选项卡。 选中 “raw” 并选择 JSON(application/json) 作为类型。 在文本框中输入以下内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Foobar"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>提交后应该收到 “created” 的响应。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/GCY1n7oAR7Siy2Izn1dE_put_tasks_body.png" alt=""></p><p>记下返回的 id ，因为我们需要它来测试 “DELETE /tasks” 。 就像在前面的例子中一样，将请求方式设置为 “DELETE” 并将 URL 改为 “/tasks/:id” 。 在我们以前的测试中用 “id” 替换 “:id”。 你应该得到一个成功的 “deleted” 消息。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/WYuIfNAaSvKEN00TpwLE_delete_tasks_id.png" alt=""></p><p>现在可以再次请求 “GET /tasks”，正常应该返回 “null”。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>现在来处理我们的前端页面。为了简单起见，将我们的 Javascript 代码写在 HTML 中。标记很简单。 我们需要使用一些库，如 Bootstrap，JQuery，当然还有 VueJS。 用户界面只是一个输入框，一些按钮和任务的列表。 创建一个名为 ‘public’ 的目录，并在该目录内创建一个名为 “index.html” 的文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- public/index.html --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODO App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Latest compiled and minified CSS --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Font Awesome --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JQuery --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Latest compiled and minified JavaScript --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Vue.js --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdnjs.cloudflare.com/ajax/libs/vue/1.0.24/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue-resource/0.7.0/vue-resource.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Tasks<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">v-for</span>=<span class="string">"task in tasks"</span>&gt;</span></div><div class="line">                            &#123;&#123; task.name &#125;&#125;</div><div class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-danger"</span> <span class="attr">v-on:click</span>=<span class="string">"deleteTask($index)"</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-trash-o"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"New Task"</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"createTask"</span> <span class="attr">v-model</span>=<span class="string">"newTask.name"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-on:click</span>=<span class="string">"createTask"</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /input-group --&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>现在重新运行我们的应用程序，然后打开 “<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>“。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/JamFkkfkSaOKBlsqjzBU_todo_ui.png" alt=""></p><p>在最后的 “div” 标签下，将我们的 VueJS 代码放在一个 “script” 标签中。 VueJS 代码稍微复杂一点，但也非常明显。 我们有几个创建和删除任务的方法以及一个在初始化时运行的方法。初始化时获取当前存储在数据库中的所有任务。</p><p>为了与后端进行通信，我们需要使用 HTTP 客户端。在这种情况下，我们将使用 vue-resource。 可以通过引用 “this.$http” 然后使用任何 HTTP 请求方式（get，put等）来使用它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- public/index.html --&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">           <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">               el: <span class="string">'body'</span>,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">               data: &#123;</span></div><div class="line"><span class="undefined">                   tasks: [],</span></div><div class="line"><span class="undefined">                   newTask: &#123;&#125;</span></div><div class="line"><span class="undefined">               &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">         <span class="comment">// This is run whenever the page is loaded to make sure we have a current task list</span></span></div><div class="line"><span class="javascript">               created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">       <span class="comment">// Use the vue-resource $http client to fetch data from the /tasks route</span></span></div><div class="line"><span class="javascript">                   <span class="keyword">this</span>.$http.get(<span class="string">'/tasks'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                       <span class="keyword">this</span>.tasks = response.data.items ? response.data.items : []</span></div><div class="line"><span class="undefined">                   &#125;)</span></div><div class="line"><span class="undefined">               &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">               methods: &#123;</span></div><div class="line"><span class="javascript">                   createTask: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                       <span class="keyword">if</span> (!$.trim(<span class="keyword">this</span>.newTask.name)) &#123;</span></div><div class="line"><span class="javascript">                           <span class="keyword">this</span>.newTask = &#123;&#125;</span></div><div class="line"><span class="javascript">                           <span class="keyword">return</span></span></div><div class="line"><span class="undefined">                       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="comment">// Post the new task to the /tasks route using the $http client</span></span></div><div class="line"><span class="javascript">                       <span class="keyword">this</span>.$http.put(<span class="string">'/tasks'</span>, <span class="keyword">this</span>.newTask).success(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                           <span class="keyword">this</span>.newTask.id = response.created</span></div><div class="line"><span class="javascript">                           <span class="keyword">this</span>.tasks.push(<span class="keyword">this</span>.newTask)</span></div><div class="line"><span class="javascript">                           <span class="built_in">console</span>.log(<span class="string">"Task created!"</span>)</span></div><div class="line"><span class="javascript">                           <span class="built_in">console</span>.log(<span class="keyword">this</span>.newTask)</span></div><div class="line"><span class="javascript">                           <span class="keyword">this</span>.newTask = &#123;&#125;</span></div><div class="line"><span class="javascript">                       &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                           <span class="built_in">console</span>.log(error)</span></div><div class="line"><span class="undefined">                       &#125;);</span></div><div class="line"><span class="undefined">                   &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">                   deleteTask: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// Use the $http client to delete a task by its id</span></span></div><div class="line"><span class="javascript">                       <span class="keyword">this</span>.$http.delete(<span class="string">'/tasks/'</span> + <span class="keyword">this</span>.tasks[index].id).success(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                           <span class="keyword">this</span>.tasks.splice(index, <span class="number">1</span>)</span></div><div class="line"><span class="javascript">                           <span class="built_in">console</span>.log(<span class="string">"Task deleted!"</span>)</span></div><div class="line"><span class="javascript">                       &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                           <span class="built_in">console</span>.log(error)</span></div><div class="line"><span class="undefined">                       &#125;)</span></div><div class="line"><span class="undefined">                   &#125;</span></div><div class="line"><span class="undefined">               &#125;</span></div><div class="line"><span class="undefined">           &#125;)</span></div><div class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>现在我们的应用程序已经完成了。我们需要编译然后运行它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go build todo.go</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./todo</span></div></pre></td></tr></table></figure><p>然后打开 “<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>“。</p><p><img src="/images/create-a-single-page-app-with-go-echo-and-vue/5RyzqEVWTUS6BEmf7eQA_ui_final.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本教程中，我们学习了如何使用 Echo 框架和 VueJS 创建前端页面和简单的 Go 后端应用。 希望这会激起你对 Go 语言的好奇心，并激励你建立更复杂的 Web 应用。</p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://scotch.io/tutorials/create-a-single-page-app-with-go-echo-and-vue" target="_blank" rel="external">Create a Single Page App With Go, Echo and Vue</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程中我们将会创建一个 “todo” 应用。完成后可以实现创建任务，展示新创建的任务和删除它们。&lt;/p&gt;
&lt;p&gt;此程序后端使用 Go 语言。Go 由 Google 开发。虽然不是最流行的语言，但是正在逐步得到认可。Go 非常轻量级，易于学习，运行快。此教程假设你已经对于这
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="vue" scheme="https://www.qichengzx.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Keygen 包简介</title>
    <link href="https://www.qichengzx.com/2018/05/12/generating-random-keys-with-keygen.html"/>
    <id>https://www.qichengzx.com/2018/05/12/generating-random-keys-with-keygen.html</id>
    <published>2018-05-12T13:36:07.000Z</published>
    <updated>2019-01-08T13:15:32.452Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，我们的业务需要生成随机字符串，数字甚至字节，例如：用户ID，API密钥，验证令牌等。自己写生成算法的话比较麻烦，今天正好看到 Keygen 包可以轻松完成这些。</p><p>简单记录一些用法。</p><h3 id="安装-Keygen"><a href="#安装-Keygen" class="headerlink" title="安装 Keygen"></a>安装 Keygen</h3><p>使用 composer 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require gladcodes/keygen</div></pre></td></tr></table></figure><h3 id="生成数字"><a href="#生成数字" class="headerlink" title="生成数字"></a>生成数字</h3><p>数字通常用来作为 ID。可以通过调用 Keygen\Keygen 类的 <code>numeric()</code> 方法生成。它带有一个可选的长度参数，用来指定数字的长度，如果省略或者格式错误，则默认为16。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Keygen</span>\<span class="title">Keygen</span>;</div><div class="line"></div><div class="line">$id_12 = Keygen::numeric(<span class="number">12</span>)-&gt;generate();</div><div class="line">$id_16 = Keygen::numeric()-&gt;generate();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $id_12; <span class="comment">// 011683218639</span></div><div class="line"><span class="keyword">echo</span> $id_16; <span class="comment">// 9352941287643963</span></div></pre></td></tr></table></figure><p>通常情况下，我们不会使用零开头的数字。需要对代码进行细微的修改，以确保在数字的开头没有零。 以下代码片段创建一个自定义函数来包装生成机制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Keygen</span>\<span class="title">Keygen</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateID</span><span class="params">($length = null)</span> </span>&#123;</div><div class="line">    $length = is_int($length) ? $length : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Keygen::numeric($length - <span class="number">1</span>)-&gt;prefix(mt_rand(<span class="number">1</span>, <span class="number">9</span>))-&gt;generate(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$id_12 = generateID(<span class="number">12</span>);</div><div class="line">$id_16 = generateID();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $id_12; <span class="comment">// 473840499215</span></div><div class="line"><span class="keyword">echo</span> $id_16; <span class="comment">// 2684603281019122</span></div></pre></td></tr></table></figure><p>上面的代码使用 <code>prefix()</code> 方法在数字的开头添加一个非零整数。Keygen 软件包还提供了一个 <code>suffix()</code> 方法，用于在生成的密钥末尾添加字符。 有关 Keygen 软件包功能的更多详细信息，例如：Key Affixes 和 Key Transformations，请参阅 Keygen 软件包的 <a href="https://github.com/gladchinda/keygen-php/blob/master/README.md" target="_blank" rel="external">README</a> 文档。</p><h3 id="生成字符串和-Token"><a href="#生成字符串和-Token" class="headerlink" title="生成字符串和 Token"></a>生成字符串和 Token</h3><p>字符串是包含大写字母，小写字母和数字组合的随机字符序列。它可以通过静态调用 <code>Keygen\Keygen</code> 类的 <code>alphanum()</code> 方法生成，其方法与 <code>numeric()</code> 方法非常相似。</p><p>Token 是随机的 base64 编码的字符串。它通常用作应用程序的秘密和 API 密钥。它可以由 <code>Keygen\Keygen</code> 类的 <code>token()</code> 方法生成。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Keygen</span>\<span class="title">Keygen</span>;</div><div class="line"></div><div class="line">$alnum = Keygen::alphanum(<span class="number">15</span>)-&gt;generate();</div><div class="line">$token = Keygen::token(<span class="number">28</span>)-&gt;generate();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $alnum; <span class="comment">// TFd5X74Pr9ZOiG2</span></div><div class="line"><span class="keyword">echo</span> $token; <span class="comment">// 4HE1xQz+4ks0Td128KSO/kBivd79</span></div></pre></td></tr></table></figure><h3 id="生成随机字节"><a href="#生成随机字节" class="headerlink" title="生成随机字节"></a>生成随机字节</h3><p>还通过调用 <code>Keygen\Keygen</code> 类的 <code>bytes()</code> 方法来生成随机字节。</p><p>一般情况下随机字节不是很有用，所以，Keygen 包提供了十六进制（hex）的随机字节的 <code>hex()</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Keygen</span>\<span class="title">Keygen</span>;</div><div class="line"></div><div class="line">$bytes = Keygen::bytes(<span class="number">20</span>)-&gt;generate();</div><div class="line">$hex = Keygen::bytes(<span class="number">20</span>)-&gt;hex()-&gt;generate();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $bytes; <span class="comment">// </span></div><div class="line"><span class="keyword">echo</span> $hex; <span class="comment">// 9f802a80aaf4b5e89e14</span></div></pre></td></tr></table></figure><h3 id="值类型转换"><a href="#值类型转换" class="headerlink" title="值类型转换"></a>值类型转换</h3><p>Keygen 软件包允许在生成密钥之前对密钥做一次或多次转换。转换只是一种可调用的方法，可以将生成的键作为第一个参数并返回一个字符串。 每次转换在生成的密钥上按照它们在返回密钥前指定的顺序执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Keygen</span>\<span class="title">Keygen</span>;</div><div class="line"></div><div class="line">$reference = Keygen::numeric(<span class="number">20</span>)-&gt;generate(<span class="function"><span class="keyword">function</span><span class="params">($key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> join(<span class="string">'-'</span>, str_split($key, <span class="number">4</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$filename = Keygen::bytes()-&gt;suffix(<span class="string">'.png'</span>)-&gt;generate(<span class="keyword">true</span>, [<span class="string">'strrev'</span>, <span class="function"><span class="keyword">function</span><span class="params">($key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> substr(md5($key), mt_rand(<span class="number">0</span>,<span class="number">8</span>), <span class="number">20</span>);</div><div class="line">&#125;], <span class="string">'strtoupper'</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $reference; <span class="comment">// 2129-1489-0676-5152-9337</span></div><div class="line"><span class="keyword">echo</span> $filename; <span class="comment">// 159D702E346F74E3F0B6.png</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有些时候，我们的业务需要生成随机字符串，数字甚至字节，例如：用户ID，API密钥，验证令牌等。自己写生成算法的话比较麻烦，今天正好看到 Keygen 包可以轻松完成这些。&lt;/p&gt;
&lt;p&gt;简单记录一些用法。&lt;/p&gt;
&lt;h3 id=&quot;安装-Keygen&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
      <category term="php" scheme="https://www.qichengzx.com/categories/php/"/>
    
    
      <category term="php" scheme="https://www.qichengzx.com/tags/php/"/>
    
      <category term="Keygen" scheme="https://www.qichengzx.com/tags/Keygen/"/>
    
  </entry>
  
  <entry>
    <title>Git rebase 笔记</title>
    <link href="https://www.qichengzx.com/2018/05/10/git-rebase.html"/>
    <id>https://www.qichengzx.com/2018/05/10/git-rebase.html</id>
    <published>2018-05-10T07:18:29.000Z</published>
    <updated>2019-01-08T13:15:32.453Z</updated>
    
    <content type="html"><![CDATA[<p>Git 合并代码有 merge和 rebase 两种选择，个人观点是，merge 一般用来合并两个分支，而 rebase 一般用来合并 commit。</p><p>最近在给 mattermost 项目提交 PR 的时候被要求 rebase ，操作了几次都不成功，后来仔细看了文档才正确合并，所以又了以下记录。</p><p>如果有4次提交，hash分别是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">commit1 ---&gt; be8ad5c</div><div class="line">commit2 ---&gt; 57939ce</div><div class="line">commit3 ---&gt; 64be23a</div><div class="line">commit4 ---&gt; e0788e4</div></pre></td></tr></table></figure><p>如果想把commit4合并到commit3，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git rebase -i 57939ce</div><div class="line"></div><div class="line"></div><div class="line">pick 64be23a commit 3</div><div class="line">pick e0788e4 commit 4</div></pre></td></tr></table></figure><p>下方会有操作的注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># s, squash = use commit, but meld into previous commit</div></pre></td></tr></table></figure><p>对于想要合并的commit，使用s操作，<br>即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pick 64be23a commit 3</div><div class="line">s e0788e4 commit 4</div></pre></td></tr></table></figure><p>保存后，会进入交互编辑模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># This is a combination of 2 commits.</div><div class="line"># This is the 1st commit message:</div><div class="line"></div><div class="line">commit 3</div><div class="line"></div><div class="line"># This is the commit message #2:</div><div class="line"></div><div class="line">commit 4</div></pre></td></tr></table></figure><p>表示将要合并两个commit，可以修改或不修改commit内容，保存后，两次commit即合并成一个commit了。</p><p>这样，在 git 的提交历史里便没有了 commit 4 这次提交。</p><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="external">Git 分支 - 变基</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 合并代码有 merge和 rebase 两种选择，个人观点是，merge 一般用来合并两个分支，而 rebase 一般用来合并 commit。&lt;/p&gt;
&lt;p&gt;最近在给 mattermost 项目提交 PR 的时候被要求 rebase ，操作了几次都不成功，后来仔细看
      
    
    </summary>
    
      <category term="git" scheme="https://www.qichengzx.com/categories/git/"/>
    
    
      <category term="git" scheme="https://www.qichengzx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Go 递归</title>
    <link href="https://www.qichengzx.com/2018/05/03/go-recursion.html"/>
    <id>https://www.qichengzx.com/2018/05/03/go-recursion.html</id>
    <published>2018-05-03T07:15:41.000Z</published>
    <updated>2019-01-08T13:15:32.457Z</updated>
    
    <content type="html"><![CDATA[<p>递归，就是在运行的过程中调用自己。</p><p>通过以下阶乘函数来看下递归的写法：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(x <span class="keyword">uint</span>)</span> <span class="title">uint</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> x == <span class="number">0</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> x * factorial(x<span class="number">-1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>factorial 函数调用自己，形成函数递归，为了更好地理解这个函数是如何工作的，可以通过 factorial(2) 来理解。</p><ul><li><p>x == 0 ？ 不等于, x = 2</p></li><li><p>计算 x - 1 的阶乘</p><ul><li><p>x == 0 ? 不等于, x = 1</p></li><li><p>计算 x - 1 的阶乘</p><ul><li>x == 0 ? 等于, 返回 1</li></ul></li><li><p>返回 1 * 1</p></li></ul></li><li><p>返回 2 * 1</p></li></ul><p>递归函数通过不断的调用自身完成需求，需要注意的是需要设置退出条件，否则就死循环了。</p><p>递归函数可以非常方便的解决数学上的问题，如阶乘，斐波那契数列等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归，就是在运行的过程中调用自己。&lt;/p&gt;
&lt;p&gt;通过以下阶乘函数来看下递归的写法：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 闭包</title>
    <link href="https://www.qichengzx.com/2018/05/02/go-closure.html"/>
    <id>https://www.qichengzx.com/2018/05/02/go-closure.html</id>
    <published>2018-05-02T02:32:04.000Z</published>
    <updated>2019-01-08T13:15:32.456Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中可以在一个函数里创建另一个函数。如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(add(<span class="number">1</span>,<span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>add 是一个属性为 func(int, int) int (两个 int 类型参数，返回值类型为 int 的函数)的局部变量。这样的局部函数还可以访问其他局部变量。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">x := <span class="number">0</span></div><div class="line">increment := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">x++</div><div class="line"><span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(increment())</div><div class="line">fmt.Println(increment())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>increment 函数为在 main 函数作用域中定义的变量 x 加1。 变量 x 可以被 increment 函数访问和修改。所以以上程序第一行将会输出：1，第二行将会输出：2。</p><p>这样的函数以及它引用的非本地变量称为闭包。 在本示例中，increment 函数和变量 x 形成闭包。</p><p>使用闭包的一种方法是编写一个函数，该函数返回另一个函数 - 当被调用时 - 可以生成一个数字序列。 例如，我们可以生成所有的偶数：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeEvenGenerator</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">uint</span></span> &#123;</div><div class="line">i := <span class="keyword">uint</span>(<span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(ret <span class="keyword">uint</span>)</span></span> &#123;</div><div class="line">ret = i</div><div class="line">i += <span class="number">2</span></div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">nextEven := makeEvenGenerator()</div><div class="line">fmt.Println(nextEven()) <span class="comment">// 0</span></div><div class="line">fmt.Println(nextEven()) <span class="comment">// 2</span></div><div class="line">fmt.Println(nextEven()) <span class="comment">// 4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>makeEvenGenerator 返回一个生成偶数的函数。 每次调用它时，它会将2添加到本地i变量中 - 与正常的局部变量不同，它会在调用之间保持不变。</p><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p><a href="https://www.golang-book.com/books/intro/7#section4" target="_blank" rel="external">Closure</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Go 中可以在一个函数里创建另一个函数。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;li
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 构建参数</title>
    <link href="https://www.qichengzx.com/2018/04/25/dockerfile-build-arg.html"/>
    <id>https://www.qichengzx.com/2018/04/25/dockerfile-build-arg.html</id>
    <published>2018-04-25T07:29:29.000Z</published>
    <updated>2019-01-08T13:15:32.450Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Docker 做服务部署的时候，经常需要在构建的时候区分环境，让程序能够拿到环境变量，或者让程序能够针对不同环境做出不同的处理。</p><p>之前的写法比较原始，在本地打包 Docker 镜像后 push 到服务器，所以就可以在打包的时候修改环境变量的值。虽然只用到了一个区分开发，生产的变量，但是每次都这么做还是比较烦。</p><p>最近重新整理 Dockerfile ， 又看了下文档，发现可以在 docker build 阶段传入参数的。</p><p>如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FROM golang</div><div class="line"></div><div class="line">ARG app_env</div><div class="line"></div><div class="line">ENV APP_ENV $app_env</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure><p>build 时，可以这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t app -f Dockerfile . --build-arg app_env=dev</div></pre></td></tr></table></figure><p>这样就可以在 go 程序里 通过 os.Getenv(“APP_ENV”) 拿到环境变量信息，进行不同处理了。</p><p>参考资料:</p><p><a href="https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/arg.html" target="_blank" rel="external">ARG 构建参数</a></p><p><a href="https://medium.com/statuscode/golang-docker-for-development-and-production-ce3ad4e69673" target="_blank" rel="external">Golang and Docker for development and production</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Docker 做服务部署的时候，经常需要在构建的时候区分环境，让程序能够拿到环境变量，或者让程序能够针对不同环境做出不同的处理。&lt;/p&gt;
&lt;p&gt;之前的写法比较原始，在本地打包 Docker 镜像后 push 到服务器，所以就可以在打包的时候修改环境变量的值。虽然只用到
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="docker" scheme="https://www.qichengzx.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>迁移到 GitHub pages 小记</title>
    <link href="https://www.qichengzx.com/2018/04/22/github-pages.html"/>
    <id>https://www.qichengzx.com/2018/04/22/github-pages.html</id>
    <published>2018-04-22T10:58:49.000Z</published>
    <updated>2019-01-08T13:15:32.455Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github-pages.jpeg" alt=""></p><p>在 Vultr vps 挂了N个月之后，无奈只能选择把这堆东西迁到 GitHub pages 了，看起来是唯一能选的比较不错的选择。虽然很早以前也看过一些迁到 GitHub pages 的教程，但是实施起来还是有些新的收获。</p><p>开始前没注意看文档，其实创建 repo 的时候对于 usrename 的项目，repo 名必须是 username.github.io。</p><p>如果不想使用 username.github.io 作为域名的话，要在 repo-&gt;settings-&gt;GitHub Pages 中，设置一个 Custom domain，然后 Save。</p><p>GitHub 默认是提供了使用 jekyll 作为 GitHub pages 的内容处理程序。而如果并不想使用 jekyll 的话，也可以。比如我就是使用 hexo ，把 generate 的内容作为 git 内容提交了的。</p><p>但是还有一个要注意的是，把静态内容提交到 repo 后，需要过一会才会生效。所以刚提交完时，会返回 404 ，不要着急，过一会就好了。</p><p>另外目前 GitHub 还提供了使用自定义域名时启用 HTTPS 的选项，启用后就会强制使用 HTTPS 打开网站了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/github-pages.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Vultr vps 挂了N个月之后，无奈只能选择把这堆东西迁到 GitHub pages 了，看起来是唯一能选的比较不错的选择。虽然很早以前也看过一些迁到 GitHu
      
    
    </summary>
    
      <category term="git" scheme="https://www.qichengzx.com/categories/git/"/>
    
    
      <category term="github" scheme="https://www.qichengzx.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Nginx HTTP/2 Server Push</title>
    <link href="https://www.qichengzx.com/2018/02/27/nginx-1-13-9-http2-server-push.html"/>
    <id>https://www.qichengzx.com/2018/02/27/nginx-1-13-9-http2-server-push.html</id>
    <published>2018-02-27T11:41:32.000Z</published>
    <updated>2019-01-08T13:15:32.470Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 在最新的 <a href="http://nginx.org/en/download.html" target="_blank" rel="external">1.13.9</a> 版本中，增加了对 HTTP/2 Server Push 的支持，以下就简单介绍下如何使用。</p><p>以下内容主要来自 <a href="https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/" target="_blank" rel="external">Introducing HTTP/2 Server Push with NGINX 1.13.9</a>，进行了简单的整理。</p><h3 id="推送指定资源"><a href="#推送指定资源" class="headerlink" title="推送指定资源"></a>推送指定资源</h3><p>首先，在 Nginx 中进行配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="comment">#开启HTTP/2</span></div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</div><div class="line"></div><div class="line">    <span class="attribute">ssl_certificate</span> ssl/certificate.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> ssl/key.pem;</div><div class="line"></div><div class="line">    <span class="attribute">root</span> /var/www/html;</div><div class="line"></div><div class="line">    <span class="comment"># 当请求 demo.html 时，推送 /style.css, /image1.jpg, /image2.jpg</span></div><div class="line">    <span class="attribute">location</span> = /demo.html &#123;</div><div class="line">        <span class="attribute">http2_push</span> /style.css;</div><div class="line">        <span class="attribute">http2_push</span> /image1.jpg;</div><div class="line">        <span class="attribute">http2_push</span> /image2.jpg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以通过 Chrome Developer Tools 查看效果。在 Network 中，可以看到 demo.html 的请求和推送到客户端的内容。</p><p>如下图所示，可以看到 style.css，image1.jpg，image2.jpg。它们都是 demo.html 请求的一部分。</p><p><img src="/images/http2-server-push-chrome-dev-tools.png" alt=""></p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>以上是在页面加载时推送指定资源的例子，但是很多情况下，并不能指定要推送哪些资源，因此，Nginx 还支持通过 http2_push_preload 指令，自动分析响应头中的 Link header，来自动推送这些资源。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="comment">#开启HTTP/2</span></div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</div><div class="line"></div><div class="line">    <span class="attribute">ssl_certificate</span> ssl/certificate.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> ssl/key.pem;</div><div class="line"></div><div class="line">    <span class="attribute">root</span> /var/www/html;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> = /myapp &#123;</div><div class="line">        <span class="attribute">proxy_pass</span> http://upstream;</div><div class="line">        <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过如上的配置，当 upstream 返回的响应头中包含 Link header 时，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Link: &lt;/style.css&gt;; as=style; rel=preload</div></pre></td></tr></table></figure><p>Nginx 即会开启一个推送， 内容则是 /style.css ，Link header 的路径必须是绝对路径。</p><p>如果想要推送多个资源，可以添加多个 Link header ， 或更直接一些，把所有资源添加到一个 Link header 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Link: &lt;/style.css&gt;; as=style; rel=preload, &lt;/favicon.ico&gt;; as=image; rel=preload</div></pre></td></tr></table></figure><p>如果不想让 Nginx 推送某个资源，为该 header 添加一个 nopush 参数即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Link: &lt;/nginx.png&gt;; as=image; rel=preload; nopush</div></pre></td></tr></table></figure><h3 id="有选择的推送"><a href="#有选择的推送" class="headerlink" title="有选择的推送"></a>有选择的推送</h3><p>由于 HTTP/2 规范并没有解决是否要推送哪些资源的问题，但是比较合理的方式是知道需要推送哪些资源，并且客户端没有缓存过这些资源，才进行推送。</p><p>所以 Nginx 支持了添加条件，只在符合条件时才进行推送</p><p>当客户端请求时包含了 cookie ，Nginx 将只会推送一次资源。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2 default_server;</div><div class="line"></div><div class="line">    <span class="attribute">ssl_certificate</span> ssl/certificate.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> ssl/key.pem;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">root</span> /var/www/html;</div><div class="line">    <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> = /demo.html &#123;</div><div class="line">        <span class="attribute">add_header</span> Set-Cookie <span class="string">"session=1"</span>;</div><div class="line">        <span class="attribute">add_header</span> Link <span class="variable">$resources</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="attribute">map</span> <span class="variable">$http_cookie</span> <span class="variable">$resources</span> &#123;</div><div class="line">    "~*session=1" "";</div><div class="line">    <span class="attribute">default</span> <span class="string">"&lt;/style.css&gt;; as=style; rel=preload, &lt;/image1.jpg&gt;; as=image; rel=preload,</span></div><div class="line"><span class="string">             &lt;/image2.jpg&gt;; as=style; rel=preload"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相关链接:</p><p><a href="https://www.qichengzx.com/2017/07/02/HTTP2-Server-Push.html">在Go中使用 HTTP/2 Server Push</a></p><p>参考资料:</p><p><a href="https://w3c.github.io/preload/#server-push-http-2" target="_blank" rel="external">Server Push (HTTP/2)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx 在最新的 &lt;a href=&quot;http://nginx.org/en/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1.13.9&lt;/a&gt; 版本中，增加了对 HTTP/2 Server Push 的支持，以下就简单介绍下
      
    
    </summary>
    
      <category term="nginx" scheme="https://www.qichengzx.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://www.qichengzx.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Go slice，struct排序</title>
    <link href="https://www.qichengzx.com/2018/02/25/how-to-sort-in-go.html"/>
    <id>https://www.qichengzx.com/2018/02/25/how-to-sort-in-go.html</id>
    <published>2018-02-25T13:40:16.000Z</published>
    <updated>2019-01-08T13:15:32.457Z</updated>
    
    <content type="html"><![CDATA[<p>Go中有时会需要对slice，或多个struct进行排序，其实很简单。</p><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>对于 slice 的排序，可以直接使用 sort 包提供的方法，</p><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s := []<span class="keyword">int</span>&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>&#125;</div><div class="line">sort.Ints(s)</div><div class="line">fmt.Println(s) <span class="comment">// [1,2,3,4]</span></div></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s := []<span class="keyword">string</span>&#123;<span class="string">"Go"</span>, <span class="string">"Bravo"</span>, <span class="string">"Gopher"</span>, <span class="string">"Alpha"</span>, <span class="string">"Grin"</span>, <span class="string">"Delta"</span>&#125;</div><div class="line">sort.Strings(s)</div><div class="line">fmt.Println(s) <span class="comment">// [Alpha Bravo Delta Go Gopher Grin]</span></div></pre></td></tr></table></figure><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s := []<span class="keyword">float64</span>&#123;<span class="number">5.2</span>, <span class="number">-1.3</span>, <span class="number">0.7</span>, <span class="number">-3.8</span>, <span class="number">2.6</span>&#125; </div><div class="line">sort.Float64s(s)</div><div class="line">fmt.Println(s) <span class="comment">// [-3.8,-1.3,0.7,2.6,5.2]</span></div></pre></td></tr></table></figure><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>以上都是 sort 默认提供的方法，但是对于 struct ，就需要自己实现 sort.Interface。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span></div><div class="line">Age <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> byAge []Person</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByAge)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByAge)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i].Age &lt; a[j].Age &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByAge)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; a[i], a[j] = a[j], a[i] &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    family := []Person&#123;</div><div class="line">        &#123;<span class="string">"Alice"</span>, <span class="number">23</span>&#125;,</div><div class="line">        &#123;<span class="string">"Eve"</span>, <span class="number">2</span>&#125;,</div><div class="line">        &#123;<span class="string">"Bob"</span>, <span class="number">25</span>&#125;,</div><div class="line">    &#125;</div><div class="line">    sort.Sort(ByAge(family))</div><div class="line">    fmt.Println(family) <span class="comment">// [&#123;Eve 2&#125; &#123;Alice 23&#125; &#123;Bob 25&#125;]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Go中有时会需要对slice，或多个struct进行排序，其实很简单。&lt;/p&gt;
&lt;h2 id=&quot;slice&quot;&gt;&lt;a href=&quot;#slice&quot; class=&quot;headerlink&quot; title=&quot;slice&quot;&gt;&lt;/a&gt;slice&lt;/h2&gt;&lt;p&gt;对于 slice 的排序，可以
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go struct 转 map 使用自定义标签</title>
    <link href="https://www.qichengzx.com/2018/02/11/go-struct-tag.html"/>
    <id>https://www.qichengzx.com/2018/02/11/go-struct-tag.html</id>
    <published>2018-02-11T13:06:00.000Z</published>
    <updated>2019-01-08T13:15:32.457Z</updated>
    
    <content type="html"><![CDATA[<p>今天工作遇到一个问题，之前将 struct 转 map 的时候，没有注意 field 大小写的问题，具体的说，是没有注意 field name 与实际需要的 name 的区别，其实就是需要自定义转为 map 之后的name，今天发现问题后，看了下引用包的源码，发现是可以<a href="https://godoc.org/github.com/fatih/structs#Struct.Map" target="_blank" rel="external">自定义标签</a>的，就跟 struct 转 JSON 一样。</p><p>代码也很简单，加上 `<code>structs:&quot;name&quot;</code>`  即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"github.com/fatih/structs"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span> <span class="string">`structs:"server_name"`</span></div><div class="line">ID   <span class="keyword">int</span>    <span class="string">`structs:"server_id"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">server := &amp;Server&#123;</div><div class="line">Name: <span class="string">"gopher"</span>,</div><div class="line">ID:   <span class="number">123456</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"struct : %v\n"</span>, server) <span class="comment">//struct : &amp;&#123;gopher 123456&#125;</span></div><div class="line"></div><div class="line">serverMap := structs.Map(server)</div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"map : %v\n"</span>, serverMap) <span class="comment">//map : map[server_name:gopher server_id:123456]</span></div></pre></td></tr></table></figure><p>这样就可以拿到自定义key的map了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天工作遇到一个问题，之前将 struct 转 map 的时候，没有注意 field 大小写的问题，具体的说，是没有注意 field name 与实际需要的 name 的区别，其实就是需要自定义转为 map 之后的name，今天发现问题后，看了下引用包的源码，发现是可以&lt;a
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 检测文件内容类型</title>
    <link href="https://www.qichengzx.com/2018/02/10/get-the-content-type-of-file.html"/>
    <id>https://www.qichengzx.com/2018/02/10/get-the-content-type-of-file.html</id>
    <published>2018-02-10T11:45:26.000Z</published>
    <updated>2019-01-08T13:15:32.452Z</updated>
    
    <content type="html"><![CDATA[<p>有时候需要检测文件的内容类型或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="external">MIME</a> 类型，为此，需要打开文件并读取前512个字节（因为DetectContentType()函数值使用前512个字节），所以不需要读取更多内容。这个函数会返回一个 MIME 类型，如 application/json 或 image/jpeg。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"net/http"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fileArr := []<span class="keyword">string</span>&#123;<span class="string">"file/1.pdf"</span>, <span class="string">"file/2.jpg"</span>, <span class="string">"file/3.docx"</span>, <span class="string">"file/4.xml"</span>, <span class="string">"file/5.azw3"</span>, <span class="string">"file/6.zip"</span>, <span class="string">"file/7.torrent"</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> _, fileName := <span class="keyword">range</span> fileArr &#123;</div><div class="line"></div><div class="line">f, err := os.Open(fileName)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> f.Close()</div><div class="line"></div><div class="line">contentType, err := getFileContentType(f)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Print(fmt.Sprintf(<span class="string">"File Name : %v, Content Type : %s\n"</span>, fileName, contentType))</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFileContentType</span><span class="params">(out *os.File)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">512</span>)</div><div class="line"></div><div class="line">_, err := out.Read(buffer)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">&#125;</div><div class="line"></div><div class="line">contentType := http.DetectContentType(buffer)</div><div class="line"></div><div class="line"><span class="keyword">return</span> contentType, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候需要检测文件的内容类型或 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIME
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Docker多阶段构建</title>
    <link href="https://www.qichengzx.com/2017/11/27/multi-stage-builds-in-docker.html"/>
    <id>https://www.qichengzx.com/2017/11/27/multi-stage-builds-in-docker.html</id>
    <published>2017-11-27T12:38:41.000Z</published>
    <updated>2019-01-08T13:15:32.469Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/docker_twitter_share.png" alt=""></p><p>Docker在<a href="https://github.com/moby/moby/releases/tag/v17.05.0-ce" target="_blank" rel="external">17.05</a>引入了<a href="https://docs.docker.com/engine/userguide/eng-image/multistage-build/" target="_blank" rel="external">多阶段构建</a>的功能，就是将之前需要多次运行build的Dockerfile，现在可以写到一个里面，只build一次，就可以达到同样的效果。</p><p>另外，实际应用中，还可以通过这样，非常简单的将最后可执行文件放入极小的镜像中使用。</p><p>比如之前说过的，做一个Beego的Docker镜像，如果使用官方的镜像运行，占用空间稍微有点大了，虽然比起Ubuntu，CentOS动辄5-600M还好一些，但是再跟只有10几M，甚至几M的相比，还是太大了。</p><p>下面通过一个Dockerfile来了解一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">指定构建镜像</span></div><div class="line">FROM golang:1.9.2 as builder</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">指定工作目录</span></div><div class="line">WORKDIR /go/src/app</div><div class="line"><span class="meta">#</span><span class="bash">将当前项目文件copy到够姜镜像的工作目录中</span></div><div class="line">COPY . .</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">在构建镜像中执行go build，这里指定了构建的目标平台，具体的构建命令针对具体情况修改即可</span></div><div class="line"><span class="meta">#</span><span class="bash">也可简单的 go build 即可</span></div><div class="line"><span class="meta">#</span><span class="bash">另外需要注意依赖包的问题</span></div><div class="line">RUN CGO_ENABLED=0 GOOS=linux go build -x -v -ldflags '-w -s' -a -o app .</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">使用alpine作为运行的镜像</span></div><div class="line">FROM alpine:latest</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">指定工作目录</span></div><div class="line">WORKDIR /go/src/app</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">如果程序中涉及到需要连接DB，并且需要指定时区，需要copy时区文件，为了省事，直接从构建镜像中复制了，可以正常使用</span></div><div class="line">COPY --from=builder /usr/local/go/lib/time/zoneinfo.zip /usr/local/go/lib/time/zoneinfo.zip</div><div class="line"><span class="meta">#</span><span class="bash">将构建镜像中build完成的可执行文件copy到工作目录</span></div><div class="line">COPY --from=builder /go/src/app/app ./app</div><div class="line"></div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line">CMD ["./app"]</div></pre></td></tr></table></figure><p>以上就是使用多阶段构建的Dockerfile了，非常明了，只需要docker build就可以了。</p><p>然而目前公司的测试环境还没升级到17.05，并不能使用此功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/docker_twitter_share.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Docker在&lt;a href=&quot;https://github.com/moby/moby/releases/tag/v17.05.0-ce&quot; target=
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="docker" scheme="https://www.qichengzx.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Go语言使用redigo操作GEO(3) - 获取范围集合</title>
    <link href="https://www.qichengzx.com/2017/09/24/redis-geo-with-redigo-in-golang-part-3.html"/>
    <id>https://www.qichengzx.com/2017/09/24/redis-geo-with-redigo-in-golang-part-3.html</id>
    <published>2017-09-24T10:09:18.000Z</published>
    <updated>2019-01-08T13:15:32.473Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/09/17/redis-geo-with-redigo-in-golang-part-2.html">上一篇</a>记录了使用redigo操作Redis的获取两点距离的功能。</p><p>今天继续来写一下，获取一个坐标点指定距离范围内地理位置的集合。</p><p>完成此功能，需要使用Redis的 GEORADIUS 命令。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GEORADIUS key longitude latitude radius [m|km|ft|mi] [WITHCOORD] [WITHDIST] [ASC|DESC] [WITHHASH] [COUNT count]</div></pre></td></tr></table></figure><p>其中，longitude latitude 表示地理位置的坐标，radius表示范围的距离，单位可以是m，km，ft，mi，依次为米，千米，英里，英尺。</p><p>后边的可选参数中：</p><ul><li>WITHCOORD：传入WITHCOORD参数，返回结果会带上匹配位置的经纬度。</li><li>WITHDIST：传入WITHDIST参数，返回结果会带上匹配位置与给定地理位置的距离，距离的单位与 GEORADIUS 命令传入的单位一致。</li><li>ASC|DESC：默认结果是未排序的，ASC表示从近到远排序，DESC表示从远到近排序。</li><li>WITHHASH：传入WITHHASH参数，返回结果会带上匹配位置的hash值。hash为52位有符号整数。</li><li>COUNT count：传入COUNT参数，返回指定数量的结果。</li></ul><p>参照文档，可以发现，默认情况下 GEORADIUS 会返回全部匹配的元素，而传入 COUNT 参数会截取指定的部分元素返回，但是由于此命令还需要对返回结果进行排序，所以如果元素较多的情况下，即使使用了 COUNT 参数，查找速度也会很慢。所以此参数仅适用于减小带宽占用，一次性返回少数数据，多次查询。</p><p>GEORADIUS 的返回值是一个数组:</p><ul><li>如果传入了WITHCOORD，WITHDIST，WITHHASH参数，会返回二维的数组，其中每个子数组表示一个元素</li><li>如果没有传入上述参数，会返回一个一维的数组，值为元素名，如[“tianjin”,”baoding”]</li></ul><p>如果返回的是二维数组，子数组的第一个元素是对应位置的名字，其他的会根据传入的参数当做数组的元素返回，其中：</p><ul><li>距离依然是一个双精度浮点数，单位与传入的单位参数一致。</li><li>GEOHASH 是一个整数。</li><li>坐标分别为经度，纬度，其中经度在前。</li></ul><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GEORADIUS citylist 116.280316 39.9329 200 km WITHCOORD</div></pre></td></tr></table></figure><p>会返回</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1) 1) "beijing"</div><div class="line">   2) 1) "116.40528291463851929"</div><div class="line">      2) "39.9049884229125027"</div><div class="line">2) 1) "baoding"</div><div class="line">   2) 1) "115.33530682325363159"</div><div class="line">      2) "38.87121760640306434"</div><div class="line">3) 1) "tangshan"</div><div class="line">   2) 1) "116.94219142198562622"</div><div class="line">      2) "39.05078232277295314"</div><div class="line">4) 1) "tianjin"</div><div class="line">   2) 1) "117.0153459906578064"</div><div class="line">      2) "39.12522961794389431"</div></pre></td></tr></table></figure><p>那么，使用redigo如何实现呢？</p><h4 id="有WITHCOORD，WITHDIST，WITHHASH参数"><a href="#有WITHCOORD，WITHDIST，WITHHASH参数" class="headerlink" title="有WITHCOORD，WITHDIST，WITHHASH参数"></a>有WITHCOORD，WITHDIST，WITHHASH参数</h4><p>暂时还没想到怎么解决这个比较好。</p><h4 id="无WITHCOORD，WITHDIST，WITHHASH参数"><a href="#无WITHCOORD，WITHDIST，WITHHASH参数" class="headerlink" title="无WITHCOORD，WITHDIST，WITHHASH参数"></a>无WITHCOORD，WITHDIST，WITHHASH参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">radius</span><span class="params">(key <span class="keyword">string</span>, lng, lat <span class="keyword">float64</span>, radius <span class="keyword">int</span>, unit <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</div><div class="line">rc := RedisClient.Get()</div><div class="line"><span class="keyword">defer</span> rc.Close()</div><div class="line"></div><div class="line">pos, _ := redis.Strings(rc.Do(<span class="string">"GEORADIUS"</span>, key, lng, lat, radius, unit))</div><div class="line"><span class="keyword">return</span> pos</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该方法则会返回符合条件的元素的名称，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[beijing baoding tangshan tianjin]</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/2017/09/17/redis-geo-with-redigo-in-golang-part-2.html&quot;&gt;上一篇&lt;/a&gt;记录了使用redigo操作Redis的获取两点距离的功能。&lt;/p&gt;
&lt;p&gt;今天继续来写一下，获取一个坐标点指定距离范围内地理位置
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="redis" scheme="https://www.qichengzx.com/tags/redis/"/>
    
      <category term="redigo" scheme="https://www.qichengzx.com/tags/redigo/"/>
    
      <category term="geo" scheme="https://www.qichengzx.com/tags/geo/"/>
    
  </entry>
  
  <entry>
    <title>Go语言使用redigo操作GEO(2) - 获取两点距离</title>
    <link href="https://www.qichengzx.com/2017/09/23/redis-geo-with-redigo-in-golang-part-2.html"/>
    <id>https://www.qichengzx.com/2017/09/23/redis-geo-with-redigo-in-golang-part-2.html</id>
    <published>2017-09-23T10:22:01.000Z</published>
    <updated>2019-01-08T13:15:32.473Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/09/17/redis-geo-with-redigo-in-golang-part-1.html">上一篇</a>简单记录了在Go中使用redigo这个包操作Redis，简单的使用了添加和查询。</p><p>今天来试一下计算距离。之前也写到过在<a href="/2017/06/27/order-by-distance-in-mysql.html">MySQL中计算坐标的距离，及排序</a>。</p><p>在上一篇中疏忽了一个问题，使用的几个坐标点是用高德地图获取到的，但是Redis中GEO是使用了 WGS84 坐标系的。实际使用中需要注意一下，这里有一篇文章详细介绍了不同坐标系的区别。</p><h4 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h4><p>先添加几条测试用的数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">push(<span class="string">"citylist"</span>, <span class="string">"tianjin"</span>, <span class="number">39.1252291</span>, <span class="number">117.0153461</span>)</div><div class="line">push(<span class="string">"citylist"</span>, <span class="string">"tangshan"</span>, <span class="number">39.0507819</span>, <span class="number">116.9421939</span>)</div><div class="line">push(<span class="string">"citylist"</span>, <span class="string">"baoding"</span>, <span class="number">38.8712164</span>, <span class="number">115.3353061</span>)</div></pre></td></tr></table></figure><p>添加了三个城市。</p><h4 id="查询距离"><a href="#查询距离" class="headerlink" title="查询距离"></a>查询距离</h4><p>使用GEODIST方法查询两点的距离。手册<a href="http://redisdoc.com/geo/geodist.html" target="_blank" rel="external">见此</a>。</p><p>语法： GEODIST key member1 member2 [unit]</p><p>第四个参数可选,可选值为：</p><ul><li>m 表示单位为米。</li><li>km 表示单位为千米。</li><li>mi 表示单位为英里。</li><li>ft 表示单位为英尺。</li></ul><p>默认是米。</p><p>简单写一个方法，传入key和要查询的两点，及距离单位。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dist</span><span class="params">(key, m1, m2, unit <span class="keyword">string</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">rc := RedisClient.Get()</div><div class="line"><span class="keyword">defer</span> rc.Close()</div><div class="line"></div><div class="line">rs1, _ := redis.Float64(rc.Do(<span class="string">"GEODIST"</span>, key, m1, m2, unit))</div><div class="line"></div><div class="line"><span class="keyword">return</span> rs</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>GEODIST返回值是双精度浮点数，这里直接使用redigo包的Float64方法转换返回了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rs1 := dist(<span class="string">"citylist"</span>, <span class="string">"beijing"</span>, <span class="string">"tianjin"</span>, <span class="string">"km"</span>)</div><div class="line">rs2 := dist(<span class="string">"citylist"</span>, <span class="string">"beijing"</span>, <span class="string">"tangshan"</span>, <span class="string">"km"</span>)</div><div class="line">rs3 := dist(<span class="string">"citylist"</span>, <span class="string">"beijing"</span>, <span class="string">"baoding"</span>, <span class="string">"km"</span>)</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"北京-天津"</span>, rs1)</div><div class="line">fmt.Println(<span class="string">"北京-唐山"</span>, rs2)</div><div class="line">fmt.Println(<span class="string">"北京-保定"</span>, rs3)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/2017/09/17/redis-geo-with-redigo-in-golang-part-1.html&quot;&gt;上一篇&lt;/a&gt;简单记录了在Go中使用redigo这个包操作Redis，简单的使用了添加和查询。&lt;/p&gt;
&lt;p&gt;今天来试一下计算距离。之前也写到
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="redis" scheme="https://www.qichengzx.com/tags/redis/"/>
    
      <category term="redigo" scheme="https://www.qichengzx.com/tags/redigo/"/>
    
      <category term="geo" scheme="https://www.qichengzx.com/tags/geo/"/>
    
  </entry>
  
  <entry>
    <title>Go语言使用redigo操作GEO(1) - 添加和查询</title>
    <link href="https://www.qichengzx.com/2017/09/17/redis-geo-with-redigo-in-golang-part-1.html"/>
    <id>https://www.qichengzx.com/2017/09/17/redis-geo-with-redigo-in-golang-part-1.html</id>
    <published>2017-09-17T11:45:29.000Z</published>
    <updated>2019-01-08T13:15:32.473Z</updated>
    
    <content type="html"><![CDATA[<p>周五的时候群里有人遇到在Go中使用Redis GEO的问题，顺手搜了下解决办法。发现还挺简单的，周末无事，写下来记一下。</p><p>GEO是在Redis 3.2加入的功能，手册<a href="http://redisdoc.com/geo/index.html" target="_blank" rel="external">见此</a></p><p>本示例中只演示GEOADD和GEOPOS功能。</p><p><a href="https://github.com/garyburd/redigo/tree/master/redis" target="_blank" rel="external">redigo</a>这个客户端还挺好用的，但是个人觉得略有不足的是文档不全（指的是中文的文档），但是好在可以看源码解决一些不太清楚的问题。</p><h4 id="0-连接Redis"><a href="#0-连接Redis" class="headerlink" title="0.连接Redis"></a>0.连接Redis</h4><p>首先习惯性的创建了连接池，嗯，连接池。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">RedisClient = &amp;redis.Pool&#123;</div><div class="line">MaxIdle:   MaxIdle,</div><div class="line">MaxActive: MaxActive,</div><div class="line"></div><div class="line">IdleTimeout: <span class="number">60</span> * time.Second,</div><div class="line"></div><div class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(redis.Conn, error)</span></span> &#123;</div><div class="line">c, err := redis.Dial(<span class="string">"tcp"</span>, RedisHost)</div><div class="line"></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*if _, err := c.Do("AUTH", RedisPwd); err != nil &#123;</span></div><div class="line"><span class="comment">c.Close()</span></div><div class="line"><span class="comment">return nil, err</span></div><div class="line"><span class="comment">&#125;*/</span></div><div class="line">c.Do(<span class="string">"SELECT"</span>, RedisDb)</div><div class="line"></div><div class="line"><span class="keyword">return</span> c, <span class="literal">nil</span></div><div class="line">&#125;,</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="1-添加值"><a href="#1-添加值" class="headerlink" title="1.添加值"></a>1.添加值</h4><p>为了简单起见，创建了一个方法用于向传入的key中写入name的坐标点。</p><p>直接返回错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(key, name <span class="keyword">string</span>, lat, lng <span class="keyword">float64</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">rc := RedisClient.Get()</div><div class="line"><span class="keyword">defer</span> rc.Close()</div><div class="line"></div><div class="line">_, err := rc.Do(<span class="string">"GEOADD"</span>, key, lng, lat, name)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-取回值"><a href="#2-取回值" class="headerlink" title="2.取回值"></a>2.取回值</h4><p>同样，创建一个方法，在Redis中取回key中name的坐标点的值。</p><p>但是注意，这里在执行完 <code>GEOPOS</code> 后，调用 redigo 包中的 <code>Positions</code> 方法把返回结果转成 <code>float64</code> 的数组。</p><p>然后返回这个数组和错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(key, name <span class="keyword">string</span>)</span> <span class="params">([]*[2]<span class="keyword">float64</span>, error)</span></span> &#123;</div><div class="line">rc := RedisClient.Get()</div><div class="line"><span class="keyword">defer</span> rc.Close()</div><div class="line"></div><div class="line">res, err := redis.Positions(rc.Do(<span class="string">"GEOPOS"</span>, key, name))</div><div class="line"></div><div class="line"><span class="keyword">return</span> res, err</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-main方法中的简单代码"><a href="#3-main方法中的简单代码" class="headerlink" title="3.main方法中的简单代码"></a>3.main方法中的简单代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">key := <span class="string">"citylist"</span></div><div class="line">name := <span class="string">"beijing"</span></div><div class="line">lat := <span class="number">39.9329</span></div><div class="line">lng := <span class="number">116.280316</span></div><div class="line">err := push(key, name, lat, lng)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"坐标写入完成"</span>)</div><div class="line">fmt.Println(<span class="string">"获取刚刚写入的值"</span>)</div><div class="line"></div><div class="line">res, err := get(key, name)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line">fmt.Println(res[<span class="number">0</span>][<span class="number">0</span>], res[<span class="number">0</span>][<span class="number">1</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就这么简单。</p><p>import部分和定义的几个全局变量就不用写了，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周五的时候群里有人遇到在Go中使用Redis GEO的问题，顺手搜了下解决办法。发现还挺简单的，周末无事，写下来记一下。&lt;/p&gt;
&lt;p&gt;GEO是在Redis 3.2加入的功能，手册&lt;a href=&quot;http://redisdoc.com/geo/index.html&quot; ta
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="redis" scheme="https://www.qichengzx.com/tags/redis/"/>
    
      <category term="redigo" scheme="https://www.qichengzx.com/tags/redigo/"/>
    
      <category term="geo" scheme="https://www.qichengzx.com/tags/geo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 561.Array Partition I(数组分区 1) - Go实现</title>
    <link href="https://www.qichengzx.com/2017/08/13/leetcode-array-partition-i.html"/>
    <id>https://www.qichengzx.com/2017/08/13/leetcode-array-partition-i.html</id>
    <published>2017-08-13T02:14:49.000Z</published>
    <updated>2019-01-08T13:15:32.469Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="https://leetcode.com/problems/array-partition-i/description/" target="_blank" rel="external">561. Array Partition I</a></p><p>题目描述：</p><p>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p><h6 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: [1,4,3,2]</div><div class="line"></div><div class="line">Output: 4</div><div class="line"></div><div class="line">Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</div></pre></td></tr></table></figure><h6 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h6><p>​    n is a positive integer, which is in the range of [1, 10000].<br>​    All the integers in the array will be in the range of [-10000, 10000].</p><p>题目大意：</p><p>给定一个长度为2n的数组，要把它分成n个分组，即每组有两个数，返回每组中最小值的总和，使和最大。</p><p>理解了大意就知道思路了，又看了下论坛里的<a href="https://discuss.leetcode.com/topic/87206/java-solution-sorting-and-rough-proof-of-algorithm" target="_blank" rel="external">算法分析</a></p><p>解决方案基本就是先按从小到大排序，这样相邻的数字是最接近的，然后再分成两两一组，取每组中的第一个数相加即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sort"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>&#125;</div><div class="line">n := arrayPairSum(nums)</div><div class="line">fmt.Println(n)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayPairSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">sort.Ints(nums)</div><div class="line">sum := <span class="number">0</span></div><div class="line">length := <span class="built_in">len</span>(nums)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i += <span class="number">2</span> &#123;</div><div class="line">sum += nums[i]</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> sum</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在线查看结果:<a href="https://play.golang.org/p/2tkZyayXUB" target="_blank" rel="external">The Go Playground</a></p><p>其实这里主要用到了Go的<a href="https://golang.org/pkg/sort/#Ints" target="_blank" rel="external">sort包给int数组排序</a>。排序后遍历数组，每次递增2就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址:&lt;a href=&quot;https://leetcode.com/problems/array-partition-i/description/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;561. Array Partition I&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
      <category term="leetcode" scheme="https://www.qichengzx.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用Go和Angular通过WebSocket构建实时聊天应用</title>
    <link href="https://www.qichengzx.com/2017/07/15/create-real-time-chat-app-golang-angular-2-websockets.html"/>
    <id>https://www.qichengzx.com/2017/07/15/create-real-time-chat-app-golang-angular-2-websockets.html</id>
    <published>2017-07-15T04:11:14.000Z</published>
    <updated>2019-01-08T13:15:32.449Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文<a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/" target="_blank" rel="external">原文</a>，详细讲解了如何使用Go和Angular通过WebSocket构建实时聊天应用。</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>我最近听到很多关于WebSocket的东西，以及WebSocket如何在应用程序和服务器之间实现实时通信。WebSocket作为RESTful API的替代和补充，已经存在了很长时间。使用WebSocket可以做例如实时聊天，与IoT通信，游戏，和其他很多需要在客户端和服务器之间进行即时消息传递的东西。</p><p>最近一段时间，我<a href="https://www.thepolyglotdeveloper.com/2016/01/create-a-real-time-chat-application-with-the-cean-stack-and-socket-io/" target="_blank" rel="external">使用了一个叫Socket.io的库，用来在Node.js中使用websockets</a>，但是当我真正使用Go以后，我打算研究一下如何在Go中使用WebSocket。</p><p>通过本文，我们将学习如何创建一个聊天应用，其中客户端是一个 Angular 2 应用，服务端使用Go。</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>在这个应用中有很多操作，所以有一些必要的前提条件，如下所示：</p><ul><li><a href="https://golang.org/" target="_blank" rel="external">Go</a> 1.7+</li><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 4.0+</li><li><a href="https://cli.angular.io/" target="_blank" rel="external">Angular2 CLI</a></li></ul><p>处理所有消息和客户端的聊天服务器使用Go编写。客户端前端使用 Angular 2编写，has a dependency of the Node Package Manager (NPM) which ships with Node.js.</p><h4 id="创建Go聊天服务器"><a href="#创建Go聊天服务器" class="headerlink" title="创建Go聊天服务器"></a>创建Go聊天服务器</h4><p>我们打算先开发整个应用的服务器端部分，它需要依赖几个第三方的包。</p><p>在命令行执行以下命令，下载第三方包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Install Go Dependencies</span></div><div class="line"><span class="keyword">go</span> get github.com/gorilla/websocket</div><div class="line"><span class="keyword">go</span> get github.com/satori/<span class="keyword">go</span>.uuid</div></pre></td></tr></table></figure><p>websocket包的作者同时也是 <a href="https://github.com/gorilla/mux" target="_blank" rel="external">Mux</a> 这个路由包 的作者，我们还需要一个UUID包来分配每一个客户端的唯一ID。</p><p>在 $GOPATH 目录创建一个新的项目，我自己的项目目录是 $GOPATH/src/github.com/nraboy/realtime-chat/main.go。</p><p>在进行下一步之前，需要注意的是，我从 <a href="https://dinosaurscode.xyz/go/2016/07/17/go-websockets-tutorial/" target="_blank" rel="external">Dinosaurs Code</a> 和 <a href="https://github.com/gorilla/websocket/tree/master/examples/chat" target="_blank" rel="external">Gorilla websocket chat example</a>  获取了一部分Go 代码，为了避免剽窃的嫌疑，我使用了很多原始代码中的一部分，但我也为这个项目加入了很多自己的独特的东西。</p><p>这次我们要做的聊天应用有3个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// $GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="keyword">type</span> ClientManager <span class="keyword">struct</span> &#123;</div><div class="line">    clients    <span class="keyword">map</span>[*Client]<span class="keyword">bool</span></div><div class="line">    broadcast  <span class="keyword">chan</span> []<span class="keyword">byte</span></div><div class="line">    register   <span class="keyword">chan</span> *Client</div><div class="line">    unregister <span class="keyword">chan</span> *Client</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</div><div class="line">    id     <span class="keyword">string</span></div><div class="line">    socket *websocket.Conn</div><div class="line">    send   <span class="keyword">chan</span> []<span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</div><div class="line">    Sender    <span class="keyword">string</span> <span class="string">`json:"sender,omitempty"`</span></div><div class="line">    Recipient <span class="keyword">string</span> <span class="string">`json:"recipient,omitempty"`</span></div><div class="line">    Content   <span class="keyword">string</span> <span class="string">`json:"content,omitempty"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ClientManager用于管理所有已连接的客户端，尝试连接的客户端，已经断开连接等待删除的客户端，和所有已连接客户端收发的消息。</p><p>每个客户端有一个唯一的ID，一个socket连接，和等待发送的消息。</p><p>为了增加传递的数据的复杂性，消息将使用 JSON 格式。而不是传递一串不容易被理解，阅读的数据。使用JSON格式，我们可以使用元数据和其他有用的东西。每一条消息将包含发送消息的客户端，接收消息的客户端，和消息的实际内容。</p><p>首先定义一个全局的ClientManager。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="keyword">var</span> manager = ClientManager&#123;</div><div class="line">    broadcast:  <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>),</div><div class="line">    register:   <span class="built_in">make</span>(<span class="keyword">chan</span> *Client),</div><div class="line">    unregister: <span class="built_in">make</span>(<span class="keyword">chan</span> *Client),</div><div class="line">    clients:    <span class="built_in">make</span>(<span class="keyword">map</span>[*Client]<span class="keyword">bool</span>),</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务器端将使用3个goroutine，一个用于管理客户端，一个用于读取websocket数据，另一个用于往websocket里写数据。这里指的是读取和写入的goroutine将为每个连接的客户端创建一个新的实例。所有的goroutine将循环运行直至不再需要。</p><p>编写如下代码，来开始服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manager *ClientManager)</span> <span class="title">start</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">select</span> &#123;</div><div class="line">        <span class="keyword">case</span> conn := &lt;-manager.register:</div><div class="line">        manager.clients[conn] = <span class="literal">true</span></div><div class="line">        jsonMessage, _ := json.Marshal(&amp;Message&#123;Content: <span class="string">"/A new socket has connected."</span>&#125;)</div><div class="line">            manager.send(jsonMessage, conn)</div><div class="line">        <span class="keyword">case</span> conn := &lt;-manager.unregister:</div><div class="line">            <span class="keyword">if</span> _, ok := manager.clients[conn]; ok &#123;</div><div class="line">                <span class="built_in">close</span>(conn.send)</div><div class="line">                <span class="built_in">delete</span>(manager.clients, conn)</div><div class="line">                jsonMessage, _ := json.Marshal(&amp;Message&#123;Content: <span class="string">"/A socket has disconnected."</span>&#125;)</div><div class="line">                manager.send(jsonMessage, conn)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">case</span> message := &lt;-manager.broadcast:</div><div class="line">            <span class="keyword">for</span> conn := <span class="keyword">range</span> manager.clients &#123;</div><div class="line">                <span class="keyword">select</span> &#123;</div><div class="line">                <span class="keyword">case</span> conn.send &lt;- message:</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="built_in">close</span>(conn.send)</div><div class="line">                    <span class="built_in">delete</span>(manager.clients, conn)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>每当 manager.register 接收到数据，这个正在建立连接的客户端将会被添加到 manager (前文创建的 ClientManager 实例)的 clients 中。然后，将向所有其他客户端发送一条JSON消息。</p><p>同时，如果客户端断开连接，manager.unregister channel将会收到消息，断开连接的客户端的 channel 中的数据将被关闭，客户端也会从manager中删除。然后发送消息给其他的客户端告知某个客户端已断开连接。</p><p>如果 manager.broadcast channel 中存在数据，则表示正在尝试发送和接收消息。我们打算遍历每个已连接的客户端，将消息发送给它们。如果由于某些原因，channel 被阻塞或消息无法发送，我们会认为这个客户端已断开连接，然后将其删除。</p><p>为了使代码简洁，创建一个 manager.send 方法遍历每个客户端。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manager *ClientManager)</span> <span class="title">send</span><span class="params">(message []<span class="keyword">byte</span>, ignore *Client)</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> conn := <span class="keyword">range</span> manager.clients &#123;</div><div class="line">        <span class="keyword">if</span> conn != ignore &#123;</div><div class="line">            conn.send &lt;- message</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至于conn.send如何发送数据，会在后面探讨。</p><p>现在我们可以探索 goroutine 如何读取客户端发送的 websocket 数据。这个 goroutine 的关键是读取 socket 数据，并将数据添加到 manager.boradcast 做进一步处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">read</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        manager.unregister &lt;- c</div><div class="line">        c.socket.Close()</div><div class="line">    &#125;()</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        _, message, err := c.socket.ReadMessage()</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            manager.unregister &lt;- c</div><div class="line">            c.socket.Close()</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        jsonMessage, _ := json.Marshal(&amp;Message&#123;Sender: c.id, Content: <span class="keyword">string</span>(message)&#125;)</div><div class="line">        manager.broadcast &lt;- jsonMessage</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果读取 websocket 数据出错，可能意味着客户端已经断开连接。如果是这样，我们需要从服务器中注销这个客户端。</p><p>还记得前边的 conn.send 吗，它用来在第三个 goroutine 中写数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">write</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        c.socket.Close()</div><div class="line">    &#125;()</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">select</span> &#123;</div><div class="line">        <span class="keyword">case</span> message, ok := &lt;-c.send:</div><div class="line">            <span class="keyword">if</span> !ok &#123;</div><div class="line">                c.socket.WriteMessage(websocket.CloseMessage, []<span class="keyword">byte</span>&#123;&#125;)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            c.socket.WriteMessage(websocket.TextMessage, message)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果 c.send channel有数据，我们将尝试发送这些数据。如果由于某些原因，channel 运行不正常，我们将向客户端发送断开连接的消息。</p><p>那么，如何启动这些 goroutine 呢，当我们启动服务器时，服务器 goroutine 将会启动，当有客户端连接时，其他 goroutine 将会启动。</p><p>main方法中的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.goGo</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"Starting application..."</span>)</div><div class="line">    <span class="keyword">go</span> manager.start()</div><div class="line">    http.HandleFunc(<span class="string">"/ws"</span>, wsPage)</div><div class="line">    http.ListenAndServe(<span class="string">":12345"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们在12345端口启动服务器，通过 websocket 连接访问。名为 wsPage 的方法如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$GOPATH/src/github.com/nraboy/realtime-chat/main.goGo</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">wsPage</span><span class="params">(res http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class="line">    conn, error := (&amp;websocket.Upgrader&#123;CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;&#125;).Upgrade(res, req, <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</div><div class="line">        http.NotFound(res, req)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    client := &amp;Client&#123;id: uuid.NewV4().String(), socket: conn, send: <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>)&#125;</div><div class="line"> </div><div class="line">    manager.register &lt;- client</div><div class="line"> </div><div class="line">    <span class="keyword">go</span> client.read()</div><div class="line">    <span class="keyword">go</span> client.write()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过使用 websocket 包将HTTP请求升级到websocket请求。通过添加 CheckOrigin ，我们可以接受来自外部域的请求，从而消除跨域资源共享（CORS）的错误。</p><p>创建连接后，将创建一个客户端，并分配唯一的ID。如前所述，该客户端已经注册到服务器。客户端注册后，读写 goroutine 将被触发。</p><p>此时，我们可以通过如下命令启动应用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Run Go Application</div><div class="line">go run *.go</div></pre></td></tr></table></figure><p>你不能在直接 web 浏览器中测试，但是可以建立一个 websocket 连接到 ws://localhost:12345/ws。</p><h4 id="创建Angular2-聊天客户端"><a href="#创建Angular2-聊天客户端" class="headerlink" title="创建Angular2 聊天客户端"></a>创建Angular2 聊天客户端</h4><p>现在我们需要创建一个客户端的应用，客户端可以发送和接收消息。假设您已经安装了<a href="https://cli.angular.io/" target="_blank" rel="external">Angular 2 CLI</a>，请执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Create New Angular 2 Project</div><div class="line">ng new SocketExample</div></pre></td></tr></table></figure><p>执行完将会生成一个单页应用，而我们想要完成的内容，是下方的动图演示的这样。</p><p><img src="/images/go/golang-angular2-chat.gif" alt=""></p><p>补充：此处需cd SocketExmapl &amp;&amp; npm install。</p><p>JavaScript的 websocket 在Angular 2提供的一个类中。使用 Angular 2 CLI，通过执行如下操作创建provider。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Create Angular 2 Provider</div><div class="line">ng g service socket</div></pre></td></tr></table></figure><p>上述命令会在您的项目中创建 <strong>src/app/socket.service.ts </strong> 和 <strong>src/app/socket.service.spec.ts</strong> 。spec文件用于单元测试，不在本文讨论范围内。打开 <strong>src/app/socket.service.ts</strong> 文件，编写以下 TypeScript 代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/app/socket.service.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Injectable, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"> </div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SocketService &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> socket: WebSocket;</div><div class="line">    <span class="keyword">private</span> listener: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter();</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:12345/ws"</span>);</div><div class="line">        <span class="keyword">this</span>.socket.onopen = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.listener.emit(&#123;<span class="string">"type"</span>: <span class="string">"open"</span>, <span class="string">"data"</span>: event&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.socket.onclose = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.listener.emit(&#123;<span class="string">"type"</span>: <span class="string">"close"</span>, <span class="string">"data"</span>: event&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.socket.onmessage = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.listener.emit(&#123;<span class="string">"type"</span>: <span class="string">"message"</span>, <span class="string">"data"</span>: <span class="built_in">JSON</span>.parse(event.data)&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> send(data: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.socket.send(data);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> close() &#123;</div><div class="line">        <span class="keyword">this</span>.socket.close();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> getEventListener() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该提供者是可以注射的，并在触发某些事件事发送数据。在构造方法中，建立了与Go应用的WebSocket 连接，并创建了3个事件监听器。分别对应每个socket创建和销毁时，及接收到消息时。</p><p>send方法允许我们向Go应用发送消息，close方法用于通知Go应用我们将断开连接。</p><p>提供者程序已创建，但是还不能在我们的的应用程序的任何文件中使用。因此，我们需要将其添加到 <strong>src/app/app.module.ts</strong> 文件的 @NgModule 块中。打开文件并输入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/app/app.module.ts</span></div><div class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; SocketService &#125; <span class="keyword">from</span> <span class="string">"./socket.service"</span>;</div><div class="line"> </div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">    declarations: [</div><div class="line">        AppComponent</div><div class="line">    ],</div><div class="line">    imports: [</div><div class="line">        BrowserModule,</div><div class="line">        FormsModule,</div><div class="line">        HttpModule</div><div class="line">    ],</div><div class="line">    providers: [SocketService],</div><div class="line">    bootstrap: [AppComponent]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</div></pre></td></tr></table></figure><p>需要注意的是，此时我们已经将provider导入并且添加到 @NgModule 块的 providers数组中了。</p><p>现在我们可以专注处理页面的逻辑了。打开 <strong>src/app/app.component.ts</strong> 文件，并输入以下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/app/app.component.ts</span></div><div class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; SocketService &#125; <span class="keyword">from</span> <span class="string">"./socket.service"</span>;</div><div class="line"> </div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    selector: <span class="string">'app-root'</span>,</div><div class="line">    templateUrl: <span class="string">'./app.component.html'</span>,</div><div class="line">    styleUrls: [<span class="string">'./app.component.css'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> messages: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;;</div><div class="line">    <span class="keyword">public</span> chatBox: <span class="built_in">string</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> socket: SocketService</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.messages = [];</div><div class="line">        <span class="keyword">this</span>.chatBox = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> ngOnInit() &#123;</div><div class="line">        <span class="keyword">this</span>.socket.getEventListener().subscribe(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span>(event.type == <span class="string">"message"</span>) &#123;</div><div class="line">                <span class="keyword">let</span> data = event.data.content;</div><div class="line">                <span class="keyword">if</span>(event.data.sender) &#123;</div><div class="line">                    data = event.data.sender + <span class="string">": "</span> + data;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.messages.push(data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(event.type == <span class="string">"close"</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.messages.push(<span class="string">"/The socket connection has been closed"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(event.type == <span class="string">"open"</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.messages.push(<span class="string">"/The socket connection has been established"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> ngOnDestroy() &#123;</div><div class="line">        <span class="keyword">this</span>.socket.close();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> send() &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.chatBox) &#123;</div><div class="line">            <span class="keyword">this</span>.socket.send(<span class="keyword">this</span>.chatBox);</div><div class="line">            <span class="keyword">this</span>.chatBox = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> isSystemMessage(message: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="keyword">return</span> message.startsWith(<span class="string">"/"</span>) ? <span class="string">"&lt;strong&gt;"</span> + message.substring(<span class="number">1</span>) + <span class="string">"&lt;/strong&gt;"</span> : message;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上述 AppComponent类的构造方法中，我们注册服务提供者并初始化需要绑定到UI的变量。在构造函数中加载或订阅不太好，我们使用ngOninit方法来代替。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/app/app.component.ts</span></div><div class="line"><span class="keyword">public</span> ngOnInit() &#123;</div><div class="line">    <span class="keyword">this</span>.socket.getEventListener().subscribe(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(event.type == <span class="string">"message"</span>) &#123;</div><div class="line">            <span class="keyword">let</span> data = event.data.content;</div><div class="line">            <span class="keyword">if</span>(event.data.sender) &#123;</div><div class="line">                data = event.data.sender + <span class="string">": "</span> + data;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.messages.push(data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(event.type == <span class="string">"close"</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.messages.push(<span class="string">"/The socket connection has been closed"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(event.type == <span class="string">"open"</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.messages.push(<span class="string">"/The socket connection has been established"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上述方法中，我们订阅了在provider中创建的事件监听器。在这里我们需要检查发生了什么事件。如果是一条消息，需要检查是否存在发件人，然后将其添加到消息中。</p><p>你可能注意到了，一些消息是以斜线开始的。用来表示系统消息，稍后会将其加粗。</p><p>当客户端断开时，关闭事件将会发送到服务器，如果消息已经发送，它也会被发送到服务器。</p><p>在查看HTML之前，先添加一些CSS，使其看起来更像一个聊天应用。打开 <strong>src/style.css</strong>，输入以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*src/styles.css*/</span></div><div class="line"><span class="comment">/* You can add global styles to this file, and also import other style files */</span></div><div class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</div><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">13px</span> Helvetica, Arial; &#125;</div><div class="line"><span class="selector-tag">form</span> &#123; <span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">3px</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</div><div class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">90%</span>; <span class="attribute">margin-right</span>: .<span class="number">5%</span>; &#125;</div><div class="line"><span class="selector-tag">form</span> <span class="selector-tag">button</span> &#123; <span class="attribute">width</span>: <span class="number">9%</span>; <span class="attribute">background</span>: <span class="built_in">rgb</span>(130, 224, 255); <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">10px</span>; &#125;</div><div class="line"><span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div><div class="line"><span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>; &#125;</div><div class="line"><span class="selector-id">#messages</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</div></pre></td></tr></table></figure><p>现在，需要处理下HTML了。打开 <strong>src/app/app.component.html</strong> 文件，并输入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--src/app/app.component.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let message of messages"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> [<span class="attr">innerHTML</span>]=<span class="string">"isSystemMessage(message)"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"chatBox"</span> [<span class="attr">ngModelOptions</span>]=<span class="string">"&#123;standalone: true&#125;"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"send()"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>这里我们只是简单的将消息数组遍历到屏幕上 。以斜线开头的消息将会被加粗。提交按钮绑定到了send方法中，当按下时，会提交输入框中的内容到Go应用。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>刚刚演示了如何使用 Go 和 Angular 2 创建一个 WebSocket 实时聊天应用。虽然没有在这个示例中存储聊天记录，但是这套逻辑可以应用于更复杂的项目，比如游戏，IOT，和其他很多场景。</p><h4 id="关于原作者"><a href="#关于原作者" class="headerlink" title="关于原作者"></a>关于原作者</h4><p><a href="https://www.thepolyglotdeveloper.com/author/nraboy/" target="_blank" rel="external">Nic Raboy</a>是现代网络和移动开发技术的倡导者。 他在Java，JavaScript，Golang以及各种框架（如Angular，NativeScript和Apache Cordova）方面拥有丰富的经验。 Nic写作的内容主要是他在使Web和移动开发更容易理解相关方面的经验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;本文&lt;a href=&quot;https://www.thepolyglotdeveloper.com/2016/12/create
      
    
    </summary>
    
      <category term="golang" scheme="https://www.qichengzx.com/categories/golang/"/>
    
    
      <category term="go" scheme="https://www.qichengzx.com/tags/go/"/>
    
  </entry>
  
</feed>
